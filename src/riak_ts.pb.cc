// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: riak_ts.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "riak_ts.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* TsQueryReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TsQueryReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TsQueryResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TsQueryResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TsGetReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TsGetReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TsGetResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TsGetResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TsPutReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TsPutReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TsTtbPutReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TsTtbPutReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TsPutResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TsPutResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TsDelReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TsDelReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TsDelResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TsDelResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TsInterpolation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TsInterpolation_reflection_ = NULL;
const ::google::protobuf::Descriptor* TsColumnDescription_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TsColumnDescription_reflection_ = NULL;
const ::google::protobuf::Descriptor* TsRow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TsRow_reflection_ = NULL;
const ::google::protobuf::Descriptor* TsCell_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TsCell_reflection_ = NULL;
const ::google::protobuf::Descriptor* TsListKeysReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TsListKeysReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TsListKeysResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TsListKeysResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TsCoverageReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TsCoverageReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TsCoverageResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TsCoverageResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TsCoverageEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TsCoverageEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* TsRange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TsRange_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TsColumnType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_riak_5fts_2eproto() {
  protobuf_AddDesc_riak_5fts_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "riak_ts.proto");
  GOOGLE_CHECK(file != NULL);
  TsQueryReq_descriptor_ = file->message_type(0);
  static const int TsQueryReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsQueryReq, query_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsQueryReq, stream_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsQueryReq, cover_context_),
  };
  TsQueryReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TsQueryReq_descriptor_,
      TsQueryReq::default_instance_,
      TsQueryReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsQueryReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsQueryReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TsQueryReq));
  TsQueryResp_descriptor_ = file->message_type(1);
  static const int TsQueryResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsQueryResp, columns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsQueryResp, rows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsQueryResp, done_),
  };
  TsQueryResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TsQueryResp_descriptor_,
      TsQueryResp::default_instance_,
      TsQueryResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsQueryResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsQueryResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TsQueryResp));
  TsGetReq_descriptor_ = file->message_type(2);
  static const int TsGetReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsGetReq, table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsGetReq, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsGetReq, timeout_),
  };
  TsGetReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TsGetReq_descriptor_,
      TsGetReq::default_instance_,
      TsGetReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsGetReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsGetReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TsGetReq));
  TsGetResp_descriptor_ = file->message_type(3);
  static const int TsGetResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsGetResp, columns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsGetResp, rows_),
  };
  TsGetResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TsGetResp_descriptor_,
      TsGetResp::default_instance_,
      TsGetResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsGetResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsGetResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TsGetResp));
  TsPutReq_descriptor_ = file->message_type(4);
  static const int TsPutReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsPutReq, table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsPutReq, columns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsPutReq, rows_),
  };
  TsPutReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TsPutReq_descriptor_,
      TsPutReq::default_instance_,
      TsPutReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsPutReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsPutReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TsPutReq));
  TsTtbPutReq_descriptor_ = file->message_type(5);
  static const int TsTtbPutReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsTtbPutReq, table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsTtbPutReq, columns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsTtbPutReq, rows_),
  };
  TsTtbPutReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TsTtbPutReq_descriptor_,
      TsTtbPutReq::default_instance_,
      TsTtbPutReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsTtbPutReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsTtbPutReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TsTtbPutReq));
  TsPutResp_descriptor_ = file->message_type(6);
  static const int TsPutResp_offsets_[1] = {
  };
  TsPutResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TsPutResp_descriptor_,
      TsPutResp::default_instance_,
      TsPutResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsPutResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsPutResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TsPutResp));
  TsDelReq_descriptor_ = file->message_type(7);
  static const int TsDelReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsDelReq, table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsDelReq, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsDelReq, vclock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsDelReq, timeout_),
  };
  TsDelReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TsDelReq_descriptor_,
      TsDelReq::default_instance_,
      TsDelReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsDelReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsDelReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TsDelReq));
  TsDelResp_descriptor_ = file->message_type(8);
  static const int TsDelResp_offsets_[1] = {
  };
  TsDelResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TsDelResp_descriptor_,
      TsDelResp::default_instance_,
      TsDelResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsDelResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsDelResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TsDelResp));
  TsInterpolation_descriptor_ = file->message_type(9);
  static const int TsInterpolation_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsInterpolation, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsInterpolation, interpolations_),
  };
  TsInterpolation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TsInterpolation_descriptor_,
      TsInterpolation::default_instance_,
      TsInterpolation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsInterpolation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsInterpolation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TsInterpolation));
  TsColumnDescription_descriptor_ = file->message_type(10);
  static const int TsColumnDescription_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsColumnDescription, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsColumnDescription, type_),
  };
  TsColumnDescription_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TsColumnDescription_descriptor_,
      TsColumnDescription::default_instance_,
      TsColumnDescription_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsColumnDescription, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsColumnDescription, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TsColumnDescription));
  TsRow_descriptor_ = file->message_type(11);
  static const int TsRow_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsRow, cells_),
  };
  TsRow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TsRow_descriptor_,
      TsRow::default_instance_,
      TsRow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsRow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsRow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TsRow));
  TsCell_descriptor_ = file->message_type(12);
  static const int TsCell_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsCell, varchar_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsCell, sint64_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsCell, timestamp_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsCell, boolean_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsCell, double_value_),
  };
  TsCell_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TsCell_descriptor_,
      TsCell::default_instance_,
      TsCell_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsCell, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsCell, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TsCell));
  TsListKeysReq_descriptor_ = file->message_type(13);
  static const int TsListKeysReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsListKeysReq, table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsListKeysReq, timeout_),
  };
  TsListKeysReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TsListKeysReq_descriptor_,
      TsListKeysReq::default_instance_,
      TsListKeysReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsListKeysReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsListKeysReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TsListKeysReq));
  TsListKeysResp_descriptor_ = file->message_type(14);
  static const int TsListKeysResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsListKeysResp, keys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsListKeysResp, done_),
  };
  TsListKeysResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TsListKeysResp_descriptor_,
      TsListKeysResp::default_instance_,
      TsListKeysResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsListKeysResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsListKeysResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TsListKeysResp));
  TsCoverageReq_descriptor_ = file->message_type(15);
  static const int TsCoverageReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsCoverageReq, query_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsCoverageReq, table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsCoverageReq, replace_cover_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsCoverageReq, unavailable_cover_),
  };
  TsCoverageReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TsCoverageReq_descriptor_,
      TsCoverageReq::default_instance_,
      TsCoverageReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsCoverageReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsCoverageReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TsCoverageReq));
  TsCoverageResp_descriptor_ = file->message_type(16);
  static const int TsCoverageResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsCoverageResp, entries_),
  };
  TsCoverageResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TsCoverageResp_descriptor_,
      TsCoverageResp::default_instance_,
      TsCoverageResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsCoverageResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsCoverageResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TsCoverageResp));
  TsCoverageEntry_descriptor_ = file->message_type(17);
  static const int TsCoverageEntry_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsCoverageEntry, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsCoverageEntry, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsCoverageEntry, cover_context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsCoverageEntry, range_),
  };
  TsCoverageEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TsCoverageEntry_descriptor_,
      TsCoverageEntry::default_instance_,
      TsCoverageEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsCoverageEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsCoverageEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TsCoverageEntry));
  TsRange_descriptor_ = file->message_type(18);
  static const int TsRange_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsRange, field_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsRange, lower_bound_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsRange, lower_bound_inclusive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsRange, upper_bound_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsRange, upper_bound_inclusive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsRange, desc_),
  };
  TsRange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TsRange_descriptor_,
      TsRange::default_instance_,
      TsRange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsRange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsRange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TsRange));
  TsColumnType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_riak_5fts_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TsQueryReq_descriptor_, &TsQueryReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TsQueryResp_descriptor_, &TsQueryResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TsGetReq_descriptor_, &TsGetReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TsGetResp_descriptor_, &TsGetResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TsPutReq_descriptor_, &TsPutReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TsTtbPutReq_descriptor_, &TsTtbPutReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TsPutResp_descriptor_, &TsPutResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TsDelReq_descriptor_, &TsDelReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TsDelResp_descriptor_, &TsDelResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TsInterpolation_descriptor_, &TsInterpolation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TsColumnDescription_descriptor_, &TsColumnDescription::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TsRow_descriptor_, &TsRow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TsCell_descriptor_, &TsCell::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TsListKeysReq_descriptor_, &TsListKeysReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TsListKeysResp_descriptor_, &TsListKeysResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TsCoverageReq_descriptor_, &TsCoverageReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TsCoverageResp_descriptor_, &TsCoverageResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TsCoverageEntry_descriptor_, &TsCoverageEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TsRange_descriptor_, &TsRange::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_riak_5fts_2eproto() {
  delete TsQueryReq::default_instance_;
  delete TsQueryReq_reflection_;
  delete TsQueryResp::default_instance_;
  delete TsQueryResp_reflection_;
  delete TsGetReq::default_instance_;
  delete TsGetReq_reflection_;
  delete TsGetResp::default_instance_;
  delete TsGetResp_reflection_;
  delete TsPutReq::default_instance_;
  delete TsPutReq_reflection_;
  delete TsTtbPutReq::default_instance_;
  delete TsTtbPutReq_reflection_;
  delete TsPutResp::default_instance_;
  delete TsPutResp_reflection_;
  delete TsDelReq::default_instance_;
  delete TsDelReq_reflection_;
  delete TsDelResp::default_instance_;
  delete TsDelResp_reflection_;
  delete TsInterpolation::default_instance_;
  delete TsInterpolation_reflection_;
  delete TsColumnDescription::default_instance_;
  delete TsColumnDescription_reflection_;
  delete TsRow::default_instance_;
  delete TsRow_reflection_;
  delete TsCell::default_instance_;
  delete TsCell_reflection_;
  delete TsListKeysReq::default_instance_;
  delete TsListKeysReq_reflection_;
  delete TsListKeysResp::default_instance_;
  delete TsListKeysResp_reflection_;
  delete TsCoverageReq::default_instance_;
  delete TsCoverageReq_reflection_;
  delete TsCoverageResp::default_instance_;
  delete TsCoverageResp_reflection_;
  delete TsCoverageEntry::default_instance_;
  delete TsCoverageEntry_reflection_;
  delete TsRange::default_instance_;
  delete TsRange_reflection_;
}

void protobuf_AddDesc_riak_5fts_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_riak_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rriak_ts.proto\032\nriak.proto\"[\n\nTsQueryRe"
    "q\022\037\n\005query\030\001 \001(\0132\020.TsInterpolation\022\025\n\006st"
    "ream\030\002 \001(\010:\005false\022\025\n\rcover_context\030\003 \001(\014"
    "\"^\n\013TsQueryResp\022%\n\007columns\030\001 \003(\0132\024.TsCol"
    "umnDescription\022\024\n\004rows\030\002 \003(\0132\006.TsRow\022\022\n\004"
    "done\030\003 \001(\010:\004true\"@\n\010TsGetReq\022\r\n\005table\030\001 "
    "\002(\014\022\024\n\003key\030\002 \003(\0132\007.TsCell\022\017\n\007timeout\030\003 \001"
    "(\r\"H\n\tTsGetResp\022%\n\007columns\030\001 \003(\0132\024.TsCol"
    "umnDescription\022\024\n\004rows\030\002 \003(\0132\006.TsRow\"V\n\010"
    "TsPutReq\022\r\n\005table\030\001 \002(\014\022%\n\007columns\030\002 \003(\013"
    "2\024.TsColumnDescription\022\024\n\004rows\030\003 \003(\0132\006.T"
    "sRow\"Y\n\013TsTtbPutReq\022\r\n\005table\030\001 \002(\014\022%\n\007co"
    "lumns\030\002 \003(\0132\024.TsColumnDescription\022\024\n\004row"
    "s\030\003 \003(\0132\006.TsRow\"\013\n\tTsPutResp\"P\n\010TsDelReq"
    "\022\r\n\005table\030\001 \002(\014\022\024\n\003key\030\002 \003(\0132\007.TsCell\022\016\n"
    "\006vclock\030\003 \001(\014\022\017\n\007timeout\030\004 \001(\r\"\013\n\tTsDelR"
    "esp\"A\n\017TsInterpolation\022\014\n\004base\030\001 \002(\014\022 \n\016"
    "interpolations\030\002 \003(\0132\010.RpbPair\"@\n\023TsColu"
    "mnDescription\022\014\n\004name\030\001 \002(\014\022\033\n\004type\030\002 \002("
    "\0162\r.TsColumnType\"\037\n\005TsRow\022\026\n\005cells\030\001 \003(\013"
    "2\007.TsCell\"{\n\006TsCell\022\025\n\rvarchar_value\030\001 \001"
    "(\014\022\024\n\014sint64_value\030\002 \001(\022\022\027\n\017timestamp_va"
    "lue\030\003 \001(\022\022\025\n\rboolean_value\030\004 \001(\010\022\024\n\014doub"
    "le_value\030\005 \001(\001\"/\n\rTsListKeysReq\022\r\n\005table"
    "\030\001 \002(\014\022\017\n\007timeout\030\002 \001(\r\"4\n\016TsListKeysRes"
    "p\022\024\n\004keys\030\001 \003(\0132\006.TsRow\022\014\n\004done\030\002 \001(\010\"q\n"
    "\rTsCoverageReq\022\037\n\005query\030\001 \001(\0132\020.TsInterp"
    "olation\022\r\n\005table\030\002 \002(\014\022\025\n\rreplace_cover\030"
    "\003 \001(\014\022\031\n\021unavailable_cover\030\004 \003(\014\"3\n\016TsCo"
    "verageResp\022!\n\007entries\030\001 \003(\0132\020.TsCoverage"
    "Entry\"[\n\017TsCoverageEntry\022\n\n\002ip\030\001 \002(\014\022\014\n\004"
    "port\030\002 \002(\r\022\025\n\rcover_context\030\003 \002(\014\022\027\n\005ran"
    "ge\030\004 \001(\0132\010.TsRange\"\223\001\n\007TsRange\022\022\n\nfield_"
    "name\030\001 \002(\014\022\023\n\013lower_bound\030\002 \002(\022\022\035\n\025lower"
    "_bound_inclusive\030\003 \002(\010\022\023\n\013upper_bound\030\004 "
    "\002(\022\022\035\n\025upper_bound_inclusive\030\005 \002(\010\022\014\n\004de"
    "sc\030\006 \002(\014*O\n\014TsColumnType\022\013\n\007VARCHAR\020\000\022\n\n"
    "\006SINT64\020\001\022\n\n\006DOUBLE\020\002\022\r\n\tTIMESTAMP\020\003\022\013\n\007"
    "BOOLEAN\020\004B#\n\027com.basho.riak.protobufB\010Ri"
    "akTsPB", 1566);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "riak_ts.proto", &protobuf_RegisterTypes);
  TsQueryReq::default_instance_ = new TsQueryReq();
  TsQueryResp::default_instance_ = new TsQueryResp();
  TsGetReq::default_instance_ = new TsGetReq();
  TsGetResp::default_instance_ = new TsGetResp();
  TsPutReq::default_instance_ = new TsPutReq();
  TsTtbPutReq::default_instance_ = new TsTtbPutReq();
  TsPutResp::default_instance_ = new TsPutResp();
  TsDelReq::default_instance_ = new TsDelReq();
  TsDelResp::default_instance_ = new TsDelResp();
  TsInterpolation::default_instance_ = new TsInterpolation();
  TsColumnDescription::default_instance_ = new TsColumnDescription();
  TsRow::default_instance_ = new TsRow();
  TsCell::default_instance_ = new TsCell();
  TsListKeysReq::default_instance_ = new TsListKeysReq();
  TsListKeysResp::default_instance_ = new TsListKeysResp();
  TsCoverageReq::default_instance_ = new TsCoverageReq();
  TsCoverageResp::default_instance_ = new TsCoverageResp();
  TsCoverageEntry::default_instance_ = new TsCoverageEntry();
  TsRange::default_instance_ = new TsRange();
  TsQueryReq::default_instance_->InitAsDefaultInstance();
  TsQueryResp::default_instance_->InitAsDefaultInstance();
  TsGetReq::default_instance_->InitAsDefaultInstance();
  TsGetResp::default_instance_->InitAsDefaultInstance();
  TsPutReq::default_instance_->InitAsDefaultInstance();
  TsTtbPutReq::default_instance_->InitAsDefaultInstance();
  TsPutResp::default_instance_->InitAsDefaultInstance();
  TsDelReq::default_instance_->InitAsDefaultInstance();
  TsDelResp::default_instance_->InitAsDefaultInstance();
  TsInterpolation::default_instance_->InitAsDefaultInstance();
  TsColumnDescription::default_instance_->InitAsDefaultInstance();
  TsRow::default_instance_->InitAsDefaultInstance();
  TsCell::default_instance_->InitAsDefaultInstance();
  TsListKeysReq::default_instance_->InitAsDefaultInstance();
  TsListKeysResp::default_instance_->InitAsDefaultInstance();
  TsCoverageReq::default_instance_->InitAsDefaultInstance();
  TsCoverageResp::default_instance_->InitAsDefaultInstance();
  TsCoverageEntry::default_instance_->InitAsDefaultInstance();
  TsRange::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_riak_5fts_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_riak_5fts_2eproto {
  StaticDescriptorInitializer_riak_5fts_2eproto() {
    protobuf_AddDesc_riak_5fts_2eproto();
  }
} static_descriptor_initializer_riak_5fts_2eproto_;
const ::google::protobuf::EnumDescriptor* TsColumnType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TsColumnType_descriptor_;
}
bool TsColumnType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int TsQueryReq::kQueryFieldNumber;
const int TsQueryReq::kStreamFieldNumber;
const int TsQueryReq::kCoverContextFieldNumber;
#endif  // !_MSC_VER

TsQueryReq::TsQueryReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TsQueryReq)
}

void TsQueryReq::InitAsDefaultInstance() {
  query_ = const_cast< ::TsInterpolation*>(&::TsInterpolation::default_instance());
}

TsQueryReq::TsQueryReq(const TsQueryReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TsQueryReq)
}

void TsQueryReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  query_ = NULL;
  stream_ = false;
  cover_context_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TsQueryReq::~TsQueryReq() {
  // @@protoc_insertion_point(destructor:TsQueryReq)
  SharedDtor();
}

void TsQueryReq::SharedDtor() {
  if (cover_context_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cover_context_;
  }
  if (this != default_instance_) {
    delete query_;
  }
}

void TsQueryReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TsQueryReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TsQueryReq_descriptor_;
}

const TsQueryReq& TsQueryReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_5fts_2eproto();
  return *default_instance_;
}

TsQueryReq* TsQueryReq::default_instance_ = NULL;

TsQueryReq* TsQueryReq::New() const {
  return new TsQueryReq;
}

void TsQueryReq::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_query()) {
      if (query_ != NULL) query_->::TsInterpolation::Clear();
    }
    stream_ = false;
    if (has_cover_context()) {
      if (cover_context_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cover_context_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TsQueryReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TsQueryReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TsInterpolation query = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_query()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_stream;
        break;
      }

      // optional bool stream = 2 [default = false];
      case 2: {
        if (tag == 16) {
         parse_stream:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stream_)));
          set_has_stream();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cover_context;
        break;
      }

      // optional bytes cover_context = 3;
      case 3: {
        if (tag == 26) {
         parse_cover_context:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cover_context()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TsQueryReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TsQueryReq)
  return false;
#undef DO_
}

void TsQueryReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TsQueryReq)
  // optional .TsInterpolation query = 1;
  if (has_query()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->query(), output);
  }

  // optional bool stream = 2 [default = false];
  if (has_stream()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->stream(), output);
  }

  // optional bytes cover_context = 3;
  if (has_cover_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->cover_context(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TsQueryReq)
}

::google::protobuf::uint8* TsQueryReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TsQueryReq)
  // optional .TsInterpolation query = 1;
  if (has_query()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->query(), target);
  }

  // optional bool stream = 2 [default = false];
  if (has_stream()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->stream(), target);
  }

  // optional bytes cover_context = 3;
  if (has_cover_context()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->cover_context(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TsQueryReq)
  return target;
}

int TsQueryReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TsInterpolation query = 1;
    if (has_query()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->query());
    }

    // optional bool stream = 2 [default = false];
    if (has_stream()) {
      total_size += 1 + 1;
    }

    // optional bytes cover_context = 3;
    if (has_cover_context()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cover_context());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TsQueryReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TsQueryReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TsQueryReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TsQueryReq::MergeFrom(const TsQueryReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_query()) {
      mutable_query()->::TsInterpolation::MergeFrom(from.query());
    }
    if (from.has_stream()) {
      set_stream(from.stream());
    }
    if (from.has_cover_context()) {
      set_cover_context(from.cover_context());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TsQueryReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TsQueryReq::CopyFrom(const TsQueryReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TsQueryReq::IsInitialized() const {

  if (has_query()) {
    if (!this->query().IsInitialized()) return false;
  }
  return true;
}

void TsQueryReq::Swap(TsQueryReq* other) {
  if (other != this) {
    std::swap(query_, other->query_);
    std::swap(stream_, other->stream_);
    std::swap(cover_context_, other->cover_context_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TsQueryReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TsQueryReq_descriptor_;
  metadata.reflection = TsQueryReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TsQueryResp::kColumnsFieldNumber;
const int TsQueryResp::kRowsFieldNumber;
const int TsQueryResp::kDoneFieldNumber;
#endif  // !_MSC_VER

TsQueryResp::TsQueryResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TsQueryResp)
}

void TsQueryResp::InitAsDefaultInstance() {
}

TsQueryResp::TsQueryResp(const TsQueryResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TsQueryResp)
}

void TsQueryResp::SharedCtor() {
  _cached_size_ = 0;
  done_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TsQueryResp::~TsQueryResp() {
  // @@protoc_insertion_point(destructor:TsQueryResp)
  SharedDtor();
}

void TsQueryResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TsQueryResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TsQueryResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TsQueryResp_descriptor_;
}

const TsQueryResp& TsQueryResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_5fts_2eproto();
  return *default_instance_;
}

TsQueryResp* TsQueryResp::default_instance_ = NULL;

TsQueryResp* TsQueryResp::New() const {
  return new TsQueryResp;
}

void TsQueryResp::Clear() {
  done_ = true;
  columns_.Clear();
  rows_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TsQueryResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TsQueryResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TsColumnDescription columns = 1;
      case 1: {
        if (tag == 10) {
         parse_columns:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_columns()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_columns;
        if (input->ExpectTag(18)) goto parse_rows;
        break;
      }

      // repeated .TsRow rows = 2;
      case 2: {
        if (tag == 18) {
         parse_rows:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rows()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_rows;
        if (input->ExpectTag(24)) goto parse_done;
        break;
      }

      // optional bool done = 3 [default = true];
      case 3: {
        if (tag == 24) {
         parse_done:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &done_)));
          set_has_done();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TsQueryResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TsQueryResp)
  return false;
#undef DO_
}

void TsQueryResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TsQueryResp)
  // repeated .TsColumnDescription columns = 1;
  for (int i = 0; i < this->columns_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->columns(i), output);
  }

  // repeated .TsRow rows = 2;
  for (int i = 0; i < this->rows_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rows(i), output);
  }

  // optional bool done = 3 [default = true];
  if (has_done()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->done(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TsQueryResp)
}

::google::protobuf::uint8* TsQueryResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TsQueryResp)
  // repeated .TsColumnDescription columns = 1;
  for (int i = 0; i < this->columns_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->columns(i), target);
  }

  // repeated .TsRow rows = 2;
  for (int i = 0; i < this->rows_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rows(i), target);
  }

  // optional bool done = 3 [default = true];
  if (has_done()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->done(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TsQueryResp)
  return target;
}

int TsQueryResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional bool done = 3 [default = true];
    if (has_done()) {
      total_size += 1 + 1;
    }

  }
  // repeated .TsColumnDescription columns = 1;
  total_size += 1 * this->columns_size();
  for (int i = 0; i < this->columns_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->columns(i));
  }

  // repeated .TsRow rows = 2;
  total_size += 1 * this->rows_size();
  for (int i = 0; i < this->rows_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rows(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TsQueryResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TsQueryResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TsQueryResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TsQueryResp::MergeFrom(const TsQueryResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  columns_.MergeFrom(from.columns_);
  rows_.MergeFrom(from.rows_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_done()) {
      set_done(from.done());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TsQueryResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TsQueryResp::CopyFrom(const TsQueryResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TsQueryResp::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->columns())) return false;
  return true;
}

void TsQueryResp::Swap(TsQueryResp* other) {
  if (other != this) {
    columns_.Swap(&other->columns_);
    rows_.Swap(&other->rows_);
    std::swap(done_, other->done_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TsQueryResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TsQueryResp_descriptor_;
  metadata.reflection = TsQueryResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TsGetReq::kTableFieldNumber;
const int TsGetReq::kKeyFieldNumber;
const int TsGetReq::kTimeoutFieldNumber;
#endif  // !_MSC_VER

TsGetReq::TsGetReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TsGetReq)
}

void TsGetReq::InitAsDefaultInstance() {
}

TsGetReq::TsGetReq(const TsGetReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TsGetReq)
}

void TsGetReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  table_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timeout_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TsGetReq::~TsGetReq() {
  // @@protoc_insertion_point(destructor:TsGetReq)
  SharedDtor();
}

void TsGetReq::SharedDtor() {
  if (table_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete table_;
  }
  if (this != default_instance_) {
  }
}

void TsGetReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TsGetReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TsGetReq_descriptor_;
}

const TsGetReq& TsGetReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_5fts_2eproto();
  return *default_instance_;
}

TsGetReq* TsGetReq::default_instance_ = NULL;

TsGetReq* TsGetReq::New() const {
  return new TsGetReq;
}

void TsGetReq::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    if (has_table()) {
      if (table_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        table_->clear();
      }
    }
    timeout_ = 0u;
  }
  key_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TsGetReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TsGetReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes table = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_table()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // repeated .TsCell key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        if (input->ExpectTag(24)) goto parse_timeout;
        break;
      }

      // optional uint32 timeout = 3;
      case 3: {
        if (tag == 24) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TsGetReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TsGetReq)
  return false;
#undef DO_
}

void TsGetReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TsGetReq)
  // required bytes table = 1;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->table(), output);
  }

  // repeated .TsCell key = 2;
  for (int i = 0; i < this->key_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->key(i), output);
  }

  // optional uint32 timeout = 3;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->timeout(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TsGetReq)
}

::google::protobuf::uint8* TsGetReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TsGetReq)
  // required bytes table = 1;
  if (has_table()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->table(), target);
  }

  // repeated .TsCell key = 2;
  for (int i = 0; i < this->key_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->key(i), target);
  }

  // optional uint32 timeout = 3;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->timeout(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TsGetReq)
  return target;
}

int TsGetReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes table = 1;
    if (has_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->table());
    }

    // optional uint32 timeout = 3;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeout());
    }

  }
  // repeated .TsCell key = 2;
  total_size += 1 * this->key_size();
  for (int i = 0; i < this->key_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->key(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TsGetReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TsGetReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TsGetReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TsGetReq::MergeFrom(const TsGetReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  key_.MergeFrom(from.key_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TsGetReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TsGetReq::CopyFrom(const TsGetReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TsGetReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TsGetReq::Swap(TsGetReq* other) {
  if (other != this) {
    std::swap(table_, other->table_);
    key_.Swap(&other->key_);
    std::swap(timeout_, other->timeout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TsGetReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TsGetReq_descriptor_;
  metadata.reflection = TsGetReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TsGetResp::kColumnsFieldNumber;
const int TsGetResp::kRowsFieldNumber;
#endif  // !_MSC_VER

TsGetResp::TsGetResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TsGetResp)
}

void TsGetResp::InitAsDefaultInstance() {
}

TsGetResp::TsGetResp(const TsGetResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TsGetResp)
}

void TsGetResp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TsGetResp::~TsGetResp() {
  // @@protoc_insertion_point(destructor:TsGetResp)
  SharedDtor();
}

void TsGetResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TsGetResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TsGetResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TsGetResp_descriptor_;
}

const TsGetResp& TsGetResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_5fts_2eproto();
  return *default_instance_;
}

TsGetResp* TsGetResp::default_instance_ = NULL;

TsGetResp* TsGetResp::New() const {
  return new TsGetResp;
}

void TsGetResp::Clear() {
  columns_.Clear();
  rows_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TsGetResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TsGetResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TsColumnDescription columns = 1;
      case 1: {
        if (tag == 10) {
         parse_columns:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_columns()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_columns;
        if (input->ExpectTag(18)) goto parse_rows;
        break;
      }

      // repeated .TsRow rows = 2;
      case 2: {
        if (tag == 18) {
         parse_rows:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rows()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_rows;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TsGetResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TsGetResp)
  return false;
#undef DO_
}

void TsGetResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TsGetResp)
  // repeated .TsColumnDescription columns = 1;
  for (int i = 0; i < this->columns_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->columns(i), output);
  }

  // repeated .TsRow rows = 2;
  for (int i = 0; i < this->rows_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rows(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TsGetResp)
}

::google::protobuf::uint8* TsGetResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TsGetResp)
  // repeated .TsColumnDescription columns = 1;
  for (int i = 0; i < this->columns_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->columns(i), target);
  }

  // repeated .TsRow rows = 2;
  for (int i = 0; i < this->rows_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rows(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TsGetResp)
  return target;
}

int TsGetResp::ByteSize() const {
  int total_size = 0;

  // repeated .TsColumnDescription columns = 1;
  total_size += 1 * this->columns_size();
  for (int i = 0; i < this->columns_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->columns(i));
  }

  // repeated .TsRow rows = 2;
  total_size += 1 * this->rows_size();
  for (int i = 0; i < this->rows_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rows(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TsGetResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TsGetResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TsGetResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TsGetResp::MergeFrom(const TsGetResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  columns_.MergeFrom(from.columns_);
  rows_.MergeFrom(from.rows_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TsGetResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TsGetResp::CopyFrom(const TsGetResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TsGetResp::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->columns())) return false;
  return true;
}

void TsGetResp::Swap(TsGetResp* other) {
  if (other != this) {
    columns_.Swap(&other->columns_);
    rows_.Swap(&other->rows_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TsGetResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TsGetResp_descriptor_;
  metadata.reflection = TsGetResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TsPutReq::kTableFieldNumber;
const int TsPutReq::kColumnsFieldNumber;
const int TsPutReq::kRowsFieldNumber;
#endif  // !_MSC_VER

TsPutReq::TsPutReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TsPutReq)
}

void TsPutReq::InitAsDefaultInstance() {
}

TsPutReq::TsPutReq(const TsPutReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TsPutReq)
}

void TsPutReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  table_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TsPutReq::~TsPutReq() {
  // @@protoc_insertion_point(destructor:TsPutReq)
  SharedDtor();
}

void TsPutReq::SharedDtor() {
  if (table_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete table_;
  }
  if (this != default_instance_) {
  }
}

void TsPutReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TsPutReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TsPutReq_descriptor_;
}

const TsPutReq& TsPutReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_5fts_2eproto();
  return *default_instance_;
}

TsPutReq* TsPutReq::default_instance_ = NULL;

TsPutReq* TsPutReq::New() const {
  return new TsPutReq;
}

void TsPutReq::Clear() {
  if (has_table()) {
    if (table_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      table_->clear();
    }
  }
  columns_.Clear();
  rows_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TsPutReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TsPutReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes table = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_table()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_columns;
        break;
      }

      // repeated .TsColumnDescription columns = 2;
      case 2: {
        if (tag == 18) {
         parse_columns:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_columns()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_columns;
        if (input->ExpectTag(26)) goto parse_rows;
        break;
      }

      // repeated .TsRow rows = 3;
      case 3: {
        if (tag == 26) {
         parse_rows:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rows()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_rows;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TsPutReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TsPutReq)
  return false;
#undef DO_
}

void TsPutReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TsPutReq)
  // required bytes table = 1;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->table(), output);
  }

  // repeated .TsColumnDescription columns = 2;
  for (int i = 0; i < this->columns_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->columns(i), output);
  }

  // repeated .TsRow rows = 3;
  for (int i = 0; i < this->rows_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rows(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TsPutReq)
}

::google::protobuf::uint8* TsPutReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TsPutReq)
  // required bytes table = 1;
  if (has_table()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->table(), target);
  }

  // repeated .TsColumnDescription columns = 2;
  for (int i = 0; i < this->columns_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->columns(i), target);
  }

  // repeated .TsRow rows = 3;
  for (int i = 0; i < this->rows_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rows(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TsPutReq)
  return target;
}

int TsPutReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes table = 1;
    if (has_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->table());
    }

  }
  // repeated .TsColumnDescription columns = 2;
  total_size += 1 * this->columns_size();
  for (int i = 0; i < this->columns_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->columns(i));
  }

  // repeated .TsRow rows = 3;
  total_size += 1 * this->rows_size();
  for (int i = 0; i < this->rows_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rows(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TsPutReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TsPutReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TsPutReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TsPutReq::MergeFrom(const TsPutReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  columns_.MergeFrom(from.columns_);
  rows_.MergeFrom(from.rows_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table()) {
      set_table(from.table());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TsPutReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TsPutReq::CopyFrom(const TsPutReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TsPutReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->columns())) return false;
  return true;
}

void TsPutReq::Swap(TsPutReq* other) {
  if (other != this) {
    std::swap(table_, other->table_);
    columns_.Swap(&other->columns_);
    rows_.Swap(&other->rows_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TsPutReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TsPutReq_descriptor_;
  metadata.reflection = TsPutReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TsTtbPutReq::kTableFieldNumber;
const int TsTtbPutReq::kColumnsFieldNumber;
const int TsTtbPutReq::kRowsFieldNumber;
#endif  // !_MSC_VER

TsTtbPutReq::TsTtbPutReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TsTtbPutReq)
}

void TsTtbPutReq::InitAsDefaultInstance() {
}

TsTtbPutReq::TsTtbPutReq(const TsTtbPutReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TsTtbPutReq)
}

void TsTtbPutReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  table_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TsTtbPutReq::~TsTtbPutReq() {
  // @@protoc_insertion_point(destructor:TsTtbPutReq)
  SharedDtor();
}

void TsTtbPutReq::SharedDtor() {
  if (table_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete table_;
  }
  if (this != default_instance_) {
  }
}

void TsTtbPutReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TsTtbPutReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TsTtbPutReq_descriptor_;
}

const TsTtbPutReq& TsTtbPutReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_5fts_2eproto();
  return *default_instance_;
}

TsTtbPutReq* TsTtbPutReq::default_instance_ = NULL;

TsTtbPutReq* TsTtbPutReq::New() const {
  return new TsTtbPutReq;
}

void TsTtbPutReq::Clear() {
  if (has_table()) {
    if (table_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      table_->clear();
    }
  }
  columns_.Clear();
  rows_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TsTtbPutReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TsTtbPutReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes table = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_table()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_columns;
        break;
      }

      // repeated .TsColumnDescription columns = 2;
      case 2: {
        if (tag == 18) {
         parse_columns:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_columns()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_columns;
        if (input->ExpectTag(26)) goto parse_rows;
        break;
      }

      // repeated .TsRow rows = 3;
      case 3: {
        if (tag == 26) {
         parse_rows:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rows()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_rows;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TsTtbPutReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TsTtbPutReq)
  return false;
#undef DO_
}

void TsTtbPutReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TsTtbPutReq)
  // required bytes table = 1;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->table(), output);
  }

  // repeated .TsColumnDescription columns = 2;
  for (int i = 0; i < this->columns_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->columns(i), output);
  }

  // repeated .TsRow rows = 3;
  for (int i = 0; i < this->rows_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rows(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TsTtbPutReq)
}

::google::protobuf::uint8* TsTtbPutReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TsTtbPutReq)
  // required bytes table = 1;
  if (has_table()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->table(), target);
  }

  // repeated .TsColumnDescription columns = 2;
  for (int i = 0; i < this->columns_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->columns(i), target);
  }

  // repeated .TsRow rows = 3;
  for (int i = 0; i < this->rows_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rows(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TsTtbPutReq)
  return target;
}

int TsTtbPutReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes table = 1;
    if (has_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->table());
    }

  }
  // repeated .TsColumnDescription columns = 2;
  total_size += 1 * this->columns_size();
  for (int i = 0; i < this->columns_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->columns(i));
  }

  // repeated .TsRow rows = 3;
  total_size += 1 * this->rows_size();
  for (int i = 0; i < this->rows_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rows(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TsTtbPutReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TsTtbPutReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TsTtbPutReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TsTtbPutReq::MergeFrom(const TsTtbPutReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  columns_.MergeFrom(from.columns_);
  rows_.MergeFrom(from.rows_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table()) {
      set_table(from.table());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TsTtbPutReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TsTtbPutReq::CopyFrom(const TsTtbPutReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TsTtbPutReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->columns())) return false;
  return true;
}

void TsTtbPutReq::Swap(TsTtbPutReq* other) {
  if (other != this) {
    std::swap(table_, other->table_);
    columns_.Swap(&other->columns_);
    rows_.Swap(&other->rows_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TsTtbPutReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TsTtbPutReq_descriptor_;
  metadata.reflection = TsTtbPutReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

TsPutResp::TsPutResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TsPutResp)
}

void TsPutResp::InitAsDefaultInstance() {
}

TsPutResp::TsPutResp(const TsPutResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TsPutResp)
}

void TsPutResp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TsPutResp::~TsPutResp() {
  // @@protoc_insertion_point(destructor:TsPutResp)
  SharedDtor();
}

void TsPutResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TsPutResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TsPutResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TsPutResp_descriptor_;
}

const TsPutResp& TsPutResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_5fts_2eproto();
  return *default_instance_;
}

TsPutResp* TsPutResp::default_instance_ = NULL;

TsPutResp* TsPutResp::New() const {
  return new TsPutResp;
}

void TsPutResp::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TsPutResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TsPutResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:TsPutResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TsPutResp)
  return false;
#undef DO_
}

void TsPutResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TsPutResp)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TsPutResp)
}

::google::protobuf::uint8* TsPutResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TsPutResp)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TsPutResp)
  return target;
}

int TsPutResp::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TsPutResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TsPutResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TsPutResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TsPutResp::MergeFrom(const TsPutResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TsPutResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TsPutResp::CopyFrom(const TsPutResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TsPutResp::IsInitialized() const {

  return true;
}

void TsPutResp::Swap(TsPutResp* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TsPutResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TsPutResp_descriptor_;
  metadata.reflection = TsPutResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TsDelReq::kTableFieldNumber;
const int TsDelReq::kKeyFieldNumber;
const int TsDelReq::kVclockFieldNumber;
const int TsDelReq::kTimeoutFieldNumber;
#endif  // !_MSC_VER

TsDelReq::TsDelReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TsDelReq)
}

void TsDelReq::InitAsDefaultInstance() {
}

TsDelReq::TsDelReq(const TsDelReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TsDelReq)
}

void TsDelReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  table_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vclock_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timeout_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TsDelReq::~TsDelReq() {
  // @@protoc_insertion_point(destructor:TsDelReq)
  SharedDtor();
}

void TsDelReq::SharedDtor() {
  if (table_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete table_;
  }
  if (vclock_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vclock_;
  }
  if (this != default_instance_) {
  }
}

void TsDelReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TsDelReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TsDelReq_descriptor_;
}

const TsDelReq& TsDelReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_5fts_2eproto();
  return *default_instance_;
}

TsDelReq* TsDelReq::default_instance_ = NULL;

TsDelReq* TsDelReq::New() const {
  return new TsDelReq;
}

void TsDelReq::Clear() {
  if (_has_bits_[0 / 32] & 13) {
    if (has_table()) {
      if (table_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        table_->clear();
      }
    }
    if (has_vclock()) {
      if (vclock_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        vclock_->clear();
      }
    }
    timeout_ = 0u;
  }
  key_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TsDelReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TsDelReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes table = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_table()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // repeated .TsCell key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        if (input->ExpectTag(26)) goto parse_vclock;
        break;
      }

      // optional bytes vclock = 3;
      case 3: {
        if (tag == 26) {
         parse_vclock:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_vclock()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_timeout;
        break;
      }

      // optional uint32 timeout = 4;
      case 4: {
        if (tag == 32) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TsDelReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TsDelReq)
  return false;
#undef DO_
}

void TsDelReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TsDelReq)
  // required bytes table = 1;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->table(), output);
  }

  // repeated .TsCell key = 2;
  for (int i = 0; i < this->key_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->key(i), output);
  }

  // optional bytes vclock = 3;
  if (has_vclock()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->vclock(), output);
  }

  // optional uint32 timeout = 4;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->timeout(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TsDelReq)
}

::google::protobuf::uint8* TsDelReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TsDelReq)
  // required bytes table = 1;
  if (has_table()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->table(), target);
  }

  // repeated .TsCell key = 2;
  for (int i = 0; i < this->key_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->key(i), target);
  }

  // optional bytes vclock = 3;
  if (has_vclock()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->vclock(), target);
  }

  // optional uint32 timeout = 4;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->timeout(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TsDelReq)
  return target;
}

int TsDelReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes table = 1;
    if (has_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->table());
    }

    // optional bytes vclock = 3;
    if (has_vclock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->vclock());
    }

    // optional uint32 timeout = 4;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeout());
    }

  }
  // repeated .TsCell key = 2;
  total_size += 1 * this->key_size();
  for (int i = 0; i < this->key_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->key(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TsDelReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TsDelReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TsDelReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TsDelReq::MergeFrom(const TsDelReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  key_.MergeFrom(from.key_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_vclock()) {
      set_vclock(from.vclock());
    }
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TsDelReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TsDelReq::CopyFrom(const TsDelReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TsDelReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TsDelReq::Swap(TsDelReq* other) {
  if (other != this) {
    std::swap(table_, other->table_);
    key_.Swap(&other->key_);
    std::swap(vclock_, other->vclock_);
    std::swap(timeout_, other->timeout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TsDelReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TsDelReq_descriptor_;
  metadata.reflection = TsDelReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

TsDelResp::TsDelResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TsDelResp)
}

void TsDelResp::InitAsDefaultInstance() {
}

TsDelResp::TsDelResp(const TsDelResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TsDelResp)
}

void TsDelResp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TsDelResp::~TsDelResp() {
  // @@protoc_insertion_point(destructor:TsDelResp)
  SharedDtor();
}

void TsDelResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TsDelResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TsDelResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TsDelResp_descriptor_;
}

const TsDelResp& TsDelResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_5fts_2eproto();
  return *default_instance_;
}

TsDelResp* TsDelResp::default_instance_ = NULL;

TsDelResp* TsDelResp::New() const {
  return new TsDelResp;
}

void TsDelResp::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TsDelResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TsDelResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:TsDelResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TsDelResp)
  return false;
#undef DO_
}

void TsDelResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TsDelResp)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TsDelResp)
}

::google::protobuf::uint8* TsDelResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TsDelResp)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TsDelResp)
  return target;
}

int TsDelResp::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TsDelResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TsDelResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TsDelResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TsDelResp::MergeFrom(const TsDelResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TsDelResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TsDelResp::CopyFrom(const TsDelResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TsDelResp::IsInitialized() const {

  return true;
}

void TsDelResp::Swap(TsDelResp* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TsDelResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TsDelResp_descriptor_;
  metadata.reflection = TsDelResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TsInterpolation::kBaseFieldNumber;
const int TsInterpolation::kInterpolationsFieldNumber;
#endif  // !_MSC_VER

TsInterpolation::TsInterpolation()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TsInterpolation)
}

void TsInterpolation::InitAsDefaultInstance() {
}

TsInterpolation::TsInterpolation(const TsInterpolation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TsInterpolation)
}

void TsInterpolation::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  base_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TsInterpolation::~TsInterpolation() {
  // @@protoc_insertion_point(destructor:TsInterpolation)
  SharedDtor();
}

void TsInterpolation::SharedDtor() {
  if (base_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete base_;
  }
  if (this != default_instance_) {
  }
}

void TsInterpolation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TsInterpolation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TsInterpolation_descriptor_;
}

const TsInterpolation& TsInterpolation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_5fts_2eproto();
  return *default_instance_;
}

TsInterpolation* TsInterpolation::default_instance_ = NULL;

TsInterpolation* TsInterpolation::New() const {
  return new TsInterpolation;
}

void TsInterpolation::Clear() {
  if (has_base()) {
    if (base_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      base_->clear();
    }
  }
  interpolations_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TsInterpolation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TsInterpolation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes base = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_interpolations;
        break;
      }

      // repeated .RpbPair interpolations = 2;
      case 2: {
        if (tag == 18) {
         parse_interpolations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_interpolations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_interpolations;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TsInterpolation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TsInterpolation)
  return false;
#undef DO_
}

void TsInterpolation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TsInterpolation)
  // required bytes base = 1;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->base(), output);
  }

  // repeated .RpbPair interpolations = 2;
  for (int i = 0; i < this->interpolations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->interpolations(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TsInterpolation)
}

::google::protobuf::uint8* TsInterpolation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TsInterpolation)
  // required bytes base = 1;
  if (has_base()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->base(), target);
  }

  // repeated .RpbPair interpolations = 2;
  for (int i = 0; i < this->interpolations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->interpolations(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TsInterpolation)
  return target;
}

int TsInterpolation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->base());
    }

  }
  // repeated .RpbPair interpolations = 2;
  total_size += 1 * this->interpolations_size();
  for (int i = 0; i < this->interpolations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->interpolations(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TsInterpolation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TsInterpolation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TsInterpolation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TsInterpolation::MergeFrom(const TsInterpolation& from) {
  GOOGLE_CHECK_NE(&from, this);
  interpolations_.MergeFrom(from.interpolations_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      set_base(from.base());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TsInterpolation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TsInterpolation::CopyFrom(const TsInterpolation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TsInterpolation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->interpolations())) return false;
  return true;
}

void TsInterpolation::Swap(TsInterpolation* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    interpolations_.Swap(&other->interpolations_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TsInterpolation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TsInterpolation_descriptor_;
  metadata.reflection = TsInterpolation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TsColumnDescription::kNameFieldNumber;
const int TsColumnDescription::kTypeFieldNumber;
#endif  // !_MSC_VER

TsColumnDescription::TsColumnDescription()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TsColumnDescription)
}

void TsColumnDescription::InitAsDefaultInstance() {
}

TsColumnDescription::TsColumnDescription(const TsColumnDescription& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TsColumnDescription)
}

void TsColumnDescription::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TsColumnDescription::~TsColumnDescription() {
  // @@protoc_insertion_point(destructor:TsColumnDescription)
  SharedDtor();
}

void TsColumnDescription::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void TsColumnDescription::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TsColumnDescription::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TsColumnDescription_descriptor_;
}

const TsColumnDescription& TsColumnDescription::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_5fts_2eproto();
  return *default_instance_;
}

TsColumnDescription* TsColumnDescription::default_instance_ = NULL;

TsColumnDescription* TsColumnDescription::New() const {
  return new TsColumnDescription;
}

void TsColumnDescription::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TsColumnDescription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TsColumnDescription)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .TsColumnType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TsColumnType_IsValid(value)) {
            set_type(static_cast< ::TsColumnType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TsColumnDescription)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TsColumnDescription)
  return false;
#undef DO_
}

void TsColumnDescription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TsColumnDescription)
  // required bytes name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->name(), output);
  }

  // required .TsColumnType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TsColumnDescription)
}

::google::protobuf::uint8* TsColumnDescription::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TsColumnDescription)
  // required bytes name = 1;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  // required .TsColumnType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TsColumnDescription)
  return target;
}

int TsColumnDescription::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // required .TsColumnType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TsColumnDescription::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TsColumnDescription* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TsColumnDescription*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TsColumnDescription::MergeFrom(const TsColumnDescription& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TsColumnDescription::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TsColumnDescription::CopyFrom(const TsColumnDescription& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TsColumnDescription::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TsColumnDescription::Swap(TsColumnDescription* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TsColumnDescription::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TsColumnDescription_descriptor_;
  metadata.reflection = TsColumnDescription_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TsRow::kCellsFieldNumber;
#endif  // !_MSC_VER

TsRow::TsRow()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TsRow)
}

void TsRow::InitAsDefaultInstance() {
}

TsRow::TsRow(const TsRow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TsRow)
}

void TsRow::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TsRow::~TsRow() {
  // @@protoc_insertion_point(destructor:TsRow)
  SharedDtor();
}

void TsRow::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TsRow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TsRow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TsRow_descriptor_;
}

const TsRow& TsRow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_5fts_2eproto();
  return *default_instance_;
}

TsRow* TsRow::default_instance_ = NULL;

TsRow* TsRow::New() const {
  return new TsRow;
}

void TsRow::Clear() {
  cells_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TsRow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TsRow)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TsCell cells = 1;
      case 1: {
        if (tag == 10) {
         parse_cells:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cells()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_cells;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TsRow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TsRow)
  return false;
#undef DO_
}

void TsRow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TsRow)
  // repeated .TsCell cells = 1;
  for (int i = 0; i < this->cells_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cells(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TsRow)
}

::google::protobuf::uint8* TsRow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TsRow)
  // repeated .TsCell cells = 1;
  for (int i = 0; i < this->cells_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cells(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TsRow)
  return target;
}

int TsRow::ByteSize() const {
  int total_size = 0;

  // repeated .TsCell cells = 1;
  total_size += 1 * this->cells_size();
  for (int i = 0; i < this->cells_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cells(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TsRow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TsRow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TsRow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TsRow::MergeFrom(const TsRow& from) {
  GOOGLE_CHECK_NE(&from, this);
  cells_.MergeFrom(from.cells_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TsRow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TsRow::CopyFrom(const TsRow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TsRow::IsInitialized() const {

  return true;
}

void TsRow::Swap(TsRow* other) {
  if (other != this) {
    cells_.Swap(&other->cells_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TsRow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TsRow_descriptor_;
  metadata.reflection = TsRow_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TsCell::kVarcharValueFieldNumber;
const int TsCell::kSint64ValueFieldNumber;
const int TsCell::kTimestampValueFieldNumber;
const int TsCell::kBooleanValueFieldNumber;
const int TsCell::kDoubleValueFieldNumber;
#endif  // !_MSC_VER

TsCell::TsCell()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TsCell)
}

void TsCell::InitAsDefaultInstance() {
}

TsCell::TsCell(const TsCell& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TsCell)
}

void TsCell::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  varchar_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sint64_value_ = GOOGLE_LONGLONG(0);
  timestamp_value_ = GOOGLE_LONGLONG(0);
  boolean_value_ = false;
  double_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TsCell::~TsCell() {
  // @@protoc_insertion_point(destructor:TsCell)
  SharedDtor();
}

void TsCell::SharedDtor() {
  if (varchar_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete varchar_value_;
  }
  if (this != default_instance_) {
  }
}

void TsCell::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TsCell::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TsCell_descriptor_;
}

const TsCell& TsCell::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_5fts_2eproto();
  return *default_instance_;
}

TsCell* TsCell::default_instance_ = NULL;

TsCell* TsCell::New() const {
  return new TsCell;
}

void TsCell::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TsCell*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(sint64_value_, boolean_value_);
    if (has_varchar_value()) {
      if (varchar_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        varchar_value_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TsCell::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TsCell)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes varchar_value = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_varchar_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sint64_value;
        break;
      }

      // optional sint64 sint64_value = 2;
      case 2: {
        if (tag == 16) {
         parse_sint64_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &sint64_value_)));
          set_has_sint64_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_timestamp_value;
        break;
      }

      // optional sint64 timestamp_value = 3;
      case 3: {
        if (tag == 24) {
         parse_timestamp_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &timestamp_value_)));
          set_has_timestamp_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_boolean_value;
        break;
      }

      // optional bool boolean_value = 4;
      case 4: {
        if (tag == 32) {
         parse_boolean_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &boolean_value_)));
          set_has_boolean_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_double_value;
        break;
      }

      // optional double double_value = 5;
      case 5: {
        if (tag == 41) {
         parse_double_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &double_value_)));
          set_has_double_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TsCell)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TsCell)
  return false;
#undef DO_
}

void TsCell::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TsCell)
  // optional bytes varchar_value = 1;
  if (has_varchar_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->varchar_value(), output);
  }

  // optional sint64 sint64_value = 2;
  if (has_sint64_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->sint64_value(), output);
  }

  // optional sint64 timestamp_value = 3;
  if (has_timestamp_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(3, this->timestamp_value(), output);
  }

  // optional bool boolean_value = 4;
  if (has_boolean_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->boolean_value(), output);
  }

  // optional double double_value = 5;
  if (has_double_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->double_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TsCell)
}

::google::protobuf::uint8* TsCell::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TsCell)
  // optional bytes varchar_value = 1;
  if (has_varchar_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->varchar_value(), target);
  }

  // optional sint64 sint64_value = 2;
  if (has_sint64_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->sint64_value(), target);
  }

  // optional sint64 timestamp_value = 3;
  if (has_timestamp_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(3, this->timestamp_value(), target);
  }

  // optional bool boolean_value = 4;
  if (has_boolean_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->boolean_value(), target);
  }

  // optional double double_value = 5;
  if (has_double_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->double_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TsCell)
  return target;
}

int TsCell::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes varchar_value = 1;
    if (has_varchar_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->varchar_value());
    }

    // optional sint64 sint64_value = 2;
    if (has_sint64_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->sint64_value());
    }

    // optional sint64 timestamp_value = 3;
    if (has_timestamp_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->timestamp_value());
    }

    // optional bool boolean_value = 4;
    if (has_boolean_value()) {
      total_size += 1 + 1;
    }

    // optional double double_value = 5;
    if (has_double_value()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TsCell::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TsCell* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TsCell*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TsCell::MergeFrom(const TsCell& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_varchar_value()) {
      set_varchar_value(from.varchar_value());
    }
    if (from.has_sint64_value()) {
      set_sint64_value(from.sint64_value());
    }
    if (from.has_timestamp_value()) {
      set_timestamp_value(from.timestamp_value());
    }
    if (from.has_boolean_value()) {
      set_boolean_value(from.boolean_value());
    }
    if (from.has_double_value()) {
      set_double_value(from.double_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TsCell::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TsCell::CopyFrom(const TsCell& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TsCell::IsInitialized() const {

  return true;
}

void TsCell::Swap(TsCell* other) {
  if (other != this) {
    std::swap(varchar_value_, other->varchar_value_);
    std::swap(sint64_value_, other->sint64_value_);
    std::swap(timestamp_value_, other->timestamp_value_);
    std::swap(boolean_value_, other->boolean_value_);
    std::swap(double_value_, other->double_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TsCell::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TsCell_descriptor_;
  metadata.reflection = TsCell_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TsListKeysReq::kTableFieldNumber;
const int TsListKeysReq::kTimeoutFieldNumber;
#endif  // !_MSC_VER

TsListKeysReq::TsListKeysReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TsListKeysReq)
}

void TsListKeysReq::InitAsDefaultInstance() {
}

TsListKeysReq::TsListKeysReq(const TsListKeysReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TsListKeysReq)
}

void TsListKeysReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  table_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timeout_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TsListKeysReq::~TsListKeysReq() {
  // @@protoc_insertion_point(destructor:TsListKeysReq)
  SharedDtor();
}

void TsListKeysReq::SharedDtor() {
  if (table_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete table_;
  }
  if (this != default_instance_) {
  }
}

void TsListKeysReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TsListKeysReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TsListKeysReq_descriptor_;
}

const TsListKeysReq& TsListKeysReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_5fts_2eproto();
  return *default_instance_;
}

TsListKeysReq* TsListKeysReq::default_instance_ = NULL;

TsListKeysReq* TsListKeysReq::New() const {
  return new TsListKeysReq;
}

void TsListKeysReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_table()) {
      if (table_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        table_->clear();
      }
    }
    timeout_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TsListKeysReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TsListKeysReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes table = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_table()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_timeout;
        break;
      }

      // optional uint32 timeout = 2;
      case 2: {
        if (tag == 16) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TsListKeysReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TsListKeysReq)
  return false;
#undef DO_
}

void TsListKeysReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TsListKeysReq)
  // required bytes table = 1;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->table(), output);
  }

  // optional uint32 timeout = 2;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->timeout(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TsListKeysReq)
}

::google::protobuf::uint8* TsListKeysReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TsListKeysReq)
  // required bytes table = 1;
  if (has_table()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->table(), target);
  }

  // optional uint32 timeout = 2;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->timeout(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TsListKeysReq)
  return target;
}

int TsListKeysReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes table = 1;
    if (has_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->table());
    }

    // optional uint32 timeout = 2;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeout());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TsListKeysReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TsListKeysReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TsListKeysReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TsListKeysReq::MergeFrom(const TsListKeysReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TsListKeysReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TsListKeysReq::CopyFrom(const TsListKeysReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TsListKeysReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TsListKeysReq::Swap(TsListKeysReq* other) {
  if (other != this) {
    std::swap(table_, other->table_);
    std::swap(timeout_, other->timeout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TsListKeysReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TsListKeysReq_descriptor_;
  metadata.reflection = TsListKeysReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TsListKeysResp::kKeysFieldNumber;
const int TsListKeysResp::kDoneFieldNumber;
#endif  // !_MSC_VER

TsListKeysResp::TsListKeysResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TsListKeysResp)
}

void TsListKeysResp::InitAsDefaultInstance() {
}

TsListKeysResp::TsListKeysResp(const TsListKeysResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TsListKeysResp)
}

void TsListKeysResp::SharedCtor() {
  _cached_size_ = 0;
  done_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TsListKeysResp::~TsListKeysResp() {
  // @@protoc_insertion_point(destructor:TsListKeysResp)
  SharedDtor();
}

void TsListKeysResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TsListKeysResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TsListKeysResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TsListKeysResp_descriptor_;
}

const TsListKeysResp& TsListKeysResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_5fts_2eproto();
  return *default_instance_;
}

TsListKeysResp* TsListKeysResp::default_instance_ = NULL;

TsListKeysResp* TsListKeysResp::New() const {
  return new TsListKeysResp;
}

void TsListKeysResp::Clear() {
  done_ = false;
  keys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TsListKeysResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TsListKeysResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TsRow keys = 1;
      case 1: {
        if (tag == 10) {
         parse_keys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_keys()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_keys;
        if (input->ExpectTag(16)) goto parse_done;
        break;
      }

      // optional bool done = 2;
      case 2: {
        if (tag == 16) {
         parse_done:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &done_)));
          set_has_done();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TsListKeysResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TsListKeysResp)
  return false;
#undef DO_
}

void TsListKeysResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TsListKeysResp)
  // repeated .TsRow keys = 1;
  for (int i = 0; i < this->keys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->keys(i), output);
  }

  // optional bool done = 2;
  if (has_done()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->done(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TsListKeysResp)
}

::google::protobuf::uint8* TsListKeysResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TsListKeysResp)
  // repeated .TsRow keys = 1;
  for (int i = 0; i < this->keys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->keys(i), target);
  }

  // optional bool done = 2;
  if (has_done()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->done(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TsListKeysResp)
  return target;
}

int TsListKeysResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bool done = 2;
    if (has_done()) {
      total_size += 1 + 1;
    }

  }
  // repeated .TsRow keys = 1;
  total_size += 1 * this->keys_size();
  for (int i = 0; i < this->keys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->keys(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TsListKeysResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TsListKeysResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TsListKeysResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TsListKeysResp::MergeFrom(const TsListKeysResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  keys_.MergeFrom(from.keys_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_done()) {
      set_done(from.done());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TsListKeysResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TsListKeysResp::CopyFrom(const TsListKeysResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TsListKeysResp::IsInitialized() const {

  return true;
}

void TsListKeysResp::Swap(TsListKeysResp* other) {
  if (other != this) {
    keys_.Swap(&other->keys_);
    std::swap(done_, other->done_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TsListKeysResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TsListKeysResp_descriptor_;
  metadata.reflection = TsListKeysResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TsCoverageReq::kQueryFieldNumber;
const int TsCoverageReq::kTableFieldNumber;
const int TsCoverageReq::kReplaceCoverFieldNumber;
const int TsCoverageReq::kUnavailableCoverFieldNumber;
#endif  // !_MSC_VER

TsCoverageReq::TsCoverageReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TsCoverageReq)
}

void TsCoverageReq::InitAsDefaultInstance() {
  query_ = const_cast< ::TsInterpolation*>(&::TsInterpolation::default_instance());
}

TsCoverageReq::TsCoverageReq(const TsCoverageReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TsCoverageReq)
}

void TsCoverageReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  query_ = NULL;
  table_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  replace_cover_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TsCoverageReq::~TsCoverageReq() {
  // @@protoc_insertion_point(destructor:TsCoverageReq)
  SharedDtor();
}

void TsCoverageReq::SharedDtor() {
  if (table_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete table_;
  }
  if (replace_cover_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete replace_cover_;
  }
  if (this != default_instance_) {
    delete query_;
  }
}

void TsCoverageReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TsCoverageReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TsCoverageReq_descriptor_;
}

const TsCoverageReq& TsCoverageReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_5fts_2eproto();
  return *default_instance_;
}

TsCoverageReq* TsCoverageReq::default_instance_ = NULL;

TsCoverageReq* TsCoverageReq::New() const {
  return new TsCoverageReq;
}

void TsCoverageReq::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_query()) {
      if (query_ != NULL) query_->::TsInterpolation::Clear();
    }
    if (has_table()) {
      if (table_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        table_->clear();
      }
    }
    if (has_replace_cover()) {
      if (replace_cover_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        replace_cover_->clear();
      }
    }
  }
  unavailable_cover_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TsCoverageReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TsCoverageReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TsInterpolation query = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_query()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_table;
        break;
      }

      // required bytes table = 2;
      case 2: {
        if (tag == 18) {
         parse_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_table()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_replace_cover;
        break;
      }

      // optional bytes replace_cover = 3;
      case 3: {
        if (tag == 26) {
         parse_replace_cover:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_replace_cover()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_unavailable_cover;
        break;
      }

      // repeated bytes unavailable_cover = 4;
      case 4: {
        if (tag == 34) {
         parse_unavailable_cover:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_unavailable_cover()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_unavailable_cover;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TsCoverageReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TsCoverageReq)
  return false;
#undef DO_
}

void TsCoverageReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TsCoverageReq)
  // optional .TsInterpolation query = 1;
  if (has_query()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->query(), output);
  }

  // required bytes table = 2;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->table(), output);
  }

  // optional bytes replace_cover = 3;
  if (has_replace_cover()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->replace_cover(), output);
  }

  // repeated bytes unavailable_cover = 4;
  for (int i = 0; i < this->unavailable_cover_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->unavailable_cover(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TsCoverageReq)
}

::google::protobuf::uint8* TsCoverageReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TsCoverageReq)
  // optional .TsInterpolation query = 1;
  if (has_query()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->query(), target);
  }

  // required bytes table = 2;
  if (has_table()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->table(), target);
  }

  // optional bytes replace_cover = 3;
  if (has_replace_cover()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->replace_cover(), target);
  }

  // repeated bytes unavailable_cover = 4;
  for (int i = 0; i < this->unavailable_cover_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(4, this->unavailable_cover(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TsCoverageReq)
  return target;
}

int TsCoverageReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TsInterpolation query = 1;
    if (has_query()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->query());
    }

    // required bytes table = 2;
    if (has_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->table());
    }

    // optional bytes replace_cover = 3;
    if (has_replace_cover()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->replace_cover());
    }

  }
  // repeated bytes unavailable_cover = 4;
  total_size += 1 * this->unavailable_cover_size();
  for (int i = 0; i < this->unavailable_cover_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->unavailable_cover(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TsCoverageReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TsCoverageReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TsCoverageReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TsCoverageReq::MergeFrom(const TsCoverageReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  unavailable_cover_.MergeFrom(from.unavailable_cover_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_query()) {
      mutable_query()->::TsInterpolation::MergeFrom(from.query());
    }
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_replace_cover()) {
      set_replace_cover(from.replace_cover());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TsCoverageReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TsCoverageReq::CopyFrom(const TsCoverageReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TsCoverageReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (has_query()) {
    if (!this->query().IsInitialized()) return false;
  }
  return true;
}

void TsCoverageReq::Swap(TsCoverageReq* other) {
  if (other != this) {
    std::swap(query_, other->query_);
    std::swap(table_, other->table_);
    std::swap(replace_cover_, other->replace_cover_);
    unavailable_cover_.Swap(&other->unavailable_cover_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TsCoverageReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TsCoverageReq_descriptor_;
  metadata.reflection = TsCoverageReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TsCoverageResp::kEntriesFieldNumber;
#endif  // !_MSC_VER

TsCoverageResp::TsCoverageResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TsCoverageResp)
}

void TsCoverageResp::InitAsDefaultInstance() {
}

TsCoverageResp::TsCoverageResp(const TsCoverageResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TsCoverageResp)
}

void TsCoverageResp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TsCoverageResp::~TsCoverageResp() {
  // @@protoc_insertion_point(destructor:TsCoverageResp)
  SharedDtor();
}

void TsCoverageResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TsCoverageResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TsCoverageResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TsCoverageResp_descriptor_;
}

const TsCoverageResp& TsCoverageResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_5fts_2eproto();
  return *default_instance_;
}

TsCoverageResp* TsCoverageResp::default_instance_ = NULL;

TsCoverageResp* TsCoverageResp::New() const {
  return new TsCoverageResp;
}

void TsCoverageResp::Clear() {
  entries_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TsCoverageResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TsCoverageResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TsCoverageEntry entries = 1;
      case 1: {
        if (tag == 10) {
         parse_entries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_entries;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TsCoverageResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TsCoverageResp)
  return false;
#undef DO_
}

void TsCoverageResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TsCoverageResp)
  // repeated .TsCoverageEntry entries = 1;
  for (int i = 0; i < this->entries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->entries(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TsCoverageResp)
}

::google::protobuf::uint8* TsCoverageResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TsCoverageResp)
  // repeated .TsCoverageEntry entries = 1;
  for (int i = 0; i < this->entries_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->entries(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TsCoverageResp)
  return target;
}

int TsCoverageResp::ByteSize() const {
  int total_size = 0;

  // repeated .TsCoverageEntry entries = 1;
  total_size += 1 * this->entries_size();
  for (int i = 0; i < this->entries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entries(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TsCoverageResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TsCoverageResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TsCoverageResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TsCoverageResp::MergeFrom(const TsCoverageResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  entries_.MergeFrom(from.entries_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TsCoverageResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TsCoverageResp::CopyFrom(const TsCoverageResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TsCoverageResp::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->entries())) return false;
  return true;
}

void TsCoverageResp::Swap(TsCoverageResp* other) {
  if (other != this) {
    entries_.Swap(&other->entries_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TsCoverageResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TsCoverageResp_descriptor_;
  metadata.reflection = TsCoverageResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TsCoverageEntry::kIpFieldNumber;
const int TsCoverageEntry::kPortFieldNumber;
const int TsCoverageEntry::kCoverContextFieldNumber;
const int TsCoverageEntry::kRangeFieldNumber;
#endif  // !_MSC_VER

TsCoverageEntry::TsCoverageEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TsCoverageEntry)
}

void TsCoverageEntry::InitAsDefaultInstance() {
  range_ = const_cast< ::TsRange*>(&::TsRange::default_instance());
}

TsCoverageEntry::TsCoverageEntry(const TsCoverageEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TsCoverageEntry)
}

void TsCoverageEntry::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
  cover_context_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  range_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TsCoverageEntry::~TsCoverageEntry() {
  // @@protoc_insertion_point(destructor:TsCoverageEntry)
  SharedDtor();
}

void TsCoverageEntry::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (cover_context_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cover_context_;
  }
  if (this != default_instance_) {
    delete range_;
  }
}

void TsCoverageEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TsCoverageEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TsCoverageEntry_descriptor_;
}

const TsCoverageEntry& TsCoverageEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_5fts_2eproto();
  return *default_instance_;
}

TsCoverageEntry* TsCoverageEntry::default_instance_ = NULL;

TsCoverageEntry* TsCoverageEntry::New() const {
  return new TsCoverageEntry;
}

void TsCoverageEntry::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
    port_ = 0u;
    if (has_cover_context()) {
      if (cover_context_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cover_context_->clear();
      }
    }
    if (has_range()) {
      if (range_ != NULL) range_->::TsRange::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TsCoverageEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TsCoverageEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes ip = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ip()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // required uint32 port = 2;
      case 2: {
        if (tag == 16) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cover_context;
        break;
      }

      // required bytes cover_context = 3;
      case 3: {
        if (tag == 26) {
         parse_cover_context:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cover_context()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_range;
        break;
      }

      // optional .TsRange range = 4;
      case 4: {
        if (tag == 34) {
         parse_range:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_range()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TsCoverageEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TsCoverageEntry)
  return false;
#undef DO_
}

void TsCoverageEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TsCoverageEntry)
  // required bytes ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->ip(), output);
  }

  // required uint32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }

  // required bytes cover_context = 3;
  if (has_cover_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->cover_context(), output);
  }

  // optional .TsRange range = 4;
  if (has_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->range(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TsCoverageEntry)
}

::google::protobuf::uint8* TsCoverageEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TsCoverageEntry)
  // required bytes ip = 1;
  if (has_ip()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->ip(), target);
  }

  // required uint32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->port(), target);
  }

  // required bytes cover_context = 3;
  if (has_cover_context()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->cover_context(), target);
  }

  // optional .TsRange range = 4;
  if (has_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->range(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TsCoverageEntry)
  return target;
}

int TsCoverageEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ip());
    }

    // required uint32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

    // required bytes cover_context = 3;
    if (has_cover_context()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cover_context());
    }

    // optional .TsRange range = 4;
    if (has_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->range());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TsCoverageEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TsCoverageEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TsCoverageEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TsCoverageEntry::MergeFrom(const TsCoverageEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_cover_context()) {
      set_cover_context(from.cover_context());
    }
    if (from.has_range()) {
      mutable_range()->::TsRange::MergeFrom(from.range());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TsCoverageEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TsCoverageEntry::CopyFrom(const TsCoverageEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TsCoverageEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_range()) {
    if (!this->range().IsInitialized()) return false;
  }
  return true;
}

void TsCoverageEntry::Swap(TsCoverageEntry* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(cover_context_, other->cover_context_);
    std::swap(range_, other->range_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TsCoverageEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TsCoverageEntry_descriptor_;
  metadata.reflection = TsCoverageEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TsRange::kFieldNameFieldNumber;
const int TsRange::kLowerBoundFieldNumber;
const int TsRange::kLowerBoundInclusiveFieldNumber;
const int TsRange::kUpperBoundFieldNumber;
const int TsRange::kUpperBoundInclusiveFieldNumber;
const int TsRange::kDescFieldNumber;
#endif  // !_MSC_VER

TsRange::TsRange()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TsRange)
}

void TsRange::InitAsDefaultInstance() {
}

TsRange::TsRange(const TsRange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TsRange)
}

void TsRange::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  field_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lower_bound_ = GOOGLE_LONGLONG(0);
  lower_bound_inclusive_ = false;
  upper_bound_ = GOOGLE_LONGLONG(0);
  upper_bound_inclusive_ = false;
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TsRange::~TsRange() {
  // @@protoc_insertion_point(destructor:TsRange)
  SharedDtor();
}

void TsRange::SharedDtor() {
  if (field_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete field_name_;
  }
  if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete desc_;
  }
  if (this != default_instance_) {
  }
}

void TsRange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TsRange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TsRange_descriptor_;
}

const TsRange& TsRange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_5fts_2eproto();
  return *default_instance_;
}

TsRange* TsRange::default_instance_ = NULL;

TsRange* TsRange::New() const {
  return new TsRange;
}

void TsRange::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TsRange*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(lower_bound_, upper_bound_);
    ZR_(lower_bound_inclusive_, upper_bound_inclusive_);
    if (has_field_name()) {
      if (field_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        field_name_->clear();
      }
    }
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        desc_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TsRange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TsRange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes field_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_field_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_lower_bound;
        break;
      }

      // required sint64 lower_bound = 2;
      case 2: {
        if (tag == 16) {
         parse_lower_bound:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &lower_bound_)));
          set_has_lower_bound();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_lower_bound_inclusive;
        break;
      }

      // required bool lower_bound_inclusive = 3;
      case 3: {
        if (tag == 24) {
         parse_lower_bound_inclusive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lower_bound_inclusive_)));
          set_has_lower_bound_inclusive();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_upper_bound;
        break;
      }

      // required sint64 upper_bound = 4;
      case 4: {
        if (tag == 32) {
         parse_upper_bound:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &upper_bound_)));
          set_has_upper_bound();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_upper_bound_inclusive;
        break;
      }

      // required bool upper_bound_inclusive = 5;
      case 5: {
        if (tag == 40) {
         parse_upper_bound_inclusive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &upper_bound_inclusive_)));
          set_has_upper_bound_inclusive();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_desc;
        break;
      }

      // required bytes desc = 6;
      case 6: {
        if (tag == 50) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_desc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TsRange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TsRange)
  return false;
#undef DO_
}

void TsRange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TsRange)
  // required bytes field_name = 1;
  if (has_field_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->field_name(), output);
  }

  // required sint64 lower_bound = 2;
  if (has_lower_bound()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->lower_bound(), output);
  }

  // required bool lower_bound_inclusive = 3;
  if (has_lower_bound_inclusive()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->lower_bound_inclusive(), output);
  }

  // required sint64 upper_bound = 4;
  if (has_upper_bound()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(4, this->upper_bound(), output);
  }

  // required bool upper_bound_inclusive = 5;
  if (has_upper_bound_inclusive()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->upper_bound_inclusive(), output);
  }

  // required bytes desc = 6;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->desc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TsRange)
}

::google::protobuf::uint8* TsRange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TsRange)
  // required bytes field_name = 1;
  if (has_field_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->field_name(), target);
  }

  // required sint64 lower_bound = 2;
  if (has_lower_bound()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->lower_bound(), target);
  }

  // required bool lower_bound_inclusive = 3;
  if (has_lower_bound_inclusive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->lower_bound_inclusive(), target);
  }

  // required sint64 upper_bound = 4;
  if (has_upper_bound()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(4, this->upper_bound(), target);
  }

  // required bool upper_bound_inclusive = 5;
  if (has_upper_bound_inclusive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->upper_bound_inclusive(), target);
  }

  // required bytes desc = 6;
  if (has_desc()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->desc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TsRange)
  return target;
}

int TsRange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes field_name = 1;
    if (has_field_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->field_name());
    }

    // required sint64 lower_bound = 2;
    if (has_lower_bound()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->lower_bound());
    }

    // required bool lower_bound_inclusive = 3;
    if (has_lower_bound_inclusive()) {
      total_size += 1 + 1;
    }

    // required sint64 upper_bound = 4;
    if (has_upper_bound()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->upper_bound());
    }

    // required bool upper_bound_inclusive = 5;
    if (has_upper_bound_inclusive()) {
      total_size += 1 + 1;
    }

    // required bytes desc = 6;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->desc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TsRange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TsRange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TsRange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TsRange::MergeFrom(const TsRange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_field_name()) {
      set_field_name(from.field_name());
    }
    if (from.has_lower_bound()) {
      set_lower_bound(from.lower_bound());
    }
    if (from.has_lower_bound_inclusive()) {
      set_lower_bound_inclusive(from.lower_bound_inclusive());
    }
    if (from.has_upper_bound()) {
      set_upper_bound(from.upper_bound());
    }
    if (from.has_upper_bound_inclusive()) {
      set_upper_bound_inclusive(from.upper_bound_inclusive());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TsRange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TsRange::CopyFrom(const TsRange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TsRange::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void TsRange::Swap(TsRange* other) {
  if (other != this) {
    std::swap(field_name_, other->field_name_);
    std::swap(lower_bound_, other->lower_bound_);
    std::swap(lower_bound_inclusive_, other->lower_bound_inclusive_);
    std::swap(upper_bound_, other->upper_bound_);
    std::swap(upper_bound_inclusive_, other->upper_bound_inclusive_);
    std::swap(desc_, other->desc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TsRange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TsRange_descriptor_;
  metadata.reflection = TsRange_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
