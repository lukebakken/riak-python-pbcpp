// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: riak.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "riak.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* RpbErrorResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbErrorResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbGetServerInfoResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbGetServerInfoResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbPair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbPair_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbGetBucketReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbGetBucketReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbGetBucketResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbGetBucketResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbSetBucketReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbSetBucketReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbResetBucketReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbResetBucketReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbGetBucketTypeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbGetBucketTypeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbSetBucketTypeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbSetBucketTypeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbModFun_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbModFun_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbCommitHook_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbCommitHook_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbBucketProps_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbBucketProps_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RpbBucketProps_RpbReplMode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* RpbAuthReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbAuthReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbToggleEncodingReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbToggleEncodingReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbToggleEncodingResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbToggleEncodingResp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_riak_2eproto() {
  protobuf_AddDesc_riak_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "riak.proto");
  GOOGLE_CHECK(file != NULL);
  RpbErrorResp_descriptor_ = file->message_type(0);
  static const int RpbErrorResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbErrorResp, errmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbErrorResp, errcode_),
  };
  RpbErrorResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbErrorResp_descriptor_,
      RpbErrorResp::default_instance_,
      RpbErrorResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbErrorResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbErrorResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbErrorResp));
  RpbGetServerInfoResp_descriptor_ = file->message_type(1);
  static const int RpbGetServerInfoResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetServerInfoResp, node_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetServerInfoResp, server_version_),
  };
  RpbGetServerInfoResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbGetServerInfoResp_descriptor_,
      RpbGetServerInfoResp::default_instance_,
      RpbGetServerInfoResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetServerInfoResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetServerInfoResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbGetServerInfoResp));
  RpbPair_descriptor_ = file->message_type(2);
  static const int RpbPair_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbPair, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbPair, value_),
  };
  RpbPair_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbPair_descriptor_,
      RpbPair::default_instance_,
      RpbPair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbPair, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbPair, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbPair));
  RpbGetBucketReq_descriptor_ = file->message_type(3);
  static const int RpbGetBucketReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetBucketReq, bucket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetBucketReq, type_),
  };
  RpbGetBucketReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbGetBucketReq_descriptor_,
      RpbGetBucketReq::default_instance_,
      RpbGetBucketReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetBucketReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetBucketReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbGetBucketReq));
  RpbGetBucketResp_descriptor_ = file->message_type(4);
  static const int RpbGetBucketResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetBucketResp, props_),
  };
  RpbGetBucketResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbGetBucketResp_descriptor_,
      RpbGetBucketResp::default_instance_,
      RpbGetBucketResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetBucketResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetBucketResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbGetBucketResp));
  RpbSetBucketReq_descriptor_ = file->message_type(5);
  static const int RpbSetBucketReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbSetBucketReq, bucket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbSetBucketReq, props_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbSetBucketReq, type_),
  };
  RpbSetBucketReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbSetBucketReq_descriptor_,
      RpbSetBucketReq::default_instance_,
      RpbSetBucketReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbSetBucketReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbSetBucketReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbSetBucketReq));
  RpbResetBucketReq_descriptor_ = file->message_type(6);
  static const int RpbResetBucketReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbResetBucketReq, bucket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbResetBucketReq, type_),
  };
  RpbResetBucketReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbResetBucketReq_descriptor_,
      RpbResetBucketReq::default_instance_,
      RpbResetBucketReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbResetBucketReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbResetBucketReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbResetBucketReq));
  RpbGetBucketTypeReq_descriptor_ = file->message_type(7);
  static const int RpbGetBucketTypeReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetBucketTypeReq, type_),
  };
  RpbGetBucketTypeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbGetBucketTypeReq_descriptor_,
      RpbGetBucketTypeReq::default_instance_,
      RpbGetBucketTypeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetBucketTypeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetBucketTypeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbGetBucketTypeReq));
  RpbSetBucketTypeReq_descriptor_ = file->message_type(8);
  static const int RpbSetBucketTypeReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbSetBucketTypeReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbSetBucketTypeReq, props_),
  };
  RpbSetBucketTypeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbSetBucketTypeReq_descriptor_,
      RpbSetBucketTypeReq::default_instance_,
      RpbSetBucketTypeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbSetBucketTypeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbSetBucketTypeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbSetBucketTypeReq));
  RpbModFun_descriptor_ = file->message_type(9);
  static const int RpbModFun_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbModFun, module_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbModFun, function_),
  };
  RpbModFun_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbModFun_descriptor_,
      RpbModFun::default_instance_,
      RpbModFun_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbModFun, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbModFun, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbModFun));
  RpbCommitHook_descriptor_ = file->message_type(10);
  static const int RpbCommitHook_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCommitHook, modfun_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCommitHook, name_),
  };
  RpbCommitHook_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbCommitHook_descriptor_,
      RpbCommitHook::default_instance_,
      RpbCommitHook_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCommitHook, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCommitHook, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbCommitHook));
  RpbBucketProps_descriptor_ = file->message_type(11);
  static const int RpbBucketProps_offsets_[28] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbBucketProps, n_val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbBucketProps, allow_mult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbBucketProps, last_write_wins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbBucketProps, precommit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbBucketProps, has_precommit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbBucketProps, postcommit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbBucketProps, has_postcommit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbBucketProps, chash_keyfun_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbBucketProps, linkfun_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbBucketProps, old_vclock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbBucketProps, young_vclock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbBucketProps, big_vclock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbBucketProps, small_vclock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbBucketProps, pr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbBucketProps, r_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbBucketProps, w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbBucketProps, pw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbBucketProps, dw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbBucketProps, rw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbBucketProps, basic_quorum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbBucketProps, notfound_ok_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbBucketProps, backend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbBucketProps, search_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbBucketProps, repl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbBucketProps, search_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbBucketProps, datatype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbBucketProps, consistent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbBucketProps, write_once_),
  };
  RpbBucketProps_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbBucketProps_descriptor_,
      RpbBucketProps::default_instance_,
      RpbBucketProps_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbBucketProps, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbBucketProps, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbBucketProps));
  RpbBucketProps_RpbReplMode_descriptor_ = RpbBucketProps_descriptor_->enum_type(0);
  RpbAuthReq_descriptor_ = file->message_type(12);
  static const int RpbAuthReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbAuthReq, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbAuthReq, password_),
  };
  RpbAuthReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbAuthReq_descriptor_,
      RpbAuthReq::default_instance_,
      RpbAuthReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbAuthReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbAuthReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbAuthReq));
  RpbToggleEncodingReq_descriptor_ = file->message_type(13);
  static const int RpbToggleEncodingReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbToggleEncodingReq, use_native_),
  };
  RpbToggleEncodingReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbToggleEncodingReq_descriptor_,
      RpbToggleEncodingReq::default_instance_,
      RpbToggleEncodingReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbToggleEncodingReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbToggleEncodingReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbToggleEncodingReq));
  RpbToggleEncodingResp_descriptor_ = file->message_type(14);
  static const int RpbToggleEncodingResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbToggleEncodingResp, use_native_),
  };
  RpbToggleEncodingResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbToggleEncodingResp_descriptor_,
      RpbToggleEncodingResp::default_instance_,
      RpbToggleEncodingResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbToggleEncodingResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbToggleEncodingResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbToggleEncodingResp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_riak_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbErrorResp_descriptor_, &RpbErrorResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbGetServerInfoResp_descriptor_, &RpbGetServerInfoResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbPair_descriptor_, &RpbPair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbGetBucketReq_descriptor_, &RpbGetBucketReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbGetBucketResp_descriptor_, &RpbGetBucketResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbSetBucketReq_descriptor_, &RpbSetBucketReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbResetBucketReq_descriptor_, &RpbResetBucketReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbGetBucketTypeReq_descriptor_, &RpbGetBucketTypeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbSetBucketTypeReq_descriptor_, &RpbSetBucketTypeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbModFun_descriptor_, &RpbModFun::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbCommitHook_descriptor_, &RpbCommitHook::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbBucketProps_descriptor_, &RpbBucketProps::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbAuthReq_descriptor_, &RpbAuthReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbToggleEncodingReq_descriptor_, &RpbToggleEncodingReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbToggleEncodingResp_descriptor_, &RpbToggleEncodingResp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_riak_2eproto() {
  delete RpbErrorResp::default_instance_;
  delete RpbErrorResp_reflection_;
  delete RpbGetServerInfoResp::default_instance_;
  delete RpbGetServerInfoResp_reflection_;
  delete RpbPair::default_instance_;
  delete RpbPair_reflection_;
  delete RpbGetBucketReq::default_instance_;
  delete RpbGetBucketReq_reflection_;
  delete RpbGetBucketResp::default_instance_;
  delete RpbGetBucketResp_reflection_;
  delete RpbSetBucketReq::default_instance_;
  delete RpbSetBucketReq_reflection_;
  delete RpbResetBucketReq::default_instance_;
  delete RpbResetBucketReq_reflection_;
  delete RpbGetBucketTypeReq::default_instance_;
  delete RpbGetBucketTypeReq_reflection_;
  delete RpbSetBucketTypeReq::default_instance_;
  delete RpbSetBucketTypeReq_reflection_;
  delete RpbModFun::default_instance_;
  delete RpbModFun_reflection_;
  delete RpbCommitHook::default_instance_;
  delete RpbCommitHook_reflection_;
  delete RpbBucketProps::default_instance_;
  delete RpbBucketProps_reflection_;
  delete RpbAuthReq::default_instance_;
  delete RpbAuthReq_reflection_;
  delete RpbToggleEncodingReq::default_instance_;
  delete RpbToggleEncodingReq_reflection_;
  delete RpbToggleEncodingResp::default_instance_;
  delete RpbToggleEncodingResp_reflection_;
}

void protobuf_AddDesc_riak_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nriak.proto\"/\n\014RpbErrorResp\022\016\n\006errmsg\030\001"
    " \002(\014\022\017\n\007errcode\030\002 \002(\r\"<\n\024RpbGetServerInf"
    "oResp\022\014\n\004node\030\001 \001(\014\022\026\n\016server_version\030\002 "
    "\001(\014\"%\n\007RpbPair\022\013\n\003key\030\001 \002(\014\022\r\n\005value\030\002 \001"
    "(\014\"/\n\017RpbGetBucketReq\022\016\n\006bucket\030\001 \002(\014\022\014\n"
    "\004type\030\002 \001(\014\"2\n\020RpbGetBucketResp\022\036\n\005props"
    "\030\001 \002(\0132\017.RpbBucketProps\"O\n\017RpbSetBucketR"
    "eq\022\016\n\006bucket\030\001 \002(\014\022\036\n\005props\030\002 \002(\0132\017.RpbB"
    "ucketProps\022\014\n\004type\030\003 \001(\014\"1\n\021RpbResetBuck"
    "etReq\022\016\n\006bucket\030\001 \002(\014\022\014\n\004type\030\002 \001(\014\"#\n\023R"
    "pbGetBucketTypeReq\022\014\n\004type\030\001 \002(\014\"C\n\023RpbS"
    "etBucketTypeReq\022\014\n\004type\030\001 \002(\014\022\036\n\005props\030\002"
    " \002(\0132\017.RpbBucketProps\"-\n\tRpbModFun\022\016\n\006mo"
    "dule\030\001 \002(\014\022\020\n\010function\030\002 \002(\014\"9\n\rRpbCommi"
    "tHook\022\032\n\006modfun\030\001 \001(\0132\n.RpbModFun\022\014\n\004nam"
    "e\030\002 \001(\014\"\260\005\n\016RpbBucketProps\022\r\n\005n_val\030\001 \001("
    "\r\022\022\n\nallow_mult\030\002 \001(\010\022\027\n\017last_write_wins"
    "\030\003 \001(\010\022!\n\tprecommit\030\004 \003(\0132\016.RpbCommitHoo"
    "k\022\034\n\rhas_precommit\030\005 \001(\010:\005false\022\"\n\npostc"
    "ommit\030\006 \003(\0132\016.RpbCommitHook\022\035\n\016has_postc"
    "ommit\030\007 \001(\010:\005false\022 \n\014chash_keyfun\030\010 \001(\013"
    "2\n.RpbModFun\022\033\n\007linkfun\030\t \001(\0132\n.RpbModFu"
    "n\022\022\n\nold_vclock\030\n \001(\r\022\024\n\014young_vclock\030\013 "
    "\001(\r\022\022\n\nbig_vclock\030\014 \001(\r\022\024\n\014small_vclock\030"
    "\r \001(\r\022\n\n\002pr\030\016 \001(\r\022\t\n\001r\030\017 \001(\r\022\t\n\001w\030\020 \001(\r\022"
    "\n\n\002pw\030\021 \001(\r\022\n\n\002dw\030\022 \001(\r\022\n\n\002rw\030\023 \001(\r\022\024\n\014b"
    "asic_quorum\030\024 \001(\010\022\023\n\013notfound_ok\030\025 \001(\010\022\017"
    "\n\007backend\030\026 \001(\014\022\016\n\006search\030\027 \001(\010\022)\n\004repl\030"
    "\030 \001(\0162\033.RpbBucketProps.RpbReplMode\022\024\n\014se"
    "arch_index\030\031 \001(\014\022\020\n\010datatype\030\032 \001(\014\022\022\n\nco"
    "nsistent\030\033 \001(\010\022\022\n\nwrite_once\030\034 \001(\010\">\n\013Rp"
    "bReplMode\022\t\n\005FALSE\020\000\022\014\n\010REALTIME\020\001\022\014\n\010FU"
    "LLSYNC\020\002\022\010\n\004TRUE\020\003\",\n\nRpbAuthReq\022\014\n\004user"
    "\030\001 \002(\014\022\020\n\010password\030\002 \002(\014\"*\n\024RpbToggleEnc"
    "odingReq\022\022\n\nuse_native\030\001 \002(\010\"+\n\025RpbToggl"
    "eEncodingResp\022\022\n\nuse_native\030\001 \002(\010B!\n\027com"
    ".basho.riak.protobufB\006RiakPB", 1468);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "riak.proto", &protobuf_RegisterTypes);
  RpbErrorResp::default_instance_ = new RpbErrorResp();
  RpbGetServerInfoResp::default_instance_ = new RpbGetServerInfoResp();
  RpbPair::default_instance_ = new RpbPair();
  RpbGetBucketReq::default_instance_ = new RpbGetBucketReq();
  RpbGetBucketResp::default_instance_ = new RpbGetBucketResp();
  RpbSetBucketReq::default_instance_ = new RpbSetBucketReq();
  RpbResetBucketReq::default_instance_ = new RpbResetBucketReq();
  RpbGetBucketTypeReq::default_instance_ = new RpbGetBucketTypeReq();
  RpbSetBucketTypeReq::default_instance_ = new RpbSetBucketTypeReq();
  RpbModFun::default_instance_ = new RpbModFun();
  RpbCommitHook::default_instance_ = new RpbCommitHook();
  RpbBucketProps::default_instance_ = new RpbBucketProps();
  RpbAuthReq::default_instance_ = new RpbAuthReq();
  RpbToggleEncodingReq::default_instance_ = new RpbToggleEncodingReq();
  RpbToggleEncodingResp::default_instance_ = new RpbToggleEncodingResp();
  RpbErrorResp::default_instance_->InitAsDefaultInstance();
  RpbGetServerInfoResp::default_instance_->InitAsDefaultInstance();
  RpbPair::default_instance_->InitAsDefaultInstance();
  RpbGetBucketReq::default_instance_->InitAsDefaultInstance();
  RpbGetBucketResp::default_instance_->InitAsDefaultInstance();
  RpbSetBucketReq::default_instance_->InitAsDefaultInstance();
  RpbResetBucketReq::default_instance_->InitAsDefaultInstance();
  RpbGetBucketTypeReq::default_instance_->InitAsDefaultInstance();
  RpbSetBucketTypeReq::default_instance_->InitAsDefaultInstance();
  RpbModFun::default_instance_->InitAsDefaultInstance();
  RpbCommitHook::default_instance_->InitAsDefaultInstance();
  RpbBucketProps::default_instance_->InitAsDefaultInstance();
  RpbAuthReq::default_instance_->InitAsDefaultInstance();
  RpbToggleEncodingReq::default_instance_->InitAsDefaultInstance();
  RpbToggleEncodingResp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_riak_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_riak_2eproto {
  StaticDescriptorInitializer_riak_2eproto() {
    protobuf_AddDesc_riak_2eproto();
  }
} static_descriptor_initializer_riak_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int RpbErrorResp::kErrmsgFieldNumber;
const int RpbErrorResp::kErrcodeFieldNumber;
#endif  // !_MSC_VER

RpbErrorResp::RpbErrorResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbErrorResp)
}

void RpbErrorResp::InitAsDefaultInstance() {
}

RpbErrorResp::RpbErrorResp(const RpbErrorResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbErrorResp)
}

void RpbErrorResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbErrorResp::~RpbErrorResp() {
  // @@protoc_insertion_point(destructor:RpbErrorResp)
  SharedDtor();
}

void RpbErrorResp::SharedDtor() {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errmsg_;
  }
  if (this != default_instance_) {
  }
}

void RpbErrorResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbErrorResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbErrorResp_descriptor_;
}

const RpbErrorResp& RpbErrorResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

RpbErrorResp* RpbErrorResp::default_instance_ = NULL;

RpbErrorResp* RpbErrorResp::New() const {
  return new RpbErrorResp;
}

void RpbErrorResp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_errmsg()) {
      if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        errmsg_->clear();
      }
    }
    errcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbErrorResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbErrorResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes errmsg = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_errmsg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_errcode;
        break;
      }

      // required uint32 errcode = 2;
      case 2: {
        if (tag == 16) {
         parse_errcode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbErrorResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbErrorResp)
  return false;
#undef DO_
}

void RpbErrorResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbErrorResp)
  // required bytes errmsg = 1;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->errmsg(), output);
  }

  // required uint32 errcode = 2;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->errcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbErrorResp)
}

::google::protobuf::uint8* RpbErrorResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbErrorResp)
  // required bytes errmsg = 1;
  if (has_errmsg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->errmsg(), target);
  }

  // required uint32 errcode = 2;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->errcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbErrorResp)
  return target;
}

int RpbErrorResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes errmsg = 1;
    if (has_errmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->errmsg());
    }

    // required uint32 errcode = 2;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbErrorResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbErrorResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbErrorResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbErrorResp::MergeFrom(const RpbErrorResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errmsg()) {
      set_errmsg(from.errmsg());
    }
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbErrorResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbErrorResp::CopyFrom(const RpbErrorResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbErrorResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RpbErrorResp::Swap(RpbErrorResp* other) {
  if (other != this) {
    std::swap(errmsg_, other->errmsg_);
    std::swap(errcode_, other->errcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbErrorResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbErrorResp_descriptor_;
  metadata.reflection = RpbErrorResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbGetServerInfoResp::kNodeFieldNumber;
const int RpbGetServerInfoResp::kServerVersionFieldNumber;
#endif  // !_MSC_VER

RpbGetServerInfoResp::RpbGetServerInfoResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbGetServerInfoResp)
}

void RpbGetServerInfoResp::InitAsDefaultInstance() {
}

RpbGetServerInfoResp::RpbGetServerInfoResp(const RpbGetServerInfoResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbGetServerInfoResp)
}

void RpbGetServerInfoResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  node_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbGetServerInfoResp::~RpbGetServerInfoResp() {
  // @@protoc_insertion_point(destructor:RpbGetServerInfoResp)
  SharedDtor();
}

void RpbGetServerInfoResp::SharedDtor() {
  if (node_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete node_;
  }
  if (server_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete server_version_;
  }
  if (this != default_instance_) {
  }
}

void RpbGetServerInfoResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbGetServerInfoResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbGetServerInfoResp_descriptor_;
}

const RpbGetServerInfoResp& RpbGetServerInfoResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

RpbGetServerInfoResp* RpbGetServerInfoResp::default_instance_ = NULL;

RpbGetServerInfoResp* RpbGetServerInfoResp::New() const {
  return new RpbGetServerInfoResp;
}

void RpbGetServerInfoResp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_node()) {
      if (node_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        node_->clear();
      }
    }
    if (has_server_version()) {
      if (server_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        server_version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbGetServerInfoResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbGetServerInfoResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes node = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_node()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_server_version;
        break;
      }

      // optional bytes server_version = 2;
      case 2: {
        if (tag == 18) {
         parse_server_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_server_version()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbGetServerInfoResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbGetServerInfoResp)
  return false;
#undef DO_
}

void RpbGetServerInfoResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbGetServerInfoResp)
  // optional bytes node = 1;
  if (has_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->node(), output);
  }

  // optional bytes server_version = 2;
  if (has_server_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->server_version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbGetServerInfoResp)
}

::google::protobuf::uint8* RpbGetServerInfoResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbGetServerInfoResp)
  // optional bytes node = 1;
  if (has_node()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->node(), target);
  }

  // optional bytes server_version = 2;
  if (has_server_version()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->server_version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbGetServerInfoResp)
  return target;
}

int RpbGetServerInfoResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes node = 1;
    if (has_node()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->node());
    }

    // optional bytes server_version = 2;
    if (has_server_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->server_version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbGetServerInfoResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbGetServerInfoResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbGetServerInfoResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbGetServerInfoResp::MergeFrom(const RpbGetServerInfoResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node()) {
      set_node(from.node());
    }
    if (from.has_server_version()) {
      set_server_version(from.server_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbGetServerInfoResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbGetServerInfoResp::CopyFrom(const RpbGetServerInfoResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbGetServerInfoResp::IsInitialized() const {

  return true;
}

void RpbGetServerInfoResp::Swap(RpbGetServerInfoResp* other) {
  if (other != this) {
    std::swap(node_, other->node_);
    std::swap(server_version_, other->server_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbGetServerInfoResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbGetServerInfoResp_descriptor_;
  metadata.reflection = RpbGetServerInfoResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbPair::kKeyFieldNumber;
const int RpbPair::kValueFieldNumber;
#endif  // !_MSC_VER

RpbPair::RpbPair()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbPair)
}

void RpbPair::InitAsDefaultInstance() {
}

RpbPair::RpbPair(const RpbPair& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbPair)
}

void RpbPair::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbPair::~RpbPair() {
  // @@protoc_insertion_point(destructor:RpbPair)
  SharedDtor();
}

void RpbPair::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void RpbPair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbPair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbPair_descriptor_;
}

const RpbPair& RpbPair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

RpbPair* RpbPair::default_instance_ = NULL;

RpbPair* RpbPair::New() const {
  return new RpbPair;
}

void RpbPair::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbPair)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional bytes value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbPair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbPair)
  return false;
#undef DO_
}

void RpbPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbPair)
  // required bytes key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // optional bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbPair)
}

::google::protobuf::uint8* RpbPair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbPair)
  // required bytes key = 1;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // optional bytes value = 2;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbPair)
  return target;
}

int RpbPair::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // optional bytes value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbPair::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbPair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbPair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbPair::MergeFrom(const RpbPair& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbPair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbPair::CopyFrom(const RpbPair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbPair::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RpbPair::Swap(RpbPair* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbPair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbPair_descriptor_;
  metadata.reflection = RpbPair_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbGetBucketReq::kBucketFieldNumber;
const int RpbGetBucketReq::kTypeFieldNumber;
#endif  // !_MSC_VER

RpbGetBucketReq::RpbGetBucketReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbGetBucketReq)
}

void RpbGetBucketReq::InitAsDefaultInstance() {
}

RpbGetBucketReq::RpbGetBucketReq(const RpbGetBucketReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbGetBucketReq)
}

void RpbGetBucketReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  bucket_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbGetBucketReq::~RpbGetBucketReq() {
  // @@protoc_insertion_point(destructor:RpbGetBucketReq)
  SharedDtor();
}

void RpbGetBucketReq::SharedDtor() {
  if (bucket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bucket_;
  }
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (this != default_instance_) {
  }
}

void RpbGetBucketReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbGetBucketReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbGetBucketReq_descriptor_;
}

const RpbGetBucketReq& RpbGetBucketReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

RpbGetBucketReq* RpbGetBucketReq::default_instance_ = NULL;

RpbGetBucketReq* RpbGetBucketReq::New() const {
  return new RpbGetBucketReq;
}

void RpbGetBucketReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_bucket()) {
      if (bucket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bucket_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbGetBucketReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbGetBucketReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes bucket = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bucket()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }

      // optional bytes type = 2;
      case 2: {
        if (tag == 18) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbGetBucketReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbGetBucketReq)
  return false;
#undef DO_
}

void RpbGetBucketReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbGetBucketReq)
  // required bytes bucket = 1;
  if (has_bucket()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->bucket(), output);
  }

  // optional bytes type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbGetBucketReq)
}

::google::protobuf::uint8* RpbGetBucketReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbGetBucketReq)
  // required bytes bucket = 1;
  if (has_bucket()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->bucket(), target);
  }

  // optional bytes type = 2;
  if (has_type()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbGetBucketReq)
  return target;
}

int RpbGetBucketReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes bucket = 1;
    if (has_bucket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bucket());
    }

    // optional bytes type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbGetBucketReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbGetBucketReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbGetBucketReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbGetBucketReq::MergeFrom(const RpbGetBucketReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bucket()) {
      set_bucket(from.bucket());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbGetBucketReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbGetBucketReq::CopyFrom(const RpbGetBucketReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbGetBucketReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RpbGetBucketReq::Swap(RpbGetBucketReq* other) {
  if (other != this) {
    std::swap(bucket_, other->bucket_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbGetBucketReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbGetBucketReq_descriptor_;
  metadata.reflection = RpbGetBucketReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbGetBucketResp::kPropsFieldNumber;
#endif  // !_MSC_VER

RpbGetBucketResp::RpbGetBucketResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbGetBucketResp)
}

void RpbGetBucketResp::InitAsDefaultInstance() {
  props_ = const_cast< ::RpbBucketProps*>(&::RpbBucketProps::default_instance());
}

RpbGetBucketResp::RpbGetBucketResp(const RpbGetBucketResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbGetBucketResp)
}

void RpbGetBucketResp::SharedCtor() {
  _cached_size_ = 0;
  props_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbGetBucketResp::~RpbGetBucketResp() {
  // @@protoc_insertion_point(destructor:RpbGetBucketResp)
  SharedDtor();
}

void RpbGetBucketResp::SharedDtor() {
  if (this != default_instance_) {
    delete props_;
  }
}

void RpbGetBucketResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbGetBucketResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbGetBucketResp_descriptor_;
}

const RpbGetBucketResp& RpbGetBucketResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

RpbGetBucketResp* RpbGetBucketResp::default_instance_ = NULL;

RpbGetBucketResp* RpbGetBucketResp::New() const {
  return new RpbGetBucketResp;
}

void RpbGetBucketResp::Clear() {
  if (has_props()) {
    if (props_ != NULL) props_->::RpbBucketProps::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbGetBucketResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbGetBucketResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .RpbBucketProps props = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_props()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbGetBucketResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbGetBucketResp)
  return false;
#undef DO_
}

void RpbGetBucketResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbGetBucketResp)
  // required .RpbBucketProps props = 1;
  if (has_props()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->props(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbGetBucketResp)
}

::google::protobuf::uint8* RpbGetBucketResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbGetBucketResp)
  // required .RpbBucketProps props = 1;
  if (has_props()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->props(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbGetBucketResp)
  return target;
}

int RpbGetBucketResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .RpbBucketProps props = 1;
    if (has_props()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->props());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbGetBucketResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbGetBucketResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbGetBucketResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbGetBucketResp::MergeFrom(const RpbGetBucketResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_props()) {
      mutable_props()->::RpbBucketProps::MergeFrom(from.props());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbGetBucketResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbGetBucketResp::CopyFrom(const RpbGetBucketResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbGetBucketResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_props()) {
    if (!this->props().IsInitialized()) return false;
  }
  return true;
}

void RpbGetBucketResp::Swap(RpbGetBucketResp* other) {
  if (other != this) {
    std::swap(props_, other->props_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbGetBucketResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbGetBucketResp_descriptor_;
  metadata.reflection = RpbGetBucketResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbSetBucketReq::kBucketFieldNumber;
const int RpbSetBucketReq::kPropsFieldNumber;
const int RpbSetBucketReq::kTypeFieldNumber;
#endif  // !_MSC_VER

RpbSetBucketReq::RpbSetBucketReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbSetBucketReq)
}

void RpbSetBucketReq::InitAsDefaultInstance() {
  props_ = const_cast< ::RpbBucketProps*>(&::RpbBucketProps::default_instance());
}

RpbSetBucketReq::RpbSetBucketReq(const RpbSetBucketReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbSetBucketReq)
}

void RpbSetBucketReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  bucket_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  props_ = NULL;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbSetBucketReq::~RpbSetBucketReq() {
  // @@protoc_insertion_point(destructor:RpbSetBucketReq)
  SharedDtor();
}

void RpbSetBucketReq::SharedDtor() {
  if (bucket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bucket_;
  }
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (this != default_instance_) {
    delete props_;
  }
}

void RpbSetBucketReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbSetBucketReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbSetBucketReq_descriptor_;
}

const RpbSetBucketReq& RpbSetBucketReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

RpbSetBucketReq* RpbSetBucketReq::default_instance_ = NULL;

RpbSetBucketReq* RpbSetBucketReq::New() const {
  return new RpbSetBucketReq;
}

void RpbSetBucketReq::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_bucket()) {
      if (bucket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bucket_->clear();
      }
    }
    if (has_props()) {
      if (props_ != NULL) props_->::RpbBucketProps::Clear();
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbSetBucketReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbSetBucketReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes bucket = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bucket()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_props;
        break;
      }

      // required .RpbBucketProps props = 2;
      case 2: {
        if (tag == 18) {
         parse_props:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_props()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_type;
        break;
      }

      // optional bytes type = 3;
      case 3: {
        if (tag == 26) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbSetBucketReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbSetBucketReq)
  return false;
#undef DO_
}

void RpbSetBucketReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbSetBucketReq)
  // required bytes bucket = 1;
  if (has_bucket()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->bucket(), output);
  }

  // required .RpbBucketProps props = 2;
  if (has_props()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->props(), output);
  }

  // optional bytes type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbSetBucketReq)
}

::google::protobuf::uint8* RpbSetBucketReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbSetBucketReq)
  // required bytes bucket = 1;
  if (has_bucket()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->bucket(), target);
  }

  // required .RpbBucketProps props = 2;
  if (has_props()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->props(), target);
  }

  // optional bytes type = 3;
  if (has_type()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbSetBucketReq)
  return target;
}

int RpbSetBucketReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes bucket = 1;
    if (has_bucket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bucket());
    }

    // required .RpbBucketProps props = 2;
    if (has_props()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->props());
    }

    // optional bytes type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbSetBucketReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbSetBucketReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbSetBucketReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbSetBucketReq::MergeFrom(const RpbSetBucketReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bucket()) {
      set_bucket(from.bucket());
    }
    if (from.has_props()) {
      mutable_props()->::RpbBucketProps::MergeFrom(from.props());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbSetBucketReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbSetBucketReq::CopyFrom(const RpbSetBucketReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbSetBucketReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_props()) {
    if (!this->props().IsInitialized()) return false;
  }
  return true;
}

void RpbSetBucketReq::Swap(RpbSetBucketReq* other) {
  if (other != this) {
    std::swap(bucket_, other->bucket_);
    std::swap(props_, other->props_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbSetBucketReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbSetBucketReq_descriptor_;
  metadata.reflection = RpbSetBucketReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbResetBucketReq::kBucketFieldNumber;
const int RpbResetBucketReq::kTypeFieldNumber;
#endif  // !_MSC_VER

RpbResetBucketReq::RpbResetBucketReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbResetBucketReq)
}

void RpbResetBucketReq::InitAsDefaultInstance() {
}

RpbResetBucketReq::RpbResetBucketReq(const RpbResetBucketReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbResetBucketReq)
}

void RpbResetBucketReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  bucket_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbResetBucketReq::~RpbResetBucketReq() {
  // @@protoc_insertion_point(destructor:RpbResetBucketReq)
  SharedDtor();
}

void RpbResetBucketReq::SharedDtor() {
  if (bucket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bucket_;
  }
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (this != default_instance_) {
  }
}

void RpbResetBucketReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbResetBucketReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbResetBucketReq_descriptor_;
}

const RpbResetBucketReq& RpbResetBucketReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

RpbResetBucketReq* RpbResetBucketReq::default_instance_ = NULL;

RpbResetBucketReq* RpbResetBucketReq::New() const {
  return new RpbResetBucketReq;
}

void RpbResetBucketReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_bucket()) {
      if (bucket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bucket_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbResetBucketReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbResetBucketReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes bucket = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bucket()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }

      // optional bytes type = 2;
      case 2: {
        if (tag == 18) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbResetBucketReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbResetBucketReq)
  return false;
#undef DO_
}

void RpbResetBucketReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbResetBucketReq)
  // required bytes bucket = 1;
  if (has_bucket()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->bucket(), output);
  }

  // optional bytes type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbResetBucketReq)
}

::google::protobuf::uint8* RpbResetBucketReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbResetBucketReq)
  // required bytes bucket = 1;
  if (has_bucket()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->bucket(), target);
  }

  // optional bytes type = 2;
  if (has_type()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbResetBucketReq)
  return target;
}

int RpbResetBucketReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes bucket = 1;
    if (has_bucket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bucket());
    }

    // optional bytes type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbResetBucketReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbResetBucketReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbResetBucketReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbResetBucketReq::MergeFrom(const RpbResetBucketReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bucket()) {
      set_bucket(from.bucket());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbResetBucketReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbResetBucketReq::CopyFrom(const RpbResetBucketReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbResetBucketReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RpbResetBucketReq::Swap(RpbResetBucketReq* other) {
  if (other != this) {
    std::swap(bucket_, other->bucket_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbResetBucketReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbResetBucketReq_descriptor_;
  metadata.reflection = RpbResetBucketReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbGetBucketTypeReq::kTypeFieldNumber;
#endif  // !_MSC_VER

RpbGetBucketTypeReq::RpbGetBucketTypeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbGetBucketTypeReq)
}

void RpbGetBucketTypeReq::InitAsDefaultInstance() {
}

RpbGetBucketTypeReq::RpbGetBucketTypeReq(const RpbGetBucketTypeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbGetBucketTypeReq)
}

void RpbGetBucketTypeReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbGetBucketTypeReq::~RpbGetBucketTypeReq() {
  // @@protoc_insertion_point(destructor:RpbGetBucketTypeReq)
  SharedDtor();
}

void RpbGetBucketTypeReq::SharedDtor() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (this != default_instance_) {
  }
}

void RpbGetBucketTypeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbGetBucketTypeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbGetBucketTypeReq_descriptor_;
}

const RpbGetBucketTypeReq& RpbGetBucketTypeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

RpbGetBucketTypeReq* RpbGetBucketTypeReq::default_instance_ = NULL;

RpbGetBucketTypeReq* RpbGetBucketTypeReq::New() const {
  return new RpbGetBucketTypeReq;
}

void RpbGetBucketTypeReq::Clear() {
  if (has_type()) {
    if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      type_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbGetBucketTypeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbGetBucketTypeReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbGetBucketTypeReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbGetBucketTypeReq)
  return false;
#undef DO_
}

void RpbGetBucketTypeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbGetBucketTypeReq)
  // required bytes type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbGetBucketTypeReq)
}

::google::protobuf::uint8* RpbGetBucketTypeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbGetBucketTypeReq)
  // required bytes type = 1;
  if (has_type()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbGetBucketTypeReq)
  return target;
}

int RpbGetBucketTypeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbGetBucketTypeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbGetBucketTypeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbGetBucketTypeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbGetBucketTypeReq::MergeFrom(const RpbGetBucketTypeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbGetBucketTypeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbGetBucketTypeReq::CopyFrom(const RpbGetBucketTypeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbGetBucketTypeReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RpbGetBucketTypeReq::Swap(RpbGetBucketTypeReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbGetBucketTypeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbGetBucketTypeReq_descriptor_;
  metadata.reflection = RpbGetBucketTypeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbSetBucketTypeReq::kTypeFieldNumber;
const int RpbSetBucketTypeReq::kPropsFieldNumber;
#endif  // !_MSC_VER

RpbSetBucketTypeReq::RpbSetBucketTypeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbSetBucketTypeReq)
}

void RpbSetBucketTypeReq::InitAsDefaultInstance() {
  props_ = const_cast< ::RpbBucketProps*>(&::RpbBucketProps::default_instance());
}

RpbSetBucketTypeReq::RpbSetBucketTypeReq(const RpbSetBucketTypeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbSetBucketTypeReq)
}

void RpbSetBucketTypeReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  props_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbSetBucketTypeReq::~RpbSetBucketTypeReq() {
  // @@protoc_insertion_point(destructor:RpbSetBucketTypeReq)
  SharedDtor();
}

void RpbSetBucketTypeReq::SharedDtor() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (this != default_instance_) {
    delete props_;
  }
}

void RpbSetBucketTypeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbSetBucketTypeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbSetBucketTypeReq_descriptor_;
}

const RpbSetBucketTypeReq& RpbSetBucketTypeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

RpbSetBucketTypeReq* RpbSetBucketTypeReq::default_instance_ = NULL;

RpbSetBucketTypeReq* RpbSetBucketTypeReq::New() const {
  return new RpbSetBucketTypeReq;
}

void RpbSetBucketTypeReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
    if (has_props()) {
      if (props_ != NULL) props_->::RpbBucketProps::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbSetBucketTypeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbSetBucketTypeReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_props;
        break;
      }

      // required .RpbBucketProps props = 2;
      case 2: {
        if (tag == 18) {
         parse_props:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_props()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbSetBucketTypeReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbSetBucketTypeReq)
  return false;
#undef DO_
}

void RpbSetBucketTypeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbSetBucketTypeReq)
  // required bytes type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->type(), output);
  }

  // required .RpbBucketProps props = 2;
  if (has_props()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->props(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbSetBucketTypeReq)
}

::google::protobuf::uint8* RpbSetBucketTypeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbSetBucketTypeReq)
  // required bytes type = 1;
  if (has_type()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->type(), target);
  }

  // required .RpbBucketProps props = 2;
  if (has_props()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->props(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbSetBucketTypeReq)
  return target;
}

int RpbSetBucketTypeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->type());
    }

    // required .RpbBucketProps props = 2;
    if (has_props()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->props());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbSetBucketTypeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbSetBucketTypeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbSetBucketTypeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbSetBucketTypeReq::MergeFrom(const RpbSetBucketTypeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_props()) {
      mutable_props()->::RpbBucketProps::MergeFrom(from.props());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbSetBucketTypeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbSetBucketTypeReq::CopyFrom(const RpbSetBucketTypeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbSetBucketTypeReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_props()) {
    if (!this->props().IsInitialized()) return false;
  }
  return true;
}

void RpbSetBucketTypeReq::Swap(RpbSetBucketTypeReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(props_, other->props_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbSetBucketTypeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbSetBucketTypeReq_descriptor_;
  metadata.reflection = RpbSetBucketTypeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbModFun::kModuleFieldNumber;
const int RpbModFun::kFunctionFieldNumber;
#endif  // !_MSC_VER

RpbModFun::RpbModFun()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbModFun)
}

void RpbModFun::InitAsDefaultInstance() {
}

RpbModFun::RpbModFun(const RpbModFun& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbModFun)
}

void RpbModFun::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  module_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  function_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbModFun::~RpbModFun() {
  // @@protoc_insertion_point(destructor:RpbModFun)
  SharedDtor();
}

void RpbModFun::SharedDtor() {
  if (module_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete module_;
  }
  if (function_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete function_;
  }
  if (this != default_instance_) {
  }
}

void RpbModFun::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbModFun::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbModFun_descriptor_;
}

const RpbModFun& RpbModFun::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

RpbModFun* RpbModFun::default_instance_ = NULL;

RpbModFun* RpbModFun::New() const {
  return new RpbModFun;
}

void RpbModFun::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_module()) {
      if (module_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        module_->clear();
      }
    }
    if (has_function()) {
      if (function_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        function_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbModFun::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbModFun)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes module = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_module()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_function;
        break;
      }

      // required bytes function = 2;
      case 2: {
        if (tag == 18) {
         parse_function:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_function()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbModFun)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbModFun)
  return false;
#undef DO_
}

void RpbModFun::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbModFun)
  // required bytes module = 1;
  if (has_module()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->module(), output);
  }

  // required bytes function = 2;
  if (has_function()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->function(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbModFun)
}

::google::protobuf::uint8* RpbModFun::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbModFun)
  // required bytes module = 1;
  if (has_module()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->module(), target);
  }

  // required bytes function = 2;
  if (has_function()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->function(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbModFun)
  return target;
}

int RpbModFun::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes module = 1;
    if (has_module()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->module());
    }

    // required bytes function = 2;
    if (has_function()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->function());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbModFun::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbModFun* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbModFun*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbModFun::MergeFrom(const RpbModFun& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_module()) {
      set_module(from.module());
    }
    if (from.has_function()) {
      set_function(from.function());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbModFun::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbModFun::CopyFrom(const RpbModFun& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbModFun::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RpbModFun::Swap(RpbModFun* other) {
  if (other != this) {
    std::swap(module_, other->module_);
    std::swap(function_, other->function_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbModFun::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbModFun_descriptor_;
  metadata.reflection = RpbModFun_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbCommitHook::kModfunFieldNumber;
const int RpbCommitHook::kNameFieldNumber;
#endif  // !_MSC_VER

RpbCommitHook::RpbCommitHook()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbCommitHook)
}

void RpbCommitHook::InitAsDefaultInstance() {
  modfun_ = const_cast< ::RpbModFun*>(&::RpbModFun::default_instance());
}

RpbCommitHook::RpbCommitHook(const RpbCommitHook& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbCommitHook)
}

void RpbCommitHook::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  modfun_ = NULL;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbCommitHook::~RpbCommitHook() {
  // @@protoc_insertion_point(destructor:RpbCommitHook)
  SharedDtor();
}

void RpbCommitHook::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
    delete modfun_;
  }
}

void RpbCommitHook::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbCommitHook::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbCommitHook_descriptor_;
}

const RpbCommitHook& RpbCommitHook::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

RpbCommitHook* RpbCommitHook::default_instance_ = NULL;

RpbCommitHook* RpbCommitHook::New() const {
  return new RpbCommitHook;
}

void RpbCommitHook::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_modfun()) {
      if (modfun_ != NULL) modfun_->::RpbModFun::Clear();
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbCommitHook::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbCommitHook)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .RpbModFun modfun = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_modfun()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbCommitHook)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbCommitHook)
  return false;
#undef DO_
}

void RpbCommitHook::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbCommitHook)
  // optional .RpbModFun modfun = 1;
  if (has_modfun()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->modfun(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbCommitHook)
}

::google::protobuf::uint8* RpbCommitHook::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbCommitHook)
  // optional .RpbModFun modfun = 1;
  if (has_modfun()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->modfun(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbCommitHook)
  return target;
}

int RpbCommitHook::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .RpbModFun modfun = 1;
    if (has_modfun()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->modfun());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbCommitHook::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbCommitHook* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbCommitHook*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbCommitHook::MergeFrom(const RpbCommitHook& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_modfun()) {
      mutable_modfun()->::RpbModFun::MergeFrom(from.modfun());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbCommitHook::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbCommitHook::CopyFrom(const RpbCommitHook& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbCommitHook::IsInitialized() const {

  if (has_modfun()) {
    if (!this->modfun().IsInitialized()) return false;
  }
  return true;
}

void RpbCommitHook::Swap(RpbCommitHook* other) {
  if (other != this) {
    std::swap(modfun_, other->modfun_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbCommitHook::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbCommitHook_descriptor_;
  metadata.reflection = RpbCommitHook_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* RpbBucketProps_RpbReplMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbBucketProps_RpbReplMode_descriptor_;
}
bool RpbBucketProps_RpbReplMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RpbBucketProps_RpbReplMode RpbBucketProps::FALSE;
const RpbBucketProps_RpbReplMode RpbBucketProps::REALTIME;
const RpbBucketProps_RpbReplMode RpbBucketProps::FULLSYNC;
const RpbBucketProps_RpbReplMode RpbBucketProps::TRUE;
const RpbBucketProps_RpbReplMode RpbBucketProps::RpbReplMode_MIN;
const RpbBucketProps_RpbReplMode RpbBucketProps::RpbReplMode_MAX;
const int RpbBucketProps::RpbReplMode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int RpbBucketProps::kNValFieldNumber;
const int RpbBucketProps::kAllowMultFieldNumber;
const int RpbBucketProps::kLastWriteWinsFieldNumber;
const int RpbBucketProps::kPrecommitFieldNumber;
const int RpbBucketProps::kHasPrecommitFieldNumber;
const int RpbBucketProps::kPostcommitFieldNumber;
const int RpbBucketProps::kHasPostcommitFieldNumber;
const int RpbBucketProps::kChashKeyfunFieldNumber;
const int RpbBucketProps::kLinkfunFieldNumber;
const int RpbBucketProps::kOldVclockFieldNumber;
const int RpbBucketProps::kYoungVclockFieldNumber;
const int RpbBucketProps::kBigVclockFieldNumber;
const int RpbBucketProps::kSmallVclockFieldNumber;
const int RpbBucketProps::kPrFieldNumber;
const int RpbBucketProps::kRFieldNumber;
const int RpbBucketProps::kWFieldNumber;
const int RpbBucketProps::kPwFieldNumber;
const int RpbBucketProps::kDwFieldNumber;
const int RpbBucketProps::kRwFieldNumber;
const int RpbBucketProps::kBasicQuorumFieldNumber;
const int RpbBucketProps::kNotfoundOkFieldNumber;
const int RpbBucketProps::kBackendFieldNumber;
const int RpbBucketProps::kSearchFieldNumber;
const int RpbBucketProps::kReplFieldNumber;
const int RpbBucketProps::kSearchIndexFieldNumber;
const int RpbBucketProps::kDatatypeFieldNumber;
const int RpbBucketProps::kConsistentFieldNumber;
const int RpbBucketProps::kWriteOnceFieldNumber;
#endif  // !_MSC_VER

RpbBucketProps::RpbBucketProps()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbBucketProps)
}

void RpbBucketProps::InitAsDefaultInstance() {
  chash_keyfun_ = const_cast< ::RpbModFun*>(&::RpbModFun::default_instance());
  linkfun_ = const_cast< ::RpbModFun*>(&::RpbModFun::default_instance());
}

RpbBucketProps::RpbBucketProps(const RpbBucketProps& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbBucketProps)
}

void RpbBucketProps::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  n_val_ = 0u;
  allow_mult_ = false;
  last_write_wins_ = false;
  has_precommit_ = false;
  has_postcommit_ = false;
  chash_keyfun_ = NULL;
  linkfun_ = NULL;
  old_vclock_ = 0u;
  young_vclock_ = 0u;
  big_vclock_ = 0u;
  small_vclock_ = 0u;
  pr_ = 0u;
  r_ = 0u;
  w_ = 0u;
  pw_ = 0u;
  dw_ = 0u;
  rw_ = 0u;
  basic_quorum_ = false;
  notfound_ok_ = false;
  backend_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  search_ = false;
  repl_ = 0;
  search_index_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  datatype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  consistent_ = false;
  write_once_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbBucketProps::~RpbBucketProps() {
  // @@protoc_insertion_point(destructor:RpbBucketProps)
  SharedDtor();
}

void RpbBucketProps::SharedDtor() {
  if (backend_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete backend_;
  }
  if (search_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete search_index_;
  }
  if (datatype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete datatype_;
  }
  if (this != default_instance_) {
    delete chash_keyfun_;
    delete linkfun_;
  }
}

void RpbBucketProps::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbBucketProps::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbBucketProps_descriptor_;
}

const RpbBucketProps& RpbBucketProps::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

RpbBucketProps* RpbBucketProps::default_instance_ = NULL;

RpbBucketProps* RpbBucketProps::New() const {
  return new RpbBucketProps;
}

void RpbBucketProps::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RpbBucketProps*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 215) {
    ZR_(n_val_, has_postcommit_);
    if (has_chash_keyfun()) {
      if (chash_keyfun_ != NULL) chash_keyfun_->::RpbModFun::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(old_vclock_, w_);
    if (has_linkfun()) {
      if (linkfun_ != NULL) linkfun_->::RpbModFun::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(pw_, rw_);
    ZR_(basic_quorum_, search_);
    if (has_backend()) {
      if (backend_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        backend_->clear();
      }
    }
    repl_ = 0;
  }
  if (_has_bits_[24 / 32] & 251658240) {
    if (has_search_index()) {
      if (search_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        search_index_->clear();
      }
    }
    if (has_datatype()) {
      if (datatype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        datatype_->clear();
      }
    }
    consistent_ = false;
    write_once_ = false;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  precommit_.Clear();
  postcommit_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbBucketProps::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbBucketProps)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 n_val = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &n_val_)));
          set_has_n_val();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_allow_mult;
        break;
      }

      // optional bool allow_mult = 2;
      case 2: {
        if (tag == 16) {
         parse_allow_mult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_mult_)));
          set_has_allow_mult();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_last_write_wins;
        break;
      }

      // optional bool last_write_wins = 3;
      case 3: {
        if (tag == 24) {
         parse_last_write_wins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &last_write_wins_)));
          set_has_last_write_wins();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_precommit;
        break;
      }

      // repeated .RpbCommitHook precommit = 4;
      case 4: {
        if (tag == 34) {
         parse_precommit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_precommit()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_precommit;
        if (input->ExpectTag(40)) goto parse_has_precommit;
        break;
      }

      // optional bool has_precommit = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_has_precommit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_precommit_)));
          set_has_has_precommit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_postcommit;
        break;
      }

      // repeated .RpbCommitHook postcommit = 6;
      case 6: {
        if (tag == 50) {
         parse_postcommit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_postcommit()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_postcommit;
        if (input->ExpectTag(56)) goto parse_has_postcommit;
        break;
      }

      // optional bool has_postcommit = 7 [default = false];
      case 7: {
        if (tag == 56) {
         parse_has_postcommit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_postcommit_)));
          set_has_has_postcommit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_chash_keyfun;
        break;
      }

      // optional .RpbModFun chash_keyfun = 8;
      case 8: {
        if (tag == 66) {
         parse_chash_keyfun:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chash_keyfun()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_linkfun;
        break;
      }

      // optional .RpbModFun linkfun = 9;
      case 9: {
        if (tag == 74) {
         parse_linkfun:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_linkfun()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_old_vclock;
        break;
      }

      // optional uint32 old_vclock = 10;
      case 10: {
        if (tag == 80) {
         parse_old_vclock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &old_vclock_)));
          set_has_old_vclock();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_young_vclock;
        break;
      }

      // optional uint32 young_vclock = 11;
      case 11: {
        if (tag == 88) {
         parse_young_vclock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &young_vclock_)));
          set_has_young_vclock();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_big_vclock;
        break;
      }

      // optional uint32 big_vclock = 12;
      case 12: {
        if (tag == 96) {
         parse_big_vclock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &big_vclock_)));
          set_has_big_vclock();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_small_vclock;
        break;
      }

      // optional uint32 small_vclock = 13;
      case 13: {
        if (tag == 104) {
         parse_small_vclock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &small_vclock_)));
          set_has_small_vclock();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_pr;
        break;
      }

      // optional uint32 pr = 14;
      case 14: {
        if (tag == 112) {
         parse_pr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pr_)));
          set_has_pr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_r;
        break;
      }

      // optional uint32 r = 15;
      case 15: {
        if (tag == 120) {
         parse_r:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &r_)));
          set_has_r();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_w;
        break;
      }

      // optional uint32 w = 16;
      case 16: {
        if (tag == 128) {
         parse_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &w_)));
          set_has_w();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_pw;
        break;
      }

      // optional uint32 pw = 17;
      case 17: {
        if (tag == 136) {
         parse_pw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pw_)));
          set_has_pw();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_dw;
        break;
      }

      // optional uint32 dw = 18;
      case 18: {
        if (tag == 144) {
         parse_dw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_)));
          set_has_dw();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_rw;
        break;
      }

      // optional uint32 rw = 19;
      case 19: {
        if (tag == 152) {
         parse_rw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rw_)));
          set_has_rw();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_basic_quorum;
        break;
      }

      // optional bool basic_quorum = 20;
      case 20: {
        if (tag == 160) {
         parse_basic_quorum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &basic_quorum_)));
          set_has_basic_quorum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_notfound_ok;
        break;
      }

      // optional bool notfound_ok = 21;
      case 21: {
        if (tag == 168) {
         parse_notfound_ok:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &notfound_ok_)));
          set_has_notfound_ok();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_backend;
        break;
      }

      // optional bytes backend = 22;
      case 22: {
        if (tag == 178) {
         parse_backend:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_backend()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_search;
        break;
      }

      // optional bool search = 23;
      case 23: {
        if (tag == 184) {
         parse_search:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &search_)));
          set_has_search();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_repl;
        break;
      }

      // optional .RpbBucketProps.RpbReplMode repl = 24;
      case 24: {
        if (tag == 192) {
         parse_repl:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::RpbBucketProps_RpbReplMode_IsValid(value)) {
            set_repl(static_cast< ::RpbBucketProps_RpbReplMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(24, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_search_index;
        break;
      }

      // optional bytes search_index = 25;
      case 25: {
        if (tag == 202) {
         parse_search_index:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_search_index()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_datatype;
        break;
      }

      // optional bytes datatype = 26;
      case 26: {
        if (tag == 210) {
         parse_datatype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_datatype()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_consistent;
        break;
      }

      // optional bool consistent = 27;
      case 27: {
        if (tag == 216) {
         parse_consistent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &consistent_)));
          set_has_consistent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_write_once;
        break;
      }

      // optional bool write_once = 28;
      case 28: {
        if (tag == 224) {
         parse_write_once:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &write_once_)));
          set_has_write_once();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbBucketProps)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbBucketProps)
  return false;
#undef DO_
}

void RpbBucketProps::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbBucketProps)
  // optional uint32 n_val = 1;
  if (has_n_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->n_val(), output);
  }

  // optional bool allow_mult = 2;
  if (has_allow_mult()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->allow_mult(), output);
  }

  // optional bool last_write_wins = 3;
  if (has_last_write_wins()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->last_write_wins(), output);
  }

  // repeated .RpbCommitHook precommit = 4;
  for (int i = 0; i < this->precommit_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->precommit(i), output);
  }

  // optional bool has_precommit = 5 [default = false];
  if (has_has_precommit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->has_precommit(), output);
  }

  // repeated .RpbCommitHook postcommit = 6;
  for (int i = 0; i < this->postcommit_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->postcommit(i), output);
  }

  // optional bool has_postcommit = 7 [default = false];
  if (has_has_postcommit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->has_postcommit(), output);
  }

  // optional .RpbModFun chash_keyfun = 8;
  if (has_chash_keyfun()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->chash_keyfun(), output);
  }

  // optional .RpbModFun linkfun = 9;
  if (has_linkfun()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->linkfun(), output);
  }

  // optional uint32 old_vclock = 10;
  if (has_old_vclock()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->old_vclock(), output);
  }

  // optional uint32 young_vclock = 11;
  if (has_young_vclock()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->young_vclock(), output);
  }

  // optional uint32 big_vclock = 12;
  if (has_big_vclock()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->big_vclock(), output);
  }

  // optional uint32 small_vclock = 13;
  if (has_small_vclock()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->small_vclock(), output);
  }

  // optional uint32 pr = 14;
  if (has_pr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->pr(), output);
  }

  // optional uint32 r = 15;
  if (has_r()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->r(), output);
  }

  // optional uint32 w = 16;
  if (has_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->w(), output);
  }

  // optional uint32 pw = 17;
  if (has_pw()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->pw(), output);
  }

  // optional uint32 dw = 18;
  if (has_dw()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->dw(), output);
  }

  // optional uint32 rw = 19;
  if (has_rw()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->rw(), output);
  }

  // optional bool basic_quorum = 20;
  if (has_basic_quorum()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->basic_quorum(), output);
  }

  // optional bool notfound_ok = 21;
  if (has_notfound_ok()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->notfound_ok(), output);
  }

  // optional bytes backend = 22;
  if (has_backend()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      22, this->backend(), output);
  }

  // optional bool search = 23;
  if (has_search()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->search(), output);
  }

  // optional .RpbBucketProps.RpbReplMode repl = 24;
  if (has_repl()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      24, this->repl(), output);
  }

  // optional bytes search_index = 25;
  if (has_search_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      25, this->search_index(), output);
  }

  // optional bytes datatype = 26;
  if (has_datatype()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      26, this->datatype(), output);
  }

  // optional bool consistent = 27;
  if (has_consistent()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(27, this->consistent(), output);
  }

  // optional bool write_once = 28;
  if (has_write_once()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(28, this->write_once(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbBucketProps)
}

::google::protobuf::uint8* RpbBucketProps::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbBucketProps)
  // optional uint32 n_val = 1;
  if (has_n_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->n_val(), target);
  }

  // optional bool allow_mult = 2;
  if (has_allow_mult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->allow_mult(), target);
  }

  // optional bool last_write_wins = 3;
  if (has_last_write_wins()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->last_write_wins(), target);
  }

  // repeated .RpbCommitHook precommit = 4;
  for (int i = 0; i < this->precommit_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->precommit(i), target);
  }

  // optional bool has_precommit = 5 [default = false];
  if (has_has_precommit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->has_precommit(), target);
  }

  // repeated .RpbCommitHook postcommit = 6;
  for (int i = 0; i < this->postcommit_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->postcommit(i), target);
  }

  // optional bool has_postcommit = 7 [default = false];
  if (has_has_postcommit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->has_postcommit(), target);
  }

  // optional .RpbModFun chash_keyfun = 8;
  if (has_chash_keyfun()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->chash_keyfun(), target);
  }

  // optional .RpbModFun linkfun = 9;
  if (has_linkfun()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->linkfun(), target);
  }

  // optional uint32 old_vclock = 10;
  if (has_old_vclock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->old_vclock(), target);
  }

  // optional uint32 young_vclock = 11;
  if (has_young_vclock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->young_vclock(), target);
  }

  // optional uint32 big_vclock = 12;
  if (has_big_vclock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->big_vclock(), target);
  }

  // optional uint32 small_vclock = 13;
  if (has_small_vclock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->small_vclock(), target);
  }

  // optional uint32 pr = 14;
  if (has_pr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->pr(), target);
  }

  // optional uint32 r = 15;
  if (has_r()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->r(), target);
  }

  // optional uint32 w = 16;
  if (has_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->w(), target);
  }

  // optional uint32 pw = 17;
  if (has_pw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->pw(), target);
  }

  // optional uint32 dw = 18;
  if (has_dw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->dw(), target);
  }

  // optional uint32 rw = 19;
  if (has_rw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->rw(), target);
  }

  // optional bool basic_quorum = 20;
  if (has_basic_quorum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->basic_quorum(), target);
  }

  // optional bool notfound_ok = 21;
  if (has_notfound_ok()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->notfound_ok(), target);
  }

  // optional bytes backend = 22;
  if (has_backend()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        22, this->backend(), target);
  }

  // optional bool search = 23;
  if (has_search()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->search(), target);
  }

  // optional .RpbBucketProps.RpbReplMode repl = 24;
  if (has_repl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      24, this->repl(), target);
  }

  // optional bytes search_index = 25;
  if (has_search_index()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        25, this->search_index(), target);
  }

  // optional bytes datatype = 26;
  if (has_datatype()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        26, this->datatype(), target);
  }

  // optional bool consistent = 27;
  if (has_consistent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(27, this->consistent(), target);
  }

  // optional bool write_once = 28;
  if (has_write_once()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(28, this->write_once(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbBucketProps)
  return target;
}

int RpbBucketProps::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 n_val = 1;
    if (has_n_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->n_val());
    }

    // optional bool allow_mult = 2;
    if (has_allow_mult()) {
      total_size += 1 + 1;
    }

    // optional bool last_write_wins = 3;
    if (has_last_write_wins()) {
      total_size += 1 + 1;
    }

    // optional bool has_precommit = 5 [default = false];
    if (has_has_precommit()) {
      total_size += 1 + 1;
    }

    // optional bool has_postcommit = 7 [default = false];
    if (has_has_postcommit()) {
      total_size += 1 + 1;
    }

    // optional .RpbModFun chash_keyfun = 8;
    if (has_chash_keyfun()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chash_keyfun());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .RpbModFun linkfun = 9;
    if (has_linkfun()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->linkfun());
    }

    // optional uint32 old_vclock = 10;
    if (has_old_vclock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->old_vclock());
    }

    // optional uint32 young_vclock = 11;
    if (has_young_vclock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->young_vclock());
    }

    // optional uint32 big_vclock = 12;
    if (has_big_vclock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->big_vclock());
    }

    // optional uint32 small_vclock = 13;
    if (has_small_vclock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->small_vclock());
    }

    // optional uint32 pr = 14;
    if (has_pr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pr());
    }

    // optional uint32 r = 15;
    if (has_r()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->r());
    }

    // optional uint32 w = 16;
    if (has_w()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->w());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 pw = 17;
    if (has_pw()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pw());
    }

    // optional uint32 dw = 18;
    if (has_dw()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dw());
    }

    // optional uint32 rw = 19;
    if (has_rw()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rw());
    }

    // optional bool basic_quorum = 20;
    if (has_basic_quorum()) {
      total_size += 2 + 1;
    }

    // optional bool notfound_ok = 21;
    if (has_notfound_ok()) {
      total_size += 2 + 1;
    }

    // optional bytes backend = 22;
    if (has_backend()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->backend());
    }

    // optional bool search = 23;
    if (has_search()) {
      total_size += 2 + 1;
    }

    // optional .RpbBucketProps.RpbReplMode repl = 24;
    if (has_repl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->repl());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional bytes search_index = 25;
    if (has_search_index()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->search_index());
    }

    // optional bytes datatype = 26;
    if (has_datatype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->datatype());
    }

    // optional bool consistent = 27;
    if (has_consistent()) {
      total_size += 2 + 1;
    }

    // optional bool write_once = 28;
    if (has_write_once()) {
      total_size += 2 + 1;
    }

  }
  // repeated .RpbCommitHook precommit = 4;
  total_size += 1 * this->precommit_size();
  for (int i = 0; i < this->precommit_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->precommit(i));
  }

  // repeated .RpbCommitHook postcommit = 6;
  total_size += 1 * this->postcommit_size();
  for (int i = 0; i < this->postcommit_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->postcommit(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbBucketProps::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbBucketProps* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbBucketProps*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbBucketProps::MergeFrom(const RpbBucketProps& from) {
  GOOGLE_CHECK_NE(&from, this);
  precommit_.MergeFrom(from.precommit_);
  postcommit_.MergeFrom(from.postcommit_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_n_val()) {
      set_n_val(from.n_val());
    }
    if (from.has_allow_mult()) {
      set_allow_mult(from.allow_mult());
    }
    if (from.has_last_write_wins()) {
      set_last_write_wins(from.last_write_wins());
    }
    if (from.has_has_precommit()) {
      set_has_precommit(from.has_precommit());
    }
    if (from.has_has_postcommit()) {
      set_has_postcommit(from.has_postcommit());
    }
    if (from.has_chash_keyfun()) {
      mutable_chash_keyfun()->::RpbModFun::MergeFrom(from.chash_keyfun());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_linkfun()) {
      mutable_linkfun()->::RpbModFun::MergeFrom(from.linkfun());
    }
    if (from.has_old_vclock()) {
      set_old_vclock(from.old_vclock());
    }
    if (from.has_young_vclock()) {
      set_young_vclock(from.young_vclock());
    }
    if (from.has_big_vclock()) {
      set_big_vclock(from.big_vclock());
    }
    if (from.has_small_vclock()) {
      set_small_vclock(from.small_vclock());
    }
    if (from.has_pr()) {
      set_pr(from.pr());
    }
    if (from.has_r()) {
      set_r(from.r());
    }
    if (from.has_w()) {
      set_w(from.w());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_pw()) {
      set_pw(from.pw());
    }
    if (from.has_dw()) {
      set_dw(from.dw());
    }
    if (from.has_rw()) {
      set_rw(from.rw());
    }
    if (from.has_basic_quorum()) {
      set_basic_quorum(from.basic_quorum());
    }
    if (from.has_notfound_ok()) {
      set_notfound_ok(from.notfound_ok());
    }
    if (from.has_backend()) {
      set_backend(from.backend());
    }
    if (from.has_search()) {
      set_search(from.search());
    }
    if (from.has_repl()) {
      set_repl(from.repl());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_search_index()) {
      set_search_index(from.search_index());
    }
    if (from.has_datatype()) {
      set_datatype(from.datatype());
    }
    if (from.has_consistent()) {
      set_consistent(from.consistent());
    }
    if (from.has_write_once()) {
      set_write_once(from.write_once());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbBucketProps::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbBucketProps::CopyFrom(const RpbBucketProps& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbBucketProps::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->precommit())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->postcommit())) return false;
  if (has_chash_keyfun()) {
    if (!this->chash_keyfun().IsInitialized()) return false;
  }
  if (has_linkfun()) {
    if (!this->linkfun().IsInitialized()) return false;
  }
  return true;
}

void RpbBucketProps::Swap(RpbBucketProps* other) {
  if (other != this) {
    std::swap(n_val_, other->n_val_);
    std::swap(allow_mult_, other->allow_mult_);
    std::swap(last_write_wins_, other->last_write_wins_);
    precommit_.Swap(&other->precommit_);
    std::swap(has_precommit_, other->has_precommit_);
    postcommit_.Swap(&other->postcommit_);
    std::swap(has_postcommit_, other->has_postcommit_);
    std::swap(chash_keyfun_, other->chash_keyfun_);
    std::swap(linkfun_, other->linkfun_);
    std::swap(old_vclock_, other->old_vclock_);
    std::swap(young_vclock_, other->young_vclock_);
    std::swap(big_vclock_, other->big_vclock_);
    std::swap(small_vclock_, other->small_vclock_);
    std::swap(pr_, other->pr_);
    std::swap(r_, other->r_);
    std::swap(w_, other->w_);
    std::swap(pw_, other->pw_);
    std::swap(dw_, other->dw_);
    std::swap(rw_, other->rw_);
    std::swap(basic_quorum_, other->basic_quorum_);
    std::swap(notfound_ok_, other->notfound_ok_);
    std::swap(backend_, other->backend_);
    std::swap(search_, other->search_);
    std::swap(repl_, other->repl_);
    std::swap(search_index_, other->search_index_);
    std::swap(datatype_, other->datatype_);
    std::swap(consistent_, other->consistent_);
    std::swap(write_once_, other->write_once_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbBucketProps::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbBucketProps_descriptor_;
  metadata.reflection = RpbBucketProps_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbAuthReq::kUserFieldNumber;
const int RpbAuthReq::kPasswordFieldNumber;
#endif  // !_MSC_VER

RpbAuthReq::RpbAuthReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbAuthReq)
}

void RpbAuthReq::InitAsDefaultInstance() {
}

RpbAuthReq::RpbAuthReq(const RpbAuthReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbAuthReq)
}

void RpbAuthReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbAuthReq::~RpbAuthReq() {
  // @@protoc_insertion_point(destructor:RpbAuthReq)
  SharedDtor();
}

void RpbAuthReq::SharedDtor() {
  if (user_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_;
  }
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void RpbAuthReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbAuthReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbAuthReq_descriptor_;
}

const RpbAuthReq& RpbAuthReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

RpbAuthReq* RpbAuthReq::default_instance_ = NULL;

RpbAuthReq* RpbAuthReq::New() const {
  return new RpbAuthReq;
}

void RpbAuthReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        user_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbAuthReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbAuthReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes user = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // required bytes password = 2;
      case 2: {
        if (tag == 18) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_password()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbAuthReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbAuthReq)
  return false;
#undef DO_
}

void RpbAuthReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbAuthReq)
  // required bytes user = 1;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->user(), output);
  }

  // required bytes password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->password(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbAuthReq)
}

::google::protobuf::uint8* RpbAuthReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbAuthReq)
  // required bytes user = 1;
  if (has_user()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->user(), target);
  }

  // required bytes password = 2;
  if (has_password()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->password(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbAuthReq)
  return target;
}

int RpbAuthReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes user = 1;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->user());
    }

    // required bytes password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->password());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbAuthReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbAuthReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbAuthReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbAuthReq::MergeFrom(const RpbAuthReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbAuthReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbAuthReq::CopyFrom(const RpbAuthReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbAuthReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RpbAuthReq::Swap(RpbAuthReq* other) {
  if (other != this) {
    std::swap(user_, other->user_);
    std::swap(password_, other->password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbAuthReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbAuthReq_descriptor_;
  metadata.reflection = RpbAuthReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbToggleEncodingReq::kUseNativeFieldNumber;
#endif  // !_MSC_VER

RpbToggleEncodingReq::RpbToggleEncodingReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbToggleEncodingReq)
}

void RpbToggleEncodingReq::InitAsDefaultInstance() {
}

RpbToggleEncodingReq::RpbToggleEncodingReq(const RpbToggleEncodingReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbToggleEncodingReq)
}

void RpbToggleEncodingReq::SharedCtor() {
  _cached_size_ = 0;
  use_native_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbToggleEncodingReq::~RpbToggleEncodingReq() {
  // @@protoc_insertion_point(destructor:RpbToggleEncodingReq)
  SharedDtor();
}

void RpbToggleEncodingReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RpbToggleEncodingReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbToggleEncodingReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbToggleEncodingReq_descriptor_;
}

const RpbToggleEncodingReq& RpbToggleEncodingReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

RpbToggleEncodingReq* RpbToggleEncodingReq::default_instance_ = NULL;

RpbToggleEncodingReq* RpbToggleEncodingReq::New() const {
  return new RpbToggleEncodingReq;
}

void RpbToggleEncodingReq::Clear() {
  use_native_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbToggleEncodingReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbToggleEncodingReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool use_native = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_native_)));
          set_has_use_native();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbToggleEncodingReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbToggleEncodingReq)
  return false;
#undef DO_
}

void RpbToggleEncodingReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbToggleEncodingReq)
  // required bool use_native = 1;
  if (has_use_native()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->use_native(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbToggleEncodingReq)
}

::google::protobuf::uint8* RpbToggleEncodingReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbToggleEncodingReq)
  // required bool use_native = 1;
  if (has_use_native()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->use_native(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbToggleEncodingReq)
  return target;
}

int RpbToggleEncodingReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool use_native = 1;
    if (has_use_native()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbToggleEncodingReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbToggleEncodingReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbToggleEncodingReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbToggleEncodingReq::MergeFrom(const RpbToggleEncodingReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_use_native()) {
      set_use_native(from.use_native());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbToggleEncodingReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbToggleEncodingReq::CopyFrom(const RpbToggleEncodingReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbToggleEncodingReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RpbToggleEncodingReq::Swap(RpbToggleEncodingReq* other) {
  if (other != this) {
    std::swap(use_native_, other->use_native_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbToggleEncodingReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbToggleEncodingReq_descriptor_;
  metadata.reflection = RpbToggleEncodingReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbToggleEncodingResp::kUseNativeFieldNumber;
#endif  // !_MSC_VER

RpbToggleEncodingResp::RpbToggleEncodingResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbToggleEncodingResp)
}

void RpbToggleEncodingResp::InitAsDefaultInstance() {
}

RpbToggleEncodingResp::RpbToggleEncodingResp(const RpbToggleEncodingResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbToggleEncodingResp)
}

void RpbToggleEncodingResp::SharedCtor() {
  _cached_size_ = 0;
  use_native_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbToggleEncodingResp::~RpbToggleEncodingResp() {
  // @@protoc_insertion_point(destructor:RpbToggleEncodingResp)
  SharedDtor();
}

void RpbToggleEncodingResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RpbToggleEncodingResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbToggleEncodingResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbToggleEncodingResp_descriptor_;
}

const RpbToggleEncodingResp& RpbToggleEncodingResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

RpbToggleEncodingResp* RpbToggleEncodingResp::default_instance_ = NULL;

RpbToggleEncodingResp* RpbToggleEncodingResp::New() const {
  return new RpbToggleEncodingResp;
}

void RpbToggleEncodingResp::Clear() {
  use_native_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbToggleEncodingResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbToggleEncodingResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool use_native = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_native_)));
          set_has_use_native();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbToggleEncodingResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbToggleEncodingResp)
  return false;
#undef DO_
}

void RpbToggleEncodingResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbToggleEncodingResp)
  // required bool use_native = 1;
  if (has_use_native()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->use_native(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbToggleEncodingResp)
}

::google::protobuf::uint8* RpbToggleEncodingResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbToggleEncodingResp)
  // required bool use_native = 1;
  if (has_use_native()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->use_native(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbToggleEncodingResp)
  return target;
}

int RpbToggleEncodingResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool use_native = 1;
    if (has_use_native()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbToggleEncodingResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbToggleEncodingResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbToggleEncodingResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbToggleEncodingResp::MergeFrom(const RpbToggleEncodingResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_use_native()) {
      set_use_native(from.use_native());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbToggleEncodingResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbToggleEncodingResp::CopyFrom(const RpbToggleEncodingResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbToggleEncodingResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RpbToggleEncodingResp::Swap(RpbToggleEncodingResp* other) {
  if (other != this) {
    std::swap(use_native_, other->use_native_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbToggleEncodingResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbToggleEncodingResp_descriptor_;
  metadata.reflection = RpbToggleEncodingResp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
