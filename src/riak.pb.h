// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: riak.proto

#ifndef PROTOBUF_riak_2eproto__INCLUDED
#define PROTOBUF_riak_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_riak_2eproto();
void protobuf_AssignDesc_riak_2eproto();
void protobuf_ShutdownFile_riak_2eproto();

class RpbErrorResp;
class RpbGetServerInfoResp;
class RpbPair;
class RpbGetBucketReq;
class RpbGetBucketResp;
class RpbSetBucketReq;
class RpbResetBucketReq;
class RpbGetBucketTypeReq;
class RpbSetBucketTypeReq;
class RpbModFun;
class RpbCommitHook;
class RpbBucketProps;
class RpbAuthReq;
class RpbToggleEncodingReq;
class RpbToggleEncodingResp;

enum RpbBucketProps_RpbReplMode {
  RpbBucketProps_RpbReplMode_FALSE = 0,
  RpbBucketProps_RpbReplMode_REALTIME = 1,
  RpbBucketProps_RpbReplMode_FULLSYNC = 2,
  RpbBucketProps_RpbReplMode_TRUE = 3
};
bool RpbBucketProps_RpbReplMode_IsValid(int value);
const RpbBucketProps_RpbReplMode RpbBucketProps_RpbReplMode_RpbReplMode_MIN = RpbBucketProps_RpbReplMode_FALSE;
const RpbBucketProps_RpbReplMode RpbBucketProps_RpbReplMode_RpbReplMode_MAX = RpbBucketProps_RpbReplMode_TRUE;
const int RpbBucketProps_RpbReplMode_RpbReplMode_ARRAYSIZE = RpbBucketProps_RpbReplMode_RpbReplMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* RpbBucketProps_RpbReplMode_descriptor();
inline const ::std::string& RpbBucketProps_RpbReplMode_Name(RpbBucketProps_RpbReplMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    RpbBucketProps_RpbReplMode_descriptor(), value);
}
inline bool RpbBucketProps_RpbReplMode_Parse(
    const ::std::string& name, RpbBucketProps_RpbReplMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RpbBucketProps_RpbReplMode>(
    RpbBucketProps_RpbReplMode_descriptor(), name, value);
}
// ===================================================================

class RpbErrorResp : public ::google::protobuf::Message {
 public:
  RpbErrorResp();
  virtual ~RpbErrorResp();

  RpbErrorResp(const RpbErrorResp& from);

  inline RpbErrorResp& operator=(const RpbErrorResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RpbErrorResp& default_instance();

  void Swap(RpbErrorResp* other);

  // implements Message ----------------------------------------------

  RpbErrorResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RpbErrorResp& from);
  void MergeFrom(const RpbErrorResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes errmsg = 1;
  inline bool has_errmsg() const;
  inline void clear_errmsg();
  static const int kErrmsgFieldNumber = 1;
  inline const ::std::string& errmsg() const;
  inline void set_errmsg(const ::std::string& value);
  inline void set_errmsg(const char* value);
  inline void set_errmsg(const void* value, size_t size);
  inline ::std::string* mutable_errmsg();
  inline ::std::string* release_errmsg();
  inline void set_allocated_errmsg(::std::string* errmsg);

  // required uint32 errcode = 2;
  inline bool has_errcode() const;
  inline void clear_errcode();
  static const int kErrcodeFieldNumber = 2;
  inline ::google::protobuf::uint32 errcode() const;
  inline void set_errcode(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:RpbErrorResp)
 private:
  inline void set_has_errmsg();
  inline void clear_has_errmsg();
  inline void set_has_errcode();
  inline void clear_has_errcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* errmsg_;
  ::google::protobuf::uint32 errcode_;
  friend void  protobuf_AddDesc_riak_2eproto();
  friend void protobuf_AssignDesc_riak_2eproto();
  friend void protobuf_ShutdownFile_riak_2eproto();

  void InitAsDefaultInstance();
  static RpbErrorResp* default_instance_;
};
// -------------------------------------------------------------------

class RpbGetServerInfoResp : public ::google::protobuf::Message {
 public:
  RpbGetServerInfoResp();
  virtual ~RpbGetServerInfoResp();

  RpbGetServerInfoResp(const RpbGetServerInfoResp& from);

  inline RpbGetServerInfoResp& operator=(const RpbGetServerInfoResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RpbGetServerInfoResp& default_instance();

  void Swap(RpbGetServerInfoResp* other);

  // implements Message ----------------------------------------------

  RpbGetServerInfoResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RpbGetServerInfoResp& from);
  void MergeFrom(const RpbGetServerInfoResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes node = 1;
  inline bool has_node() const;
  inline void clear_node();
  static const int kNodeFieldNumber = 1;
  inline const ::std::string& node() const;
  inline void set_node(const ::std::string& value);
  inline void set_node(const char* value);
  inline void set_node(const void* value, size_t size);
  inline ::std::string* mutable_node();
  inline ::std::string* release_node();
  inline void set_allocated_node(::std::string* node);

  // optional bytes server_version = 2;
  inline bool has_server_version() const;
  inline void clear_server_version();
  static const int kServerVersionFieldNumber = 2;
  inline const ::std::string& server_version() const;
  inline void set_server_version(const ::std::string& value);
  inline void set_server_version(const char* value);
  inline void set_server_version(const void* value, size_t size);
  inline ::std::string* mutable_server_version();
  inline ::std::string* release_server_version();
  inline void set_allocated_server_version(::std::string* server_version);

  // @@protoc_insertion_point(class_scope:RpbGetServerInfoResp)
 private:
  inline void set_has_node();
  inline void clear_has_node();
  inline void set_has_server_version();
  inline void clear_has_server_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* node_;
  ::std::string* server_version_;
  friend void  protobuf_AddDesc_riak_2eproto();
  friend void protobuf_AssignDesc_riak_2eproto();
  friend void protobuf_ShutdownFile_riak_2eproto();

  void InitAsDefaultInstance();
  static RpbGetServerInfoResp* default_instance_;
};
// -------------------------------------------------------------------

class RpbPair : public ::google::protobuf::Message {
 public:
  RpbPair();
  virtual ~RpbPair();

  RpbPair(const RpbPair& from);

  inline RpbPair& operator=(const RpbPair& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RpbPair& default_instance();

  void Swap(RpbPair* other);

  // implements Message ----------------------------------------------

  RpbPair* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RpbPair& from);
  void MergeFrom(const RpbPair& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const void* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // optional bytes value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:RpbPair)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* key_;
  ::std::string* value_;
  friend void  protobuf_AddDesc_riak_2eproto();
  friend void protobuf_AssignDesc_riak_2eproto();
  friend void protobuf_ShutdownFile_riak_2eproto();

  void InitAsDefaultInstance();
  static RpbPair* default_instance_;
};
// -------------------------------------------------------------------

class RpbGetBucketReq : public ::google::protobuf::Message {
 public:
  RpbGetBucketReq();
  virtual ~RpbGetBucketReq();

  RpbGetBucketReq(const RpbGetBucketReq& from);

  inline RpbGetBucketReq& operator=(const RpbGetBucketReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RpbGetBucketReq& default_instance();

  void Swap(RpbGetBucketReq* other);

  // implements Message ----------------------------------------------

  RpbGetBucketReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RpbGetBucketReq& from);
  void MergeFrom(const RpbGetBucketReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes bucket = 1;
  inline bool has_bucket() const;
  inline void clear_bucket();
  static const int kBucketFieldNumber = 1;
  inline const ::std::string& bucket() const;
  inline void set_bucket(const ::std::string& value);
  inline void set_bucket(const char* value);
  inline void set_bucket(const void* value, size_t size);
  inline ::std::string* mutable_bucket();
  inline ::std::string* release_bucket();
  inline void set_allocated_bucket(::std::string* bucket);

  // optional bytes type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const void* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // @@protoc_insertion_point(class_scope:RpbGetBucketReq)
 private:
  inline void set_has_bucket();
  inline void clear_has_bucket();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* bucket_;
  ::std::string* type_;
  friend void  protobuf_AddDesc_riak_2eproto();
  friend void protobuf_AssignDesc_riak_2eproto();
  friend void protobuf_ShutdownFile_riak_2eproto();

  void InitAsDefaultInstance();
  static RpbGetBucketReq* default_instance_;
};
// -------------------------------------------------------------------

class RpbGetBucketResp : public ::google::protobuf::Message {
 public:
  RpbGetBucketResp();
  virtual ~RpbGetBucketResp();

  RpbGetBucketResp(const RpbGetBucketResp& from);

  inline RpbGetBucketResp& operator=(const RpbGetBucketResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RpbGetBucketResp& default_instance();

  void Swap(RpbGetBucketResp* other);

  // implements Message ----------------------------------------------

  RpbGetBucketResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RpbGetBucketResp& from);
  void MergeFrom(const RpbGetBucketResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .RpbBucketProps props = 1;
  inline bool has_props() const;
  inline void clear_props();
  static const int kPropsFieldNumber = 1;
  inline const ::RpbBucketProps& props() const;
  inline ::RpbBucketProps* mutable_props();
  inline ::RpbBucketProps* release_props();
  inline void set_allocated_props(::RpbBucketProps* props);

  // @@protoc_insertion_point(class_scope:RpbGetBucketResp)
 private:
  inline void set_has_props();
  inline void clear_has_props();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::RpbBucketProps* props_;
  friend void  protobuf_AddDesc_riak_2eproto();
  friend void protobuf_AssignDesc_riak_2eproto();
  friend void protobuf_ShutdownFile_riak_2eproto();

  void InitAsDefaultInstance();
  static RpbGetBucketResp* default_instance_;
};
// -------------------------------------------------------------------

class RpbSetBucketReq : public ::google::protobuf::Message {
 public:
  RpbSetBucketReq();
  virtual ~RpbSetBucketReq();

  RpbSetBucketReq(const RpbSetBucketReq& from);

  inline RpbSetBucketReq& operator=(const RpbSetBucketReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RpbSetBucketReq& default_instance();

  void Swap(RpbSetBucketReq* other);

  // implements Message ----------------------------------------------

  RpbSetBucketReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RpbSetBucketReq& from);
  void MergeFrom(const RpbSetBucketReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes bucket = 1;
  inline bool has_bucket() const;
  inline void clear_bucket();
  static const int kBucketFieldNumber = 1;
  inline const ::std::string& bucket() const;
  inline void set_bucket(const ::std::string& value);
  inline void set_bucket(const char* value);
  inline void set_bucket(const void* value, size_t size);
  inline ::std::string* mutable_bucket();
  inline ::std::string* release_bucket();
  inline void set_allocated_bucket(::std::string* bucket);

  // required .RpbBucketProps props = 2;
  inline bool has_props() const;
  inline void clear_props();
  static const int kPropsFieldNumber = 2;
  inline const ::RpbBucketProps& props() const;
  inline ::RpbBucketProps* mutable_props();
  inline ::RpbBucketProps* release_props();
  inline void set_allocated_props(::RpbBucketProps* props);

  // optional bytes type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const void* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // @@protoc_insertion_point(class_scope:RpbSetBucketReq)
 private:
  inline void set_has_bucket();
  inline void clear_has_bucket();
  inline void set_has_props();
  inline void clear_has_props();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* bucket_;
  ::RpbBucketProps* props_;
  ::std::string* type_;
  friend void  protobuf_AddDesc_riak_2eproto();
  friend void protobuf_AssignDesc_riak_2eproto();
  friend void protobuf_ShutdownFile_riak_2eproto();

  void InitAsDefaultInstance();
  static RpbSetBucketReq* default_instance_;
};
// -------------------------------------------------------------------

class RpbResetBucketReq : public ::google::protobuf::Message {
 public:
  RpbResetBucketReq();
  virtual ~RpbResetBucketReq();

  RpbResetBucketReq(const RpbResetBucketReq& from);

  inline RpbResetBucketReq& operator=(const RpbResetBucketReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RpbResetBucketReq& default_instance();

  void Swap(RpbResetBucketReq* other);

  // implements Message ----------------------------------------------

  RpbResetBucketReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RpbResetBucketReq& from);
  void MergeFrom(const RpbResetBucketReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes bucket = 1;
  inline bool has_bucket() const;
  inline void clear_bucket();
  static const int kBucketFieldNumber = 1;
  inline const ::std::string& bucket() const;
  inline void set_bucket(const ::std::string& value);
  inline void set_bucket(const char* value);
  inline void set_bucket(const void* value, size_t size);
  inline ::std::string* mutable_bucket();
  inline ::std::string* release_bucket();
  inline void set_allocated_bucket(::std::string* bucket);

  // optional bytes type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const void* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // @@protoc_insertion_point(class_scope:RpbResetBucketReq)
 private:
  inline void set_has_bucket();
  inline void clear_has_bucket();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* bucket_;
  ::std::string* type_;
  friend void  protobuf_AddDesc_riak_2eproto();
  friend void protobuf_AssignDesc_riak_2eproto();
  friend void protobuf_ShutdownFile_riak_2eproto();

  void InitAsDefaultInstance();
  static RpbResetBucketReq* default_instance_;
};
// -------------------------------------------------------------------

class RpbGetBucketTypeReq : public ::google::protobuf::Message {
 public:
  RpbGetBucketTypeReq();
  virtual ~RpbGetBucketTypeReq();

  RpbGetBucketTypeReq(const RpbGetBucketTypeReq& from);

  inline RpbGetBucketTypeReq& operator=(const RpbGetBucketTypeReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RpbGetBucketTypeReq& default_instance();

  void Swap(RpbGetBucketTypeReq* other);

  // implements Message ----------------------------------------------

  RpbGetBucketTypeReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RpbGetBucketTypeReq& from);
  void MergeFrom(const RpbGetBucketTypeReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const void* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // @@protoc_insertion_point(class_scope:RpbGetBucketTypeReq)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* type_;
  friend void  protobuf_AddDesc_riak_2eproto();
  friend void protobuf_AssignDesc_riak_2eproto();
  friend void protobuf_ShutdownFile_riak_2eproto();

  void InitAsDefaultInstance();
  static RpbGetBucketTypeReq* default_instance_;
};
// -------------------------------------------------------------------

class RpbSetBucketTypeReq : public ::google::protobuf::Message {
 public:
  RpbSetBucketTypeReq();
  virtual ~RpbSetBucketTypeReq();

  RpbSetBucketTypeReq(const RpbSetBucketTypeReq& from);

  inline RpbSetBucketTypeReq& operator=(const RpbSetBucketTypeReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RpbSetBucketTypeReq& default_instance();

  void Swap(RpbSetBucketTypeReq* other);

  // implements Message ----------------------------------------------

  RpbSetBucketTypeReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RpbSetBucketTypeReq& from);
  void MergeFrom(const RpbSetBucketTypeReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const void* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // required .RpbBucketProps props = 2;
  inline bool has_props() const;
  inline void clear_props();
  static const int kPropsFieldNumber = 2;
  inline const ::RpbBucketProps& props() const;
  inline ::RpbBucketProps* mutable_props();
  inline ::RpbBucketProps* release_props();
  inline void set_allocated_props(::RpbBucketProps* props);

  // @@protoc_insertion_point(class_scope:RpbSetBucketTypeReq)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_props();
  inline void clear_has_props();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* type_;
  ::RpbBucketProps* props_;
  friend void  protobuf_AddDesc_riak_2eproto();
  friend void protobuf_AssignDesc_riak_2eproto();
  friend void protobuf_ShutdownFile_riak_2eproto();

  void InitAsDefaultInstance();
  static RpbSetBucketTypeReq* default_instance_;
};
// -------------------------------------------------------------------

class RpbModFun : public ::google::protobuf::Message {
 public:
  RpbModFun();
  virtual ~RpbModFun();

  RpbModFun(const RpbModFun& from);

  inline RpbModFun& operator=(const RpbModFun& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RpbModFun& default_instance();

  void Swap(RpbModFun* other);

  // implements Message ----------------------------------------------

  RpbModFun* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RpbModFun& from);
  void MergeFrom(const RpbModFun& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes module = 1;
  inline bool has_module() const;
  inline void clear_module();
  static const int kModuleFieldNumber = 1;
  inline const ::std::string& module() const;
  inline void set_module(const ::std::string& value);
  inline void set_module(const char* value);
  inline void set_module(const void* value, size_t size);
  inline ::std::string* mutable_module();
  inline ::std::string* release_module();
  inline void set_allocated_module(::std::string* module);

  // required bytes function = 2;
  inline bool has_function() const;
  inline void clear_function();
  static const int kFunctionFieldNumber = 2;
  inline const ::std::string& function() const;
  inline void set_function(const ::std::string& value);
  inline void set_function(const char* value);
  inline void set_function(const void* value, size_t size);
  inline ::std::string* mutable_function();
  inline ::std::string* release_function();
  inline void set_allocated_function(::std::string* function);

  // @@protoc_insertion_point(class_scope:RpbModFun)
 private:
  inline void set_has_module();
  inline void clear_has_module();
  inline void set_has_function();
  inline void clear_has_function();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* module_;
  ::std::string* function_;
  friend void  protobuf_AddDesc_riak_2eproto();
  friend void protobuf_AssignDesc_riak_2eproto();
  friend void protobuf_ShutdownFile_riak_2eproto();

  void InitAsDefaultInstance();
  static RpbModFun* default_instance_;
};
// -------------------------------------------------------------------

class RpbCommitHook : public ::google::protobuf::Message {
 public:
  RpbCommitHook();
  virtual ~RpbCommitHook();

  RpbCommitHook(const RpbCommitHook& from);

  inline RpbCommitHook& operator=(const RpbCommitHook& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RpbCommitHook& default_instance();

  void Swap(RpbCommitHook* other);

  // implements Message ----------------------------------------------

  RpbCommitHook* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RpbCommitHook& from);
  void MergeFrom(const RpbCommitHook& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .RpbModFun modfun = 1;
  inline bool has_modfun() const;
  inline void clear_modfun();
  static const int kModfunFieldNumber = 1;
  inline const ::RpbModFun& modfun() const;
  inline ::RpbModFun* mutable_modfun();
  inline ::RpbModFun* release_modfun();
  inline void set_allocated_modfun(::RpbModFun* modfun);

  // optional bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:RpbCommitHook)
 private:
  inline void set_has_modfun();
  inline void clear_has_modfun();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::RpbModFun* modfun_;
  ::std::string* name_;
  friend void  protobuf_AddDesc_riak_2eproto();
  friend void protobuf_AssignDesc_riak_2eproto();
  friend void protobuf_ShutdownFile_riak_2eproto();

  void InitAsDefaultInstance();
  static RpbCommitHook* default_instance_;
};
// -------------------------------------------------------------------

class RpbBucketProps : public ::google::protobuf::Message {
 public:
  RpbBucketProps();
  virtual ~RpbBucketProps();

  RpbBucketProps(const RpbBucketProps& from);

  inline RpbBucketProps& operator=(const RpbBucketProps& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RpbBucketProps& default_instance();

  void Swap(RpbBucketProps* other);

  // implements Message ----------------------------------------------

  RpbBucketProps* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RpbBucketProps& from);
  void MergeFrom(const RpbBucketProps& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef RpbBucketProps_RpbReplMode RpbReplMode;
  static const RpbReplMode FALSE = RpbBucketProps_RpbReplMode_FALSE;
  static const RpbReplMode REALTIME = RpbBucketProps_RpbReplMode_REALTIME;
  static const RpbReplMode FULLSYNC = RpbBucketProps_RpbReplMode_FULLSYNC;
  static const RpbReplMode TRUE = RpbBucketProps_RpbReplMode_TRUE;
  static inline bool RpbReplMode_IsValid(int value) {
    return RpbBucketProps_RpbReplMode_IsValid(value);
  }
  static const RpbReplMode RpbReplMode_MIN =
    RpbBucketProps_RpbReplMode_RpbReplMode_MIN;
  static const RpbReplMode RpbReplMode_MAX =
    RpbBucketProps_RpbReplMode_RpbReplMode_MAX;
  static const int RpbReplMode_ARRAYSIZE =
    RpbBucketProps_RpbReplMode_RpbReplMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RpbReplMode_descriptor() {
    return RpbBucketProps_RpbReplMode_descriptor();
  }
  static inline const ::std::string& RpbReplMode_Name(RpbReplMode value) {
    return RpbBucketProps_RpbReplMode_Name(value);
  }
  static inline bool RpbReplMode_Parse(const ::std::string& name,
      RpbReplMode* value) {
    return RpbBucketProps_RpbReplMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 n_val = 1;
  inline bool has_n_val() const;
  inline void clear_n_val();
  static const int kNValFieldNumber = 1;
  inline ::google::protobuf::uint32 n_val() const;
  inline void set_n_val(::google::protobuf::uint32 value);

  // optional bool allow_mult = 2;
  inline bool has_allow_mult() const;
  inline void clear_allow_mult();
  static const int kAllowMultFieldNumber = 2;
  inline bool allow_mult() const;
  inline void set_allow_mult(bool value);

  // optional bool last_write_wins = 3;
  inline bool has_last_write_wins() const;
  inline void clear_last_write_wins();
  static const int kLastWriteWinsFieldNumber = 3;
  inline bool last_write_wins() const;
  inline void set_last_write_wins(bool value);

  // repeated .RpbCommitHook precommit = 4;
  inline int precommit_size() const;
  inline void clear_precommit();
  static const int kPrecommitFieldNumber = 4;
  inline const ::RpbCommitHook& precommit(int index) const;
  inline ::RpbCommitHook* mutable_precommit(int index);
  inline ::RpbCommitHook* add_precommit();
  inline const ::google::protobuf::RepeatedPtrField< ::RpbCommitHook >&
      precommit() const;
  inline ::google::protobuf::RepeatedPtrField< ::RpbCommitHook >*
      mutable_precommit();

  // optional bool has_precommit = 5 [default = false];
  inline bool has_has_precommit() const;
  inline void clear_has_precommit();
  static const int kHasPrecommitFieldNumber = 5;
  inline bool has_precommit() const;
  inline void set_has_precommit(bool value);

  // repeated .RpbCommitHook postcommit = 6;
  inline int postcommit_size() const;
  inline void clear_postcommit();
  static const int kPostcommitFieldNumber = 6;
  inline const ::RpbCommitHook& postcommit(int index) const;
  inline ::RpbCommitHook* mutable_postcommit(int index);
  inline ::RpbCommitHook* add_postcommit();
  inline const ::google::protobuf::RepeatedPtrField< ::RpbCommitHook >&
      postcommit() const;
  inline ::google::protobuf::RepeatedPtrField< ::RpbCommitHook >*
      mutable_postcommit();

  // optional bool has_postcommit = 7 [default = false];
  inline bool has_has_postcommit() const;
  inline void clear_has_postcommit();
  static const int kHasPostcommitFieldNumber = 7;
  inline bool has_postcommit() const;
  inline void set_has_postcommit(bool value);

  // optional .RpbModFun chash_keyfun = 8;
  inline bool has_chash_keyfun() const;
  inline void clear_chash_keyfun();
  static const int kChashKeyfunFieldNumber = 8;
  inline const ::RpbModFun& chash_keyfun() const;
  inline ::RpbModFun* mutable_chash_keyfun();
  inline ::RpbModFun* release_chash_keyfun();
  inline void set_allocated_chash_keyfun(::RpbModFun* chash_keyfun);

  // optional .RpbModFun linkfun = 9;
  inline bool has_linkfun() const;
  inline void clear_linkfun();
  static const int kLinkfunFieldNumber = 9;
  inline const ::RpbModFun& linkfun() const;
  inline ::RpbModFun* mutable_linkfun();
  inline ::RpbModFun* release_linkfun();
  inline void set_allocated_linkfun(::RpbModFun* linkfun);

  // optional uint32 old_vclock = 10;
  inline bool has_old_vclock() const;
  inline void clear_old_vclock();
  static const int kOldVclockFieldNumber = 10;
  inline ::google::protobuf::uint32 old_vclock() const;
  inline void set_old_vclock(::google::protobuf::uint32 value);

  // optional uint32 young_vclock = 11;
  inline bool has_young_vclock() const;
  inline void clear_young_vclock();
  static const int kYoungVclockFieldNumber = 11;
  inline ::google::protobuf::uint32 young_vclock() const;
  inline void set_young_vclock(::google::protobuf::uint32 value);

  // optional uint32 big_vclock = 12;
  inline bool has_big_vclock() const;
  inline void clear_big_vclock();
  static const int kBigVclockFieldNumber = 12;
  inline ::google::protobuf::uint32 big_vclock() const;
  inline void set_big_vclock(::google::protobuf::uint32 value);

  // optional uint32 small_vclock = 13;
  inline bool has_small_vclock() const;
  inline void clear_small_vclock();
  static const int kSmallVclockFieldNumber = 13;
  inline ::google::protobuf::uint32 small_vclock() const;
  inline void set_small_vclock(::google::protobuf::uint32 value);

  // optional uint32 pr = 14;
  inline bool has_pr() const;
  inline void clear_pr();
  static const int kPrFieldNumber = 14;
  inline ::google::protobuf::uint32 pr() const;
  inline void set_pr(::google::protobuf::uint32 value);

  // optional uint32 r = 15;
  inline bool has_r() const;
  inline void clear_r();
  static const int kRFieldNumber = 15;
  inline ::google::protobuf::uint32 r() const;
  inline void set_r(::google::protobuf::uint32 value);

  // optional uint32 w = 16;
  inline bool has_w() const;
  inline void clear_w();
  static const int kWFieldNumber = 16;
  inline ::google::protobuf::uint32 w() const;
  inline void set_w(::google::protobuf::uint32 value);

  // optional uint32 pw = 17;
  inline bool has_pw() const;
  inline void clear_pw();
  static const int kPwFieldNumber = 17;
  inline ::google::protobuf::uint32 pw() const;
  inline void set_pw(::google::protobuf::uint32 value);

  // optional uint32 dw = 18;
  inline bool has_dw() const;
  inline void clear_dw();
  static const int kDwFieldNumber = 18;
  inline ::google::protobuf::uint32 dw() const;
  inline void set_dw(::google::protobuf::uint32 value);

  // optional uint32 rw = 19;
  inline bool has_rw() const;
  inline void clear_rw();
  static const int kRwFieldNumber = 19;
  inline ::google::protobuf::uint32 rw() const;
  inline void set_rw(::google::protobuf::uint32 value);

  // optional bool basic_quorum = 20;
  inline bool has_basic_quorum() const;
  inline void clear_basic_quorum();
  static const int kBasicQuorumFieldNumber = 20;
  inline bool basic_quorum() const;
  inline void set_basic_quorum(bool value);

  // optional bool notfound_ok = 21;
  inline bool has_notfound_ok() const;
  inline void clear_notfound_ok();
  static const int kNotfoundOkFieldNumber = 21;
  inline bool notfound_ok() const;
  inline void set_notfound_ok(bool value);

  // optional bytes backend = 22;
  inline bool has_backend() const;
  inline void clear_backend();
  static const int kBackendFieldNumber = 22;
  inline const ::std::string& backend() const;
  inline void set_backend(const ::std::string& value);
  inline void set_backend(const char* value);
  inline void set_backend(const void* value, size_t size);
  inline ::std::string* mutable_backend();
  inline ::std::string* release_backend();
  inline void set_allocated_backend(::std::string* backend);

  // optional bool search = 23;
  inline bool has_search() const;
  inline void clear_search();
  static const int kSearchFieldNumber = 23;
  inline bool search() const;
  inline void set_search(bool value);

  // optional .RpbBucketProps.RpbReplMode repl = 24;
  inline bool has_repl() const;
  inline void clear_repl();
  static const int kReplFieldNumber = 24;
  inline ::RpbBucketProps_RpbReplMode repl() const;
  inline void set_repl(::RpbBucketProps_RpbReplMode value);

  // optional bytes search_index = 25;
  inline bool has_search_index() const;
  inline void clear_search_index();
  static const int kSearchIndexFieldNumber = 25;
  inline const ::std::string& search_index() const;
  inline void set_search_index(const ::std::string& value);
  inline void set_search_index(const char* value);
  inline void set_search_index(const void* value, size_t size);
  inline ::std::string* mutable_search_index();
  inline ::std::string* release_search_index();
  inline void set_allocated_search_index(::std::string* search_index);

  // optional bytes datatype = 26;
  inline bool has_datatype() const;
  inline void clear_datatype();
  static const int kDatatypeFieldNumber = 26;
  inline const ::std::string& datatype() const;
  inline void set_datatype(const ::std::string& value);
  inline void set_datatype(const char* value);
  inline void set_datatype(const void* value, size_t size);
  inline ::std::string* mutable_datatype();
  inline ::std::string* release_datatype();
  inline void set_allocated_datatype(::std::string* datatype);

  // optional bool consistent = 27;
  inline bool has_consistent() const;
  inline void clear_consistent();
  static const int kConsistentFieldNumber = 27;
  inline bool consistent() const;
  inline void set_consistent(bool value);

  // optional bool write_once = 28;
  inline bool has_write_once() const;
  inline void clear_write_once();
  static const int kWriteOnceFieldNumber = 28;
  inline bool write_once() const;
  inline void set_write_once(bool value);

  // @@protoc_insertion_point(class_scope:RpbBucketProps)
 private:
  inline void set_has_n_val();
  inline void clear_has_n_val();
  inline void set_has_allow_mult();
  inline void clear_has_allow_mult();
  inline void set_has_last_write_wins();
  inline void clear_has_last_write_wins();
  inline void set_has_has_precommit();
  inline void clear_has_has_precommit();
  inline void set_has_has_postcommit();
  inline void clear_has_has_postcommit();
  inline void set_has_chash_keyfun();
  inline void clear_has_chash_keyfun();
  inline void set_has_linkfun();
  inline void clear_has_linkfun();
  inline void set_has_old_vclock();
  inline void clear_has_old_vclock();
  inline void set_has_young_vclock();
  inline void clear_has_young_vclock();
  inline void set_has_big_vclock();
  inline void clear_has_big_vclock();
  inline void set_has_small_vclock();
  inline void clear_has_small_vclock();
  inline void set_has_pr();
  inline void clear_has_pr();
  inline void set_has_r();
  inline void clear_has_r();
  inline void set_has_w();
  inline void clear_has_w();
  inline void set_has_pw();
  inline void clear_has_pw();
  inline void set_has_dw();
  inline void clear_has_dw();
  inline void set_has_rw();
  inline void clear_has_rw();
  inline void set_has_basic_quorum();
  inline void clear_has_basic_quorum();
  inline void set_has_notfound_ok();
  inline void clear_has_notfound_ok();
  inline void set_has_backend();
  inline void clear_has_backend();
  inline void set_has_search();
  inline void clear_has_search();
  inline void set_has_repl();
  inline void clear_has_repl();
  inline void set_has_search_index();
  inline void clear_has_search_index();
  inline void set_has_datatype();
  inline void clear_has_datatype();
  inline void set_has_consistent();
  inline void clear_has_consistent();
  inline void set_has_write_once();
  inline void clear_has_write_once();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 n_val_;
  bool allow_mult_;
  bool last_write_wins_;
  bool has_precommit_;
  bool has_postcommit_;
  ::google::protobuf::RepeatedPtrField< ::RpbCommitHook > precommit_;
  ::google::protobuf::RepeatedPtrField< ::RpbCommitHook > postcommit_;
  ::RpbModFun* chash_keyfun_;
  ::RpbModFun* linkfun_;
  ::google::protobuf::uint32 old_vclock_;
  ::google::protobuf::uint32 young_vclock_;
  ::google::protobuf::uint32 big_vclock_;
  ::google::protobuf::uint32 small_vclock_;
  ::google::protobuf::uint32 pr_;
  ::google::protobuf::uint32 r_;
  ::google::protobuf::uint32 w_;
  ::google::protobuf::uint32 pw_;
  ::google::protobuf::uint32 dw_;
  ::google::protobuf::uint32 rw_;
  ::std::string* backend_;
  bool basic_quorum_;
  bool notfound_ok_;
  bool search_;
  bool consistent_;
  int repl_;
  ::std::string* search_index_;
  ::std::string* datatype_;
  bool write_once_;
  friend void  protobuf_AddDesc_riak_2eproto();
  friend void protobuf_AssignDesc_riak_2eproto();
  friend void protobuf_ShutdownFile_riak_2eproto();

  void InitAsDefaultInstance();
  static RpbBucketProps* default_instance_;
};
// -------------------------------------------------------------------

class RpbAuthReq : public ::google::protobuf::Message {
 public:
  RpbAuthReq();
  virtual ~RpbAuthReq();

  RpbAuthReq(const RpbAuthReq& from);

  inline RpbAuthReq& operator=(const RpbAuthReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RpbAuthReq& default_instance();

  void Swap(RpbAuthReq* other);

  // implements Message ----------------------------------------------

  RpbAuthReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RpbAuthReq& from);
  void MergeFrom(const RpbAuthReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes user = 1;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 1;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const void* value, size_t size);
  inline ::std::string* mutable_user();
  inline ::std::string* release_user();
  inline void set_allocated_user(::std::string* user);

  // required bytes password = 2;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 2;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const void* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:RpbAuthReq)
 private:
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_password();
  inline void clear_has_password();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* user_;
  ::std::string* password_;
  friend void  protobuf_AddDesc_riak_2eproto();
  friend void protobuf_AssignDesc_riak_2eproto();
  friend void protobuf_ShutdownFile_riak_2eproto();

  void InitAsDefaultInstance();
  static RpbAuthReq* default_instance_;
};
// -------------------------------------------------------------------

class RpbToggleEncodingReq : public ::google::protobuf::Message {
 public:
  RpbToggleEncodingReq();
  virtual ~RpbToggleEncodingReq();

  RpbToggleEncodingReq(const RpbToggleEncodingReq& from);

  inline RpbToggleEncodingReq& operator=(const RpbToggleEncodingReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RpbToggleEncodingReq& default_instance();

  void Swap(RpbToggleEncodingReq* other);

  // implements Message ----------------------------------------------

  RpbToggleEncodingReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RpbToggleEncodingReq& from);
  void MergeFrom(const RpbToggleEncodingReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool use_native = 1;
  inline bool has_use_native() const;
  inline void clear_use_native();
  static const int kUseNativeFieldNumber = 1;
  inline bool use_native() const;
  inline void set_use_native(bool value);

  // @@protoc_insertion_point(class_scope:RpbToggleEncodingReq)
 private:
  inline void set_has_use_native();
  inline void clear_has_use_native();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool use_native_;
  friend void  protobuf_AddDesc_riak_2eproto();
  friend void protobuf_AssignDesc_riak_2eproto();
  friend void protobuf_ShutdownFile_riak_2eproto();

  void InitAsDefaultInstance();
  static RpbToggleEncodingReq* default_instance_;
};
// -------------------------------------------------------------------

class RpbToggleEncodingResp : public ::google::protobuf::Message {
 public:
  RpbToggleEncodingResp();
  virtual ~RpbToggleEncodingResp();

  RpbToggleEncodingResp(const RpbToggleEncodingResp& from);

  inline RpbToggleEncodingResp& operator=(const RpbToggleEncodingResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RpbToggleEncodingResp& default_instance();

  void Swap(RpbToggleEncodingResp* other);

  // implements Message ----------------------------------------------

  RpbToggleEncodingResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RpbToggleEncodingResp& from);
  void MergeFrom(const RpbToggleEncodingResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool use_native = 1;
  inline bool has_use_native() const;
  inline void clear_use_native();
  static const int kUseNativeFieldNumber = 1;
  inline bool use_native() const;
  inline void set_use_native(bool value);

  // @@protoc_insertion_point(class_scope:RpbToggleEncodingResp)
 private:
  inline void set_has_use_native();
  inline void clear_has_use_native();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool use_native_;
  friend void  protobuf_AddDesc_riak_2eproto();
  friend void protobuf_AssignDesc_riak_2eproto();
  friend void protobuf_ShutdownFile_riak_2eproto();

  void InitAsDefaultInstance();
  static RpbToggleEncodingResp* default_instance_;
};
// ===================================================================


// ===================================================================

// RpbErrorResp

// required bytes errmsg = 1;
inline bool RpbErrorResp::has_errmsg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RpbErrorResp::set_has_errmsg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RpbErrorResp::clear_has_errmsg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RpbErrorResp::clear_errmsg() {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_->clear();
  }
  clear_has_errmsg();
}
inline const ::std::string& RpbErrorResp::errmsg() const {
  // @@protoc_insertion_point(field_get:RpbErrorResp.errmsg)
  return *errmsg_;
}
inline void RpbErrorResp::set_errmsg(const ::std::string& value) {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_ = new ::std::string;
  }
  errmsg_->assign(value);
  // @@protoc_insertion_point(field_set:RpbErrorResp.errmsg)
}
inline void RpbErrorResp::set_errmsg(const char* value) {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_ = new ::std::string;
  }
  errmsg_->assign(value);
  // @@protoc_insertion_point(field_set_char:RpbErrorResp.errmsg)
}
inline void RpbErrorResp::set_errmsg(const void* value, size_t size) {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_ = new ::std::string;
  }
  errmsg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RpbErrorResp.errmsg)
}
inline ::std::string* RpbErrorResp::mutable_errmsg() {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:RpbErrorResp.errmsg)
  return errmsg_;
}
inline ::std::string* RpbErrorResp::release_errmsg() {
  clear_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = errmsg_;
    errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RpbErrorResp::set_allocated_errmsg(::std::string* errmsg) {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errmsg_;
  }
  if (errmsg) {
    set_has_errmsg();
    errmsg_ = errmsg;
  } else {
    clear_has_errmsg();
    errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:RpbErrorResp.errmsg)
}

// required uint32 errcode = 2;
inline bool RpbErrorResp::has_errcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RpbErrorResp::set_has_errcode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RpbErrorResp::clear_has_errcode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RpbErrorResp::clear_errcode() {
  errcode_ = 0u;
  clear_has_errcode();
}
inline ::google::protobuf::uint32 RpbErrorResp::errcode() const {
  // @@protoc_insertion_point(field_get:RpbErrorResp.errcode)
  return errcode_;
}
inline void RpbErrorResp::set_errcode(::google::protobuf::uint32 value) {
  set_has_errcode();
  errcode_ = value;
  // @@protoc_insertion_point(field_set:RpbErrorResp.errcode)
}

// -------------------------------------------------------------------

// RpbGetServerInfoResp

// optional bytes node = 1;
inline bool RpbGetServerInfoResp::has_node() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RpbGetServerInfoResp::set_has_node() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RpbGetServerInfoResp::clear_has_node() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RpbGetServerInfoResp::clear_node() {
  if (node_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    node_->clear();
  }
  clear_has_node();
}
inline const ::std::string& RpbGetServerInfoResp::node() const {
  // @@protoc_insertion_point(field_get:RpbGetServerInfoResp.node)
  return *node_;
}
inline void RpbGetServerInfoResp::set_node(const ::std::string& value) {
  set_has_node();
  if (node_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    node_ = new ::std::string;
  }
  node_->assign(value);
  // @@protoc_insertion_point(field_set:RpbGetServerInfoResp.node)
}
inline void RpbGetServerInfoResp::set_node(const char* value) {
  set_has_node();
  if (node_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    node_ = new ::std::string;
  }
  node_->assign(value);
  // @@protoc_insertion_point(field_set_char:RpbGetServerInfoResp.node)
}
inline void RpbGetServerInfoResp::set_node(const void* value, size_t size) {
  set_has_node();
  if (node_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    node_ = new ::std::string;
  }
  node_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RpbGetServerInfoResp.node)
}
inline ::std::string* RpbGetServerInfoResp::mutable_node() {
  set_has_node();
  if (node_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    node_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:RpbGetServerInfoResp.node)
  return node_;
}
inline ::std::string* RpbGetServerInfoResp::release_node() {
  clear_has_node();
  if (node_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = node_;
    node_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RpbGetServerInfoResp::set_allocated_node(::std::string* node) {
  if (node_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete node_;
  }
  if (node) {
    set_has_node();
    node_ = node;
  } else {
    clear_has_node();
    node_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:RpbGetServerInfoResp.node)
}

// optional bytes server_version = 2;
inline bool RpbGetServerInfoResp::has_server_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RpbGetServerInfoResp::set_has_server_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RpbGetServerInfoResp::clear_has_server_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RpbGetServerInfoResp::clear_server_version() {
  if (server_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    server_version_->clear();
  }
  clear_has_server_version();
}
inline const ::std::string& RpbGetServerInfoResp::server_version() const {
  // @@protoc_insertion_point(field_get:RpbGetServerInfoResp.server_version)
  return *server_version_;
}
inline void RpbGetServerInfoResp::set_server_version(const ::std::string& value) {
  set_has_server_version();
  if (server_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    server_version_ = new ::std::string;
  }
  server_version_->assign(value);
  // @@protoc_insertion_point(field_set:RpbGetServerInfoResp.server_version)
}
inline void RpbGetServerInfoResp::set_server_version(const char* value) {
  set_has_server_version();
  if (server_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    server_version_ = new ::std::string;
  }
  server_version_->assign(value);
  // @@protoc_insertion_point(field_set_char:RpbGetServerInfoResp.server_version)
}
inline void RpbGetServerInfoResp::set_server_version(const void* value, size_t size) {
  set_has_server_version();
  if (server_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    server_version_ = new ::std::string;
  }
  server_version_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RpbGetServerInfoResp.server_version)
}
inline ::std::string* RpbGetServerInfoResp::mutable_server_version() {
  set_has_server_version();
  if (server_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    server_version_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:RpbGetServerInfoResp.server_version)
  return server_version_;
}
inline ::std::string* RpbGetServerInfoResp::release_server_version() {
  clear_has_server_version();
  if (server_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = server_version_;
    server_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RpbGetServerInfoResp::set_allocated_server_version(::std::string* server_version) {
  if (server_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete server_version_;
  }
  if (server_version) {
    set_has_server_version();
    server_version_ = server_version;
  } else {
    clear_has_server_version();
    server_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:RpbGetServerInfoResp.server_version)
}

// -------------------------------------------------------------------

// RpbPair

// required bytes key = 1;
inline bool RpbPair::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RpbPair::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RpbPair::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RpbPair::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& RpbPair::key() const {
  // @@protoc_insertion_point(field_get:RpbPair.key)
  return *key_;
}
inline void RpbPair::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set:RpbPair.key)
}
inline void RpbPair::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set_char:RpbPair.key)
}
inline void RpbPair::set_key(const void* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RpbPair.key)
}
inline ::std::string* RpbPair::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:RpbPair.key)
  return key_;
}
inline ::std::string* RpbPair::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RpbPair::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:RpbPair.key)
}

// optional bytes value = 2;
inline bool RpbPair::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RpbPair::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RpbPair::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RpbPair::clear_value() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& RpbPair::value() const {
  // @@protoc_insertion_point(field_get:RpbPair.value)
  return *value_;
}
inline void RpbPair::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set:RpbPair.value)
}
inline void RpbPair::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set_char:RpbPair.value)
}
inline void RpbPair::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RpbPair.value)
}
inline ::std::string* RpbPair::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:RpbPair.value)
  return value_;
}
inline ::std::string* RpbPair::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RpbPair::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:RpbPair.value)
}

// -------------------------------------------------------------------

// RpbGetBucketReq

// required bytes bucket = 1;
inline bool RpbGetBucketReq::has_bucket() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RpbGetBucketReq::set_has_bucket() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RpbGetBucketReq::clear_has_bucket() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RpbGetBucketReq::clear_bucket() {
  if (bucket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bucket_->clear();
  }
  clear_has_bucket();
}
inline const ::std::string& RpbGetBucketReq::bucket() const {
  // @@protoc_insertion_point(field_get:RpbGetBucketReq.bucket)
  return *bucket_;
}
inline void RpbGetBucketReq::set_bucket(const ::std::string& value) {
  set_has_bucket();
  if (bucket_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bucket_ = new ::std::string;
  }
  bucket_->assign(value);
  // @@protoc_insertion_point(field_set:RpbGetBucketReq.bucket)
}
inline void RpbGetBucketReq::set_bucket(const char* value) {
  set_has_bucket();
  if (bucket_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bucket_ = new ::std::string;
  }
  bucket_->assign(value);
  // @@protoc_insertion_point(field_set_char:RpbGetBucketReq.bucket)
}
inline void RpbGetBucketReq::set_bucket(const void* value, size_t size) {
  set_has_bucket();
  if (bucket_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bucket_ = new ::std::string;
  }
  bucket_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RpbGetBucketReq.bucket)
}
inline ::std::string* RpbGetBucketReq::mutable_bucket() {
  set_has_bucket();
  if (bucket_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bucket_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:RpbGetBucketReq.bucket)
  return bucket_;
}
inline ::std::string* RpbGetBucketReq::release_bucket() {
  clear_has_bucket();
  if (bucket_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = bucket_;
    bucket_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RpbGetBucketReq::set_allocated_bucket(::std::string* bucket) {
  if (bucket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bucket_;
  }
  if (bucket) {
    set_has_bucket();
    bucket_ = bucket;
  } else {
    clear_has_bucket();
    bucket_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:RpbGetBucketReq.bucket)
}

// optional bytes type = 2;
inline bool RpbGetBucketReq::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RpbGetBucketReq::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RpbGetBucketReq::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RpbGetBucketReq::clear_type() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& RpbGetBucketReq::type() const {
  // @@protoc_insertion_point(field_get:RpbGetBucketReq.type)
  return *type_;
}
inline void RpbGetBucketReq::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set:RpbGetBucketReq.type)
}
inline void RpbGetBucketReq::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set_char:RpbGetBucketReq.type)
}
inline void RpbGetBucketReq::set_type(const void* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RpbGetBucketReq.type)
}
inline ::std::string* RpbGetBucketReq::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:RpbGetBucketReq.type)
  return type_;
}
inline ::std::string* RpbGetBucketReq::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RpbGetBucketReq::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:RpbGetBucketReq.type)
}

// -------------------------------------------------------------------

// RpbGetBucketResp

// required .RpbBucketProps props = 1;
inline bool RpbGetBucketResp::has_props() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RpbGetBucketResp::set_has_props() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RpbGetBucketResp::clear_has_props() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RpbGetBucketResp::clear_props() {
  if (props_ != NULL) props_->::RpbBucketProps::Clear();
  clear_has_props();
}
inline const ::RpbBucketProps& RpbGetBucketResp::props() const {
  // @@protoc_insertion_point(field_get:RpbGetBucketResp.props)
  return props_ != NULL ? *props_ : *default_instance_->props_;
}
inline ::RpbBucketProps* RpbGetBucketResp::mutable_props() {
  set_has_props();
  if (props_ == NULL) props_ = new ::RpbBucketProps;
  // @@protoc_insertion_point(field_mutable:RpbGetBucketResp.props)
  return props_;
}
inline ::RpbBucketProps* RpbGetBucketResp::release_props() {
  clear_has_props();
  ::RpbBucketProps* temp = props_;
  props_ = NULL;
  return temp;
}
inline void RpbGetBucketResp::set_allocated_props(::RpbBucketProps* props) {
  delete props_;
  props_ = props;
  if (props) {
    set_has_props();
  } else {
    clear_has_props();
  }
  // @@protoc_insertion_point(field_set_allocated:RpbGetBucketResp.props)
}

// -------------------------------------------------------------------

// RpbSetBucketReq

// required bytes bucket = 1;
inline bool RpbSetBucketReq::has_bucket() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RpbSetBucketReq::set_has_bucket() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RpbSetBucketReq::clear_has_bucket() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RpbSetBucketReq::clear_bucket() {
  if (bucket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bucket_->clear();
  }
  clear_has_bucket();
}
inline const ::std::string& RpbSetBucketReq::bucket() const {
  // @@protoc_insertion_point(field_get:RpbSetBucketReq.bucket)
  return *bucket_;
}
inline void RpbSetBucketReq::set_bucket(const ::std::string& value) {
  set_has_bucket();
  if (bucket_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bucket_ = new ::std::string;
  }
  bucket_->assign(value);
  // @@protoc_insertion_point(field_set:RpbSetBucketReq.bucket)
}
inline void RpbSetBucketReq::set_bucket(const char* value) {
  set_has_bucket();
  if (bucket_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bucket_ = new ::std::string;
  }
  bucket_->assign(value);
  // @@protoc_insertion_point(field_set_char:RpbSetBucketReq.bucket)
}
inline void RpbSetBucketReq::set_bucket(const void* value, size_t size) {
  set_has_bucket();
  if (bucket_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bucket_ = new ::std::string;
  }
  bucket_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RpbSetBucketReq.bucket)
}
inline ::std::string* RpbSetBucketReq::mutable_bucket() {
  set_has_bucket();
  if (bucket_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bucket_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:RpbSetBucketReq.bucket)
  return bucket_;
}
inline ::std::string* RpbSetBucketReq::release_bucket() {
  clear_has_bucket();
  if (bucket_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = bucket_;
    bucket_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RpbSetBucketReq::set_allocated_bucket(::std::string* bucket) {
  if (bucket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bucket_;
  }
  if (bucket) {
    set_has_bucket();
    bucket_ = bucket;
  } else {
    clear_has_bucket();
    bucket_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:RpbSetBucketReq.bucket)
}

// required .RpbBucketProps props = 2;
inline bool RpbSetBucketReq::has_props() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RpbSetBucketReq::set_has_props() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RpbSetBucketReq::clear_has_props() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RpbSetBucketReq::clear_props() {
  if (props_ != NULL) props_->::RpbBucketProps::Clear();
  clear_has_props();
}
inline const ::RpbBucketProps& RpbSetBucketReq::props() const {
  // @@protoc_insertion_point(field_get:RpbSetBucketReq.props)
  return props_ != NULL ? *props_ : *default_instance_->props_;
}
inline ::RpbBucketProps* RpbSetBucketReq::mutable_props() {
  set_has_props();
  if (props_ == NULL) props_ = new ::RpbBucketProps;
  // @@protoc_insertion_point(field_mutable:RpbSetBucketReq.props)
  return props_;
}
inline ::RpbBucketProps* RpbSetBucketReq::release_props() {
  clear_has_props();
  ::RpbBucketProps* temp = props_;
  props_ = NULL;
  return temp;
}
inline void RpbSetBucketReq::set_allocated_props(::RpbBucketProps* props) {
  delete props_;
  props_ = props;
  if (props) {
    set_has_props();
  } else {
    clear_has_props();
  }
  // @@protoc_insertion_point(field_set_allocated:RpbSetBucketReq.props)
}

// optional bytes type = 3;
inline bool RpbSetBucketReq::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RpbSetBucketReq::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RpbSetBucketReq::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RpbSetBucketReq::clear_type() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& RpbSetBucketReq::type() const {
  // @@protoc_insertion_point(field_get:RpbSetBucketReq.type)
  return *type_;
}
inline void RpbSetBucketReq::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set:RpbSetBucketReq.type)
}
inline void RpbSetBucketReq::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set_char:RpbSetBucketReq.type)
}
inline void RpbSetBucketReq::set_type(const void* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RpbSetBucketReq.type)
}
inline ::std::string* RpbSetBucketReq::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:RpbSetBucketReq.type)
  return type_;
}
inline ::std::string* RpbSetBucketReq::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RpbSetBucketReq::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:RpbSetBucketReq.type)
}

// -------------------------------------------------------------------

// RpbResetBucketReq

// required bytes bucket = 1;
inline bool RpbResetBucketReq::has_bucket() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RpbResetBucketReq::set_has_bucket() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RpbResetBucketReq::clear_has_bucket() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RpbResetBucketReq::clear_bucket() {
  if (bucket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bucket_->clear();
  }
  clear_has_bucket();
}
inline const ::std::string& RpbResetBucketReq::bucket() const {
  // @@protoc_insertion_point(field_get:RpbResetBucketReq.bucket)
  return *bucket_;
}
inline void RpbResetBucketReq::set_bucket(const ::std::string& value) {
  set_has_bucket();
  if (bucket_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bucket_ = new ::std::string;
  }
  bucket_->assign(value);
  // @@protoc_insertion_point(field_set:RpbResetBucketReq.bucket)
}
inline void RpbResetBucketReq::set_bucket(const char* value) {
  set_has_bucket();
  if (bucket_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bucket_ = new ::std::string;
  }
  bucket_->assign(value);
  // @@protoc_insertion_point(field_set_char:RpbResetBucketReq.bucket)
}
inline void RpbResetBucketReq::set_bucket(const void* value, size_t size) {
  set_has_bucket();
  if (bucket_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bucket_ = new ::std::string;
  }
  bucket_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RpbResetBucketReq.bucket)
}
inline ::std::string* RpbResetBucketReq::mutable_bucket() {
  set_has_bucket();
  if (bucket_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bucket_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:RpbResetBucketReq.bucket)
  return bucket_;
}
inline ::std::string* RpbResetBucketReq::release_bucket() {
  clear_has_bucket();
  if (bucket_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = bucket_;
    bucket_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RpbResetBucketReq::set_allocated_bucket(::std::string* bucket) {
  if (bucket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bucket_;
  }
  if (bucket) {
    set_has_bucket();
    bucket_ = bucket;
  } else {
    clear_has_bucket();
    bucket_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:RpbResetBucketReq.bucket)
}

// optional bytes type = 2;
inline bool RpbResetBucketReq::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RpbResetBucketReq::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RpbResetBucketReq::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RpbResetBucketReq::clear_type() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& RpbResetBucketReq::type() const {
  // @@protoc_insertion_point(field_get:RpbResetBucketReq.type)
  return *type_;
}
inline void RpbResetBucketReq::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set:RpbResetBucketReq.type)
}
inline void RpbResetBucketReq::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set_char:RpbResetBucketReq.type)
}
inline void RpbResetBucketReq::set_type(const void* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RpbResetBucketReq.type)
}
inline ::std::string* RpbResetBucketReq::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:RpbResetBucketReq.type)
  return type_;
}
inline ::std::string* RpbResetBucketReq::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RpbResetBucketReq::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:RpbResetBucketReq.type)
}

// -------------------------------------------------------------------

// RpbGetBucketTypeReq

// required bytes type = 1;
inline bool RpbGetBucketTypeReq::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RpbGetBucketTypeReq::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RpbGetBucketTypeReq::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RpbGetBucketTypeReq::clear_type() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& RpbGetBucketTypeReq::type() const {
  // @@protoc_insertion_point(field_get:RpbGetBucketTypeReq.type)
  return *type_;
}
inline void RpbGetBucketTypeReq::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set:RpbGetBucketTypeReq.type)
}
inline void RpbGetBucketTypeReq::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set_char:RpbGetBucketTypeReq.type)
}
inline void RpbGetBucketTypeReq::set_type(const void* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RpbGetBucketTypeReq.type)
}
inline ::std::string* RpbGetBucketTypeReq::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:RpbGetBucketTypeReq.type)
  return type_;
}
inline ::std::string* RpbGetBucketTypeReq::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RpbGetBucketTypeReq::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:RpbGetBucketTypeReq.type)
}

// -------------------------------------------------------------------

// RpbSetBucketTypeReq

// required bytes type = 1;
inline bool RpbSetBucketTypeReq::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RpbSetBucketTypeReq::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RpbSetBucketTypeReq::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RpbSetBucketTypeReq::clear_type() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& RpbSetBucketTypeReq::type() const {
  // @@protoc_insertion_point(field_get:RpbSetBucketTypeReq.type)
  return *type_;
}
inline void RpbSetBucketTypeReq::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set:RpbSetBucketTypeReq.type)
}
inline void RpbSetBucketTypeReq::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set_char:RpbSetBucketTypeReq.type)
}
inline void RpbSetBucketTypeReq::set_type(const void* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RpbSetBucketTypeReq.type)
}
inline ::std::string* RpbSetBucketTypeReq::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:RpbSetBucketTypeReq.type)
  return type_;
}
inline ::std::string* RpbSetBucketTypeReq::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RpbSetBucketTypeReq::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:RpbSetBucketTypeReq.type)
}

// required .RpbBucketProps props = 2;
inline bool RpbSetBucketTypeReq::has_props() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RpbSetBucketTypeReq::set_has_props() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RpbSetBucketTypeReq::clear_has_props() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RpbSetBucketTypeReq::clear_props() {
  if (props_ != NULL) props_->::RpbBucketProps::Clear();
  clear_has_props();
}
inline const ::RpbBucketProps& RpbSetBucketTypeReq::props() const {
  // @@protoc_insertion_point(field_get:RpbSetBucketTypeReq.props)
  return props_ != NULL ? *props_ : *default_instance_->props_;
}
inline ::RpbBucketProps* RpbSetBucketTypeReq::mutable_props() {
  set_has_props();
  if (props_ == NULL) props_ = new ::RpbBucketProps;
  // @@protoc_insertion_point(field_mutable:RpbSetBucketTypeReq.props)
  return props_;
}
inline ::RpbBucketProps* RpbSetBucketTypeReq::release_props() {
  clear_has_props();
  ::RpbBucketProps* temp = props_;
  props_ = NULL;
  return temp;
}
inline void RpbSetBucketTypeReq::set_allocated_props(::RpbBucketProps* props) {
  delete props_;
  props_ = props;
  if (props) {
    set_has_props();
  } else {
    clear_has_props();
  }
  // @@protoc_insertion_point(field_set_allocated:RpbSetBucketTypeReq.props)
}

// -------------------------------------------------------------------

// RpbModFun

// required bytes module = 1;
inline bool RpbModFun::has_module() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RpbModFun::set_has_module() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RpbModFun::clear_has_module() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RpbModFun::clear_module() {
  if (module_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    module_->clear();
  }
  clear_has_module();
}
inline const ::std::string& RpbModFun::module() const {
  // @@protoc_insertion_point(field_get:RpbModFun.module)
  return *module_;
}
inline void RpbModFun::set_module(const ::std::string& value) {
  set_has_module();
  if (module_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    module_ = new ::std::string;
  }
  module_->assign(value);
  // @@protoc_insertion_point(field_set:RpbModFun.module)
}
inline void RpbModFun::set_module(const char* value) {
  set_has_module();
  if (module_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    module_ = new ::std::string;
  }
  module_->assign(value);
  // @@protoc_insertion_point(field_set_char:RpbModFun.module)
}
inline void RpbModFun::set_module(const void* value, size_t size) {
  set_has_module();
  if (module_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    module_ = new ::std::string;
  }
  module_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RpbModFun.module)
}
inline ::std::string* RpbModFun::mutable_module() {
  set_has_module();
  if (module_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    module_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:RpbModFun.module)
  return module_;
}
inline ::std::string* RpbModFun::release_module() {
  clear_has_module();
  if (module_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = module_;
    module_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RpbModFun::set_allocated_module(::std::string* module) {
  if (module_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete module_;
  }
  if (module) {
    set_has_module();
    module_ = module;
  } else {
    clear_has_module();
    module_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:RpbModFun.module)
}

// required bytes function = 2;
inline bool RpbModFun::has_function() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RpbModFun::set_has_function() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RpbModFun::clear_has_function() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RpbModFun::clear_function() {
  if (function_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    function_->clear();
  }
  clear_has_function();
}
inline const ::std::string& RpbModFun::function() const {
  // @@protoc_insertion_point(field_get:RpbModFun.function)
  return *function_;
}
inline void RpbModFun::set_function(const ::std::string& value) {
  set_has_function();
  if (function_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    function_ = new ::std::string;
  }
  function_->assign(value);
  // @@protoc_insertion_point(field_set:RpbModFun.function)
}
inline void RpbModFun::set_function(const char* value) {
  set_has_function();
  if (function_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    function_ = new ::std::string;
  }
  function_->assign(value);
  // @@protoc_insertion_point(field_set_char:RpbModFun.function)
}
inline void RpbModFun::set_function(const void* value, size_t size) {
  set_has_function();
  if (function_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    function_ = new ::std::string;
  }
  function_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RpbModFun.function)
}
inline ::std::string* RpbModFun::mutable_function() {
  set_has_function();
  if (function_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    function_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:RpbModFun.function)
  return function_;
}
inline ::std::string* RpbModFun::release_function() {
  clear_has_function();
  if (function_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = function_;
    function_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RpbModFun::set_allocated_function(::std::string* function) {
  if (function_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete function_;
  }
  if (function) {
    set_has_function();
    function_ = function;
  } else {
    clear_has_function();
    function_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:RpbModFun.function)
}

// -------------------------------------------------------------------

// RpbCommitHook

// optional .RpbModFun modfun = 1;
inline bool RpbCommitHook::has_modfun() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RpbCommitHook::set_has_modfun() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RpbCommitHook::clear_has_modfun() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RpbCommitHook::clear_modfun() {
  if (modfun_ != NULL) modfun_->::RpbModFun::Clear();
  clear_has_modfun();
}
inline const ::RpbModFun& RpbCommitHook::modfun() const {
  // @@protoc_insertion_point(field_get:RpbCommitHook.modfun)
  return modfun_ != NULL ? *modfun_ : *default_instance_->modfun_;
}
inline ::RpbModFun* RpbCommitHook::mutable_modfun() {
  set_has_modfun();
  if (modfun_ == NULL) modfun_ = new ::RpbModFun;
  // @@protoc_insertion_point(field_mutable:RpbCommitHook.modfun)
  return modfun_;
}
inline ::RpbModFun* RpbCommitHook::release_modfun() {
  clear_has_modfun();
  ::RpbModFun* temp = modfun_;
  modfun_ = NULL;
  return temp;
}
inline void RpbCommitHook::set_allocated_modfun(::RpbModFun* modfun) {
  delete modfun_;
  modfun_ = modfun;
  if (modfun) {
    set_has_modfun();
  } else {
    clear_has_modfun();
  }
  // @@protoc_insertion_point(field_set_allocated:RpbCommitHook.modfun)
}

// optional bytes name = 2;
inline bool RpbCommitHook::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RpbCommitHook::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RpbCommitHook::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RpbCommitHook::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& RpbCommitHook::name() const {
  // @@protoc_insertion_point(field_get:RpbCommitHook.name)
  return *name_;
}
inline void RpbCommitHook::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:RpbCommitHook.name)
}
inline void RpbCommitHook::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:RpbCommitHook.name)
}
inline void RpbCommitHook::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RpbCommitHook.name)
}
inline ::std::string* RpbCommitHook::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:RpbCommitHook.name)
  return name_;
}
inline ::std::string* RpbCommitHook::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RpbCommitHook::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:RpbCommitHook.name)
}

// -------------------------------------------------------------------

// RpbBucketProps

// optional uint32 n_val = 1;
inline bool RpbBucketProps::has_n_val() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RpbBucketProps::set_has_n_val() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RpbBucketProps::clear_has_n_val() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RpbBucketProps::clear_n_val() {
  n_val_ = 0u;
  clear_has_n_val();
}
inline ::google::protobuf::uint32 RpbBucketProps::n_val() const {
  // @@protoc_insertion_point(field_get:RpbBucketProps.n_val)
  return n_val_;
}
inline void RpbBucketProps::set_n_val(::google::protobuf::uint32 value) {
  set_has_n_val();
  n_val_ = value;
  // @@protoc_insertion_point(field_set:RpbBucketProps.n_val)
}

// optional bool allow_mult = 2;
inline bool RpbBucketProps::has_allow_mult() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RpbBucketProps::set_has_allow_mult() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RpbBucketProps::clear_has_allow_mult() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RpbBucketProps::clear_allow_mult() {
  allow_mult_ = false;
  clear_has_allow_mult();
}
inline bool RpbBucketProps::allow_mult() const {
  // @@protoc_insertion_point(field_get:RpbBucketProps.allow_mult)
  return allow_mult_;
}
inline void RpbBucketProps::set_allow_mult(bool value) {
  set_has_allow_mult();
  allow_mult_ = value;
  // @@protoc_insertion_point(field_set:RpbBucketProps.allow_mult)
}

// optional bool last_write_wins = 3;
inline bool RpbBucketProps::has_last_write_wins() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RpbBucketProps::set_has_last_write_wins() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RpbBucketProps::clear_has_last_write_wins() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RpbBucketProps::clear_last_write_wins() {
  last_write_wins_ = false;
  clear_has_last_write_wins();
}
inline bool RpbBucketProps::last_write_wins() const {
  // @@protoc_insertion_point(field_get:RpbBucketProps.last_write_wins)
  return last_write_wins_;
}
inline void RpbBucketProps::set_last_write_wins(bool value) {
  set_has_last_write_wins();
  last_write_wins_ = value;
  // @@protoc_insertion_point(field_set:RpbBucketProps.last_write_wins)
}

// repeated .RpbCommitHook precommit = 4;
inline int RpbBucketProps::precommit_size() const {
  return precommit_.size();
}
inline void RpbBucketProps::clear_precommit() {
  precommit_.Clear();
}
inline const ::RpbCommitHook& RpbBucketProps::precommit(int index) const {
  // @@protoc_insertion_point(field_get:RpbBucketProps.precommit)
  return precommit_.Get(index);
}
inline ::RpbCommitHook* RpbBucketProps::mutable_precommit(int index) {
  // @@protoc_insertion_point(field_mutable:RpbBucketProps.precommit)
  return precommit_.Mutable(index);
}
inline ::RpbCommitHook* RpbBucketProps::add_precommit() {
  // @@protoc_insertion_point(field_add:RpbBucketProps.precommit)
  return precommit_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::RpbCommitHook >&
RpbBucketProps::precommit() const {
  // @@protoc_insertion_point(field_list:RpbBucketProps.precommit)
  return precommit_;
}
inline ::google::protobuf::RepeatedPtrField< ::RpbCommitHook >*
RpbBucketProps::mutable_precommit() {
  // @@protoc_insertion_point(field_mutable_list:RpbBucketProps.precommit)
  return &precommit_;
}

// optional bool has_precommit = 5 [default = false];
inline bool RpbBucketProps::has_has_precommit() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RpbBucketProps::set_has_has_precommit() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RpbBucketProps::clear_has_has_precommit() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RpbBucketProps::clear_has_precommit() {
  has_precommit_ = false;
  clear_has_has_precommit();
}
inline bool RpbBucketProps::has_precommit() const {
  // @@protoc_insertion_point(field_get:RpbBucketProps.has_precommit)
  return has_precommit_;
}
inline void RpbBucketProps::set_has_precommit(bool value) {
  set_has_has_precommit();
  has_precommit_ = value;
  // @@protoc_insertion_point(field_set:RpbBucketProps.has_precommit)
}

// repeated .RpbCommitHook postcommit = 6;
inline int RpbBucketProps::postcommit_size() const {
  return postcommit_.size();
}
inline void RpbBucketProps::clear_postcommit() {
  postcommit_.Clear();
}
inline const ::RpbCommitHook& RpbBucketProps::postcommit(int index) const {
  // @@protoc_insertion_point(field_get:RpbBucketProps.postcommit)
  return postcommit_.Get(index);
}
inline ::RpbCommitHook* RpbBucketProps::mutable_postcommit(int index) {
  // @@protoc_insertion_point(field_mutable:RpbBucketProps.postcommit)
  return postcommit_.Mutable(index);
}
inline ::RpbCommitHook* RpbBucketProps::add_postcommit() {
  // @@protoc_insertion_point(field_add:RpbBucketProps.postcommit)
  return postcommit_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::RpbCommitHook >&
RpbBucketProps::postcommit() const {
  // @@protoc_insertion_point(field_list:RpbBucketProps.postcommit)
  return postcommit_;
}
inline ::google::protobuf::RepeatedPtrField< ::RpbCommitHook >*
RpbBucketProps::mutable_postcommit() {
  // @@protoc_insertion_point(field_mutable_list:RpbBucketProps.postcommit)
  return &postcommit_;
}

// optional bool has_postcommit = 7 [default = false];
inline bool RpbBucketProps::has_has_postcommit() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RpbBucketProps::set_has_has_postcommit() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RpbBucketProps::clear_has_has_postcommit() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RpbBucketProps::clear_has_postcommit() {
  has_postcommit_ = false;
  clear_has_has_postcommit();
}
inline bool RpbBucketProps::has_postcommit() const {
  // @@protoc_insertion_point(field_get:RpbBucketProps.has_postcommit)
  return has_postcommit_;
}
inline void RpbBucketProps::set_has_postcommit(bool value) {
  set_has_has_postcommit();
  has_postcommit_ = value;
  // @@protoc_insertion_point(field_set:RpbBucketProps.has_postcommit)
}

// optional .RpbModFun chash_keyfun = 8;
inline bool RpbBucketProps::has_chash_keyfun() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RpbBucketProps::set_has_chash_keyfun() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RpbBucketProps::clear_has_chash_keyfun() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RpbBucketProps::clear_chash_keyfun() {
  if (chash_keyfun_ != NULL) chash_keyfun_->::RpbModFun::Clear();
  clear_has_chash_keyfun();
}
inline const ::RpbModFun& RpbBucketProps::chash_keyfun() const {
  // @@protoc_insertion_point(field_get:RpbBucketProps.chash_keyfun)
  return chash_keyfun_ != NULL ? *chash_keyfun_ : *default_instance_->chash_keyfun_;
}
inline ::RpbModFun* RpbBucketProps::mutable_chash_keyfun() {
  set_has_chash_keyfun();
  if (chash_keyfun_ == NULL) chash_keyfun_ = new ::RpbModFun;
  // @@protoc_insertion_point(field_mutable:RpbBucketProps.chash_keyfun)
  return chash_keyfun_;
}
inline ::RpbModFun* RpbBucketProps::release_chash_keyfun() {
  clear_has_chash_keyfun();
  ::RpbModFun* temp = chash_keyfun_;
  chash_keyfun_ = NULL;
  return temp;
}
inline void RpbBucketProps::set_allocated_chash_keyfun(::RpbModFun* chash_keyfun) {
  delete chash_keyfun_;
  chash_keyfun_ = chash_keyfun;
  if (chash_keyfun) {
    set_has_chash_keyfun();
  } else {
    clear_has_chash_keyfun();
  }
  // @@protoc_insertion_point(field_set_allocated:RpbBucketProps.chash_keyfun)
}

// optional .RpbModFun linkfun = 9;
inline bool RpbBucketProps::has_linkfun() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RpbBucketProps::set_has_linkfun() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RpbBucketProps::clear_has_linkfun() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RpbBucketProps::clear_linkfun() {
  if (linkfun_ != NULL) linkfun_->::RpbModFun::Clear();
  clear_has_linkfun();
}
inline const ::RpbModFun& RpbBucketProps::linkfun() const {
  // @@protoc_insertion_point(field_get:RpbBucketProps.linkfun)
  return linkfun_ != NULL ? *linkfun_ : *default_instance_->linkfun_;
}
inline ::RpbModFun* RpbBucketProps::mutable_linkfun() {
  set_has_linkfun();
  if (linkfun_ == NULL) linkfun_ = new ::RpbModFun;
  // @@protoc_insertion_point(field_mutable:RpbBucketProps.linkfun)
  return linkfun_;
}
inline ::RpbModFun* RpbBucketProps::release_linkfun() {
  clear_has_linkfun();
  ::RpbModFun* temp = linkfun_;
  linkfun_ = NULL;
  return temp;
}
inline void RpbBucketProps::set_allocated_linkfun(::RpbModFun* linkfun) {
  delete linkfun_;
  linkfun_ = linkfun;
  if (linkfun) {
    set_has_linkfun();
  } else {
    clear_has_linkfun();
  }
  // @@protoc_insertion_point(field_set_allocated:RpbBucketProps.linkfun)
}

// optional uint32 old_vclock = 10;
inline bool RpbBucketProps::has_old_vclock() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RpbBucketProps::set_has_old_vclock() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RpbBucketProps::clear_has_old_vclock() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RpbBucketProps::clear_old_vclock() {
  old_vclock_ = 0u;
  clear_has_old_vclock();
}
inline ::google::protobuf::uint32 RpbBucketProps::old_vclock() const {
  // @@protoc_insertion_point(field_get:RpbBucketProps.old_vclock)
  return old_vclock_;
}
inline void RpbBucketProps::set_old_vclock(::google::protobuf::uint32 value) {
  set_has_old_vclock();
  old_vclock_ = value;
  // @@protoc_insertion_point(field_set:RpbBucketProps.old_vclock)
}

// optional uint32 young_vclock = 11;
inline bool RpbBucketProps::has_young_vclock() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RpbBucketProps::set_has_young_vclock() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RpbBucketProps::clear_has_young_vclock() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RpbBucketProps::clear_young_vclock() {
  young_vclock_ = 0u;
  clear_has_young_vclock();
}
inline ::google::protobuf::uint32 RpbBucketProps::young_vclock() const {
  // @@protoc_insertion_point(field_get:RpbBucketProps.young_vclock)
  return young_vclock_;
}
inline void RpbBucketProps::set_young_vclock(::google::protobuf::uint32 value) {
  set_has_young_vclock();
  young_vclock_ = value;
  // @@protoc_insertion_point(field_set:RpbBucketProps.young_vclock)
}

// optional uint32 big_vclock = 12;
inline bool RpbBucketProps::has_big_vclock() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RpbBucketProps::set_has_big_vclock() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RpbBucketProps::clear_has_big_vclock() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RpbBucketProps::clear_big_vclock() {
  big_vclock_ = 0u;
  clear_has_big_vclock();
}
inline ::google::protobuf::uint32 RpbBucketProps::big_vclock() const {
  // @@protoc_insertion_point(field_get:RpbBucketProps.big_vclock)
  return big_vclock_;
}
inline void RpbBucketProps::set_big_vclock(::google::protobuf::uint32 value) {
  set_has_big_vclock();
  big_vclock_ = value;
  // @@protoc_insertion_point(field_set:RpbBucketProps.big_vclock)
}

// optional uint32 small_vclock = 13;
inline bool RpbBucketProps::has_small_vclock() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RpbBucketProps::set_has_small_vclock() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RpbBucketProps::clear_has_small_vclock() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RpbBucketProps::clear_small_vclock() {
  small_vclock_ = 0u;
  clear_has_small_vclock();
}
inline ::google::protobuf::uint32 RpbBucketProps::small_vclock() const {
  // @@protoc_insertion_point(field_get:RpbBucketProps.small_vclock)
  return small_vclock_;
}
inline void RpbBucketProps::set_small_vclock(::google::protobuf::uint32 value) {
  set_has_small_vclock();
  small_vclock_ = value;
  // @@protoc_insertion_point(field_set:RpbBucketProps.small_vclock)
}

// optional uint32 pr = 14;
inline bool RpbBucketProps::has_pr() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void RpbBucketProps::set_has_pr() {
  _has_bits_[0] |= 0x00002000u;
}
inline void RpbBucketProps::clear_has_pr() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void RpbBucketProps::clear_pr() {
  pr_ = 0u;
  clear_has_pr();
}
inline ::google::protobuf::uint32 RpbBucketProps::pr() const {
  // @@protoc_insertion_point(field_get:RpbBucketProps.pr)
  return pr_;
}
inline void RpbBucketProps::set_pr(::google::protobuf::uint32 value) {
  set_has_pr();
  pr_ = value;
  // @@protoc_insertion_point(field_set:RpbBucketProps.pr)
}

// optional uint32 r = 15;
inline bool RpbBucketProps::has_r() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void RpbBucketProps::set_has_r() {
  _has_bits_[0] |= 0x00004000u;
}
inline void RpbBucketProps::clear_has_r() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void RpbBucketProps::clear_r() {
  r_ = 0u;
  clear_has_r();
}
inline ::google::protobuf::uint32 RpbBucketProps::r() const {
  // @@protoc_insertion_point(field_get:RpbBucketProps.r)
  return r_;
}
inline void RpbBucketProps::set_r(::google::protobuf::uint32 value) {
  set_has_r();
  r_ = value;
  // @@protoc_insertion_point(field_set:RpbBucketProps.r)
}

// optional uint32 w = 16;
inline bool RpbBucketProps::has_w() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void RpbBucketProps::set_has_w() {
  _has_bits_[0] |= 0x00008000u;
}
inline void RpbBucketProps::clear_has_w() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void RpbBucketProps::clear_w() {
  w_ = 0u;
  clear_has_w();
}
inline ::google::protobuf::uint32 RpbBucketProps::w() const {
  // @@protoc_insertion_point(field_get:RpbBucketProps.w)
  return w_;
}
inline void RpbBucketProps::set_w(::google::protobuf::uint32 value) {
  set_has_w();
  w_ = value;
  // @@protoc_insertion_point(field_set:RpbBucketProps.w)
}

// optional uint32 pw = 17;
inline bool RpbBucketProps::has_pw() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void RpbBucketProps::set_has_pw() {
  _has_bits_[0] |= 0x00010000u;
}
inline void RpbBucketProps::clear_has_pw() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void RpbBucketProps::clear_pw() {
  pw_ = 0u;
  clear_has_pw();
}
inline ::google::protobuf::uint32 RpbBucketProps::pw() const {
  // @@protoc_insertion_point(field_get:RpbBucketProps.pw)
  return pw_;
}
inline void RpbBucketProps::set_pw(::google::protobuf::uint32 value) {
  set_has_pw();
  pw_ = value;
  // @@protoc_insertion_point(field_set:RpbBucketProps.pw)
}

// optional uint32 dw = 18;
inline bool RpbBucketProps::has_dw() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void RpbBucketProps::set_has_dw() {
  _has_bits_[0] |= 0x00020000u;
}
inline void RpbBucketProps::clear_has_dw() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void RpbBucketProps::clear_dw() {
  dw_ = 0u;
  clear_has_dw();
}
inline ::google::protobuf::uint32 RpbBucketProps::dw() const {
  // @@protoc_insertion_point(field_get:RpbBucketProps.dw)
  return dw_;
}
inline void RpbBucketProps::set_dw(::google::protobuf::uint32 value) {
  set_has_dw();
  dw_ = value;
  // @@protoc_insertion_point(field_set:RpbBucketProps.dw)
}

// optional uint32 rw = 19;
inline bool RpbBucketProps::has_rw() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void RpbBucketProps::set_has_rw() {
  _has_bits_[0] |= 0x00040000u;
}
inline void RpbBucketProps::clear_has_rw() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void RpbBucketProps::clear_rw() {
  rw_ = 0u;
  clear_has_rw();
}
inline ::google::protobuf::uint32 RpbBucketProps::rw() const {
  // @@protoc_insertion_point(field_get:RpbBucketProps.rw)
  return rw_;
}
inline void RpbBucketProps::set_rw(::google::protobuf::uint32 value) {
  set_has_rw();
  rw_ = value;
  // @@protoc_insertion_point(field_set:RpbBucketProps.rw)
}

// optional bool basic_quorum = 20;
inline bool RpbBucketProps::has_basic_quorum() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void RpbBucketProps::set_has_basic_quorum() {
  _has_bits_[0] |= 0x00080000u;
}
inline void RpbBucketProps::clear_has_basic_quorum() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void RpbBucketProps::clear_basic_quorum() {
  basic_quorum_ = false;
  clear_has_basic_quorum();
}
inline bool RpbBucketProps::basic_quorum() const {
  // @@protoc_insertion_point(field_get:RpbBucketProps.basic_quorum)
  return basic_quorum_;
}
inline void RpbBucketProps::set_basic_quorum(bool value) {
  set_has_basic_quorum();
  basic_quorum_ = value;
  // @@protoc_insertion_point(field_set:RpbBucketProps.basic_quorum)
}

// optional bool notfound_ok = 21;
inline bool RpbBucketProps::has_notfound_ok() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void RpbBucketProps::set_has_notfound_ok() {
  _has_bits_[0] |= 0x00100000u;
}
inline void RpbBucketProps::clear_has_notfound_ok() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void RpbBucketProps::clear_notfound_ok() {
  notfound_ok_ = false;
  clear_has_notfound_ok();
}
inline bool RpbBucketProps::notfound_ok() const {
  // @@protoc_insertion_point(field_get:RpbBucketProps.notfound_ok)
  return notfound_ok_;
}
inline void RpbBucketProps::set_notfound_ok(bool value) {
  set_has_notfound_ok();
  notfound_ok_ = value;
  // @@protoc_insertion_point(field_set:RpbBucketProps.notfound_ok)
}

// optional bytes backend = 22;
inline bool RpbBucketProps::has_backend() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void RpbBucketProps::set_has_backend() {
  _has_bits_[0] |= 0x00200000u;
}
inline void RpbBucketProps::clear_has_backend() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void RpbBucketProps::clear_backend() {
  if (backend_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    backend_->clear();
  }
  clear_has_backend();
}
inline const ::std::string& RpbBucketProps::backend() const {
  // @@protoc_insertion_point(field_get:RpbBucketProps.backend)
  return *backend_;
}
inline void RpbBucketProps::set_backend(const ::std::string& value) {
  set_has_backend();
  if (backend_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    backend_ = new ::std::string;
  }
  backend_->assign(value);
  // @@protoc_insertion_point(field_set:RpbBucketProps.backend)
}
inline void RpbBucketProps::set_backend(const char* value) {
  set_has_backend();
  if (backend_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    backend_ = new ::std::string;
  }
  backend_->assign(value);
  // @@protoc_insertion_point(field_set_char:RpbBucketProps.backend)
}
inline void RpbBucketProps::set_backend(const void* value, size_t size) {
  set_has_backend();
  if (backend_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    backend_ = new ::std::string;
  }
  backend_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RpbBucketProps.backend)
}
inline ::std::string* RpbBucketProps::mutable_backend() {
  set_has_backend();
  if (backend_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    backend_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:RpbBucketProps.backend)
  return backend_;
}
inline ::std::string* RpbBucketProps::release_backend() {
  clear_has_backend();
  if (backend_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = backend_;
    backend_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RpbBucketProps::set_allocated_backend(::std::string* backend) {
  if (backend_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete backend_;
  }
  if (backend) {
    set_has_backend();
    backend_ = backend;
  } else {
    clear_has_backend();
    backend_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:RpbBucketProps.backend)
}

// optional bool search = 23;
inline bool RpbBucketProps::has_search() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void RpbBucketProps::set_has_search() {
  _has_bits_[0] |= 0x00400000u;
}
inline void RpbBucketProps::clear_has_search() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void RpbBucketProps::clear_search() {
  search_ = false;
  clear_has_search();
}
inline bool RpbBucketProps::search() const {
  // @@protoc_insertion_point(field_get:RpbBucketProps.search)
  return search_;
}
inline void RpbBucketProps::set_search(bool value) {
  set_has_search();
  search_ = value;
  // @@protoc_insertion_point(field_set:RpbBucketProps.search)
}

// optional .RpbBucketProps.RpbReplMode repl = 24;
inline bool RpbBucketProps::has_repl() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void RpbBucketProps::set_has_repl() {
  _has_bits_[0] |= 0x00800000u;
}
inline void RpbBucketProps::clear_has_repl() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void RpbBucketProps::clear_repl() {
  repl_ = 0;
  clear_has_repl();
}
inline ::RpbBucketProps_RpbReplMode RpbBucketProps::repl() const {
  // @@protoc_insertion_point(field_get:RpbBucketProps.repl)
  return static_cast< ::RpbBucketProps_RpbReplMode >(repl_);
}
inline void RpbBucketProps::set_repl(::RpbBucketProps_RpbReplMode value) {
  assert(::RpbBucketProps_RpbReplMode_IsValid(value));
  set_has_repl();
  repl_ = value;
  // @@protoc_insertion_point(field_set:RpbBucketProps.repl)
}

// optional bytes search_index = 25;
inline bool RpbBucketProps::has_search_index() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void RpbBucketProps::set_has_search_index() {
  _has_bits_[0] |= 0x01000000u;
}
inline void RpbBucketProps::clear_has_search_index() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void RpbBucketProps::clear_search_index() {
  if (search_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    search_index_->clear();
  }
  clear_has_search_index();
}
inline const ::std::string& RpbBucketProps::search_index() const {
  // @@protoc_insertion_point(field_get:RpbBucketProps.search_index)
  return *search_index_;
}
inline void RpbBucketProps::set_search_index(const ::std::string& value) {
  set_has_search_index();
  if (search_index_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    search_index_ = new ::std::string;
  }
  search_index_->assign(value);
  // @@protoc_insertion_point(field_set:RpbBucketProps.search_index)
}
inline void RpbBucketProps::set_search_index(const char* value) {
  set_has_search_index();
  if (search_index_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    search_index_ = new ::std::string;
  }
  search_index_->assign(value);
  // @@protoc_insertion_point(field_set_char:RpbBucketProps.search_index)
}
inline void RpbBucketProps::set_search_index(const void* value, size_t size) {
  set_has_search_index();
  if (search_index_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    search_index_ = new ::std::string;
  }
  search_index_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RpbBucketProps.search_index)
}
inline ::std::string* RpbBucketProps::mutable_search_index() {
  set_has_search_index();
  if (search_index_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    search_index_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:RpbBucketProps.search_index)
  return search_index_;
}
inline ::std::string* RpbBucketProps::release_search_index() {
  clear_has_search_index();
  if (search_index_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = search_index_;
    search_index_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RpbBucketProps::set_allocated_search_index(::std::string* search_index) {
  if (search_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete search_index_;
  }
  if (search_index) {
    set_has_search_index();
    search_index_ = search_index;
  } else {
    clear_has_search_index();
    search_index_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:RpbBucketProps.search_index)
}

// optional bytes datatype = 26;
inline bool RpbBucketProps::has_datatype() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void RpbBucketProps::set_has_datatype() {
  _has_bits_[0] |= 0x02000000u;
}
inline void RpbBucketProps::clear_has_datatype() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void RpbBucketProps::clear_datatype() {
  if (datatype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    datatype_->clear();
  }
  clear_has_datatype();
}
inline const ::std::string& RpbBucketProps::datatype() const {
  // @@protoc_insertion_point(field_get:RpbBucketProps.datatype)
  return *datatype_;
}
inline void RpbBucketProps::set_datatype(const ::std::string& value) {
  set_has_datatype();
  if (datatype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    datatype_ = new ::std::string;
  }
  datatype_->assign(value);
  // @@protoc_insertion_point(field_set:RpbBucketProps.datatype)
}
inline void RpbBucketProps::set_datatype(const char* value) {
  set_has_datatype();
  if (datatype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    datatype_ = new ::std::string;
  }
  datatype_->assign(value);
  // @@protoc_insertion_point(field_set_char:RpbBucketProps.datatype)
}
inline void RpbBucketProps::set_datatype(const void* value, size_t size) {
  set_has_datatype();
  if (datatype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    datatype_ = new ::std::string;
  }
  datatype_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RpbBucketProps.datatype)
}
inline ::std::string* RpbBucketProps::mutable_datatype() {
  set_has_datatype();
  if (datatype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    datatype_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:RpbBucketProps.datatype)
  return datatype_;
}
inline ::std::string* RpbBucketProps::release_datatype() {
  clear_has_datatype();
  if (datatype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = datatype_;
    datatype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RpbBucketProps::set_allocated_datatype(::std::string* datatype) {
  if (datatype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete datatype_;
  }
  if (datatype) {
    set_has_datatype();
    datatype_ = datatype;
  } else {
    clear_has_datatype();
    datatype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:RpbBucketProps.datatype)
}

// optional bool consistent = 27;
inline bool RpbBucketProps::has_consistent() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void RpbBucketProps::set_has_consistent() {
  _has_bits_[0] |= 0x04000000u;
}
inline void RpbBucketProps::clear_has_consistent() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void RpbBucketProps::clear_consistent() {
  consistent_ = false;
  clear_has_consistent();
}
inline bool RpbBucketProps::consistent() const {
  // @@protoc_insertion_point(field_get:RpbBucketProps.consistent)
  return consistent_;
}
inline void RpbBucketProps::set_consistent(bool value) {
  set_has_consistent();
  consistent_ = value;
  // @@protoc_insertion_point(field_set:RpbBucketProps.consistent)
}

// optional bool write_once = 28;
inline bool RpbBucketProps::has_write_once() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void RpbBucketProps::set_has_write_once() {
  _has_bits_[0] |= 0x08000000u;
}
inline void RpbBucketProps::clear_has_write_once() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void RpbBucketProps::clear_write_once() {
  write_once_ = false;
  clear_has_write_once();
}
inline bool RpbBucketProps::write_once() const {
  // @@protoc_insertion_point(field_get:RpbBucketProps.write_once)
  return write_once_;
}
inline void RpbBucketProps::set_write_once(bool value) {
  set_has_write_once();
  write_once_ = value;
  // @@protoc_insertion_point(field_set:RpbBucketProps.write_once)
}

// -------------------------------------------------------------------

// RpbAuthReq

// required bytes user = 1;
inline bool RpbAuthReq::has_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RpbAuthReq::set_has_user() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RpbAuthReq::clear_has_user() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RpbAuthReq::clear_user() {
  if (user_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_->clear();
  }
  clear_has_user();
}
inline const ::std::string& RpbAuthReq::user() const {
  // @@protoc_insertion_point(field_get:RpbAuthReq.user)
  return *user_;
}
inline void RpbAuthReq::set_user(const ::std::string& value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_ = new ::std::string;
  }
  user_->assign(value);
  // @@protoc_insertion_point(field_set:RpbAuthReq.user)
}
inline void RpbAuthReq::set_user(const char* value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_ = new ::std::string;
  }
  user_->assign(value);
  // @@protoc_insertion_point(field_set_char:RpbAuthReq.user)
}
inline void RpbAuthReq::set_user(const void* value, size_t size) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RpbAuthReq.user)
}
inline ::std::string* RpbAuthReq::mutable_user() {
  set_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:RpbAuthReq.user)
  return user_;
}
inline ::std::string* RpbAuthReq::release_user() {
  clear_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_;
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RpbAuthReq::set_allocated_user(::std::string* user) {
  if (user_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_;
  }
  if (user) {
    set_has_user();
    user_ = user;
  } else {
    clear_has_user();
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:RpbAuthReq.user)
}

// required bytes password = 2;
inline bool RpbAuthReq::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RpbAuthReq::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RpbAuthReq::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RpbAuthReq::clear_password() {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& RpbAuthReq::password() const {
  // @@protoc_insertion_point(field_get:RpbAuthReq.password)
  return *password_;
}
inline void RpbAuthReq::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(value);
  // @@protoc_insertion_point(field_set:RpbAuthReq.password)
}
inline void RpbAuthReq::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(value);
  // @@protoc_insertion_point(field_set_char:RpbAuthReq.password)
}
inline void RpbAuthReq::set_password(const void* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RpbAuthReq.password)
}
inline ::std::string* RpbAuthReq::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:RpbAuthReq.password)
  return password_;
}
inline ::std::string* RpbAuthReq::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RpbAuthReq::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:RpbAuthReq.password)
}

// -------------------------------------------------------------------

// RpbToggleEncodingReq

// required bool use_native = 1;
inline bool RpbToggleEncodingReq::has_use_native() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RpbToggleEncodingReq::set_has_use_native() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RpbToggleEncodingReq::clear_has_use_native() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RpbToggleEncodingReq::clear_use_native() {
  use_native_ = false;
  clear_has_use_native();
}
inline bool RpbToggleEncodingReq::use_native() const {
  // @@protoc_insertion_point(field_get:RpbToggleEncodingReq.use_native)
  return use_native_;
}
inline void RpbToggleEncodingReq::set_use_native(bool value) {
  set_has_use_native();
  use_native_ = value;
  // @@protoc_insertion_point(field_set:RpbToggleEncodingReq.use_native)
}

// -------------------------------------------------------------------

// RpbToggleEncodingResp

// required bool use_native = 1;
inline bool RpbToggleEncodingResp::has_use_native() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RpbToggleEncodingResp::set_has_use_native() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RpbToggleEncodingResp::clear_has_use_native() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RpbToggleEncodingResp::clear_use_native() {
  use_native_ = false;
  clear_has_use_native();
}
inline bool RpbToggleEncodingResp::use_native() const {
  // @@protoc_insertion_point(field_get:RpbToggleEncodingResp.use_native)
  return use_native_;
}
inline void RpbToggleEncodingResp::set_use_native(bool value) {
  set_has_use_native();
  use_native_ = value;
  // @@protoc_insertion_point(field_set:RpbToggleEncodingResp.use_native)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::RpbBucketProps_RpbReplMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::RpbBucketProps_RpbReplMode>() {
  return ::RpbBucketProps_RpbReplMode_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_riak_2eproto__INCLUDED
