// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: riak_search.proto

#ifndef PROTOBUF_riak_5fsearch_2eproto__INCLUDED
#define PROTOBUF_riak_5fsearch_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "riak.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_riak_5fsearch_2eproto();
void protobuf_AssignDesc_riak_5fsearch_2eproto();
void protobuf_ShutdownFile_riak_5fsearch_2eproto();

class RpbSearchDoc;
class RpbSearchQueryReq;
class RpbSearchQueryResp;

// ===================================================================

class RpbSearchDoc : public ::google::protobuf::Message {
 public:
  RpbSearchDoc();
  virtual ~RpbSearchDoc();

  RpbSearchDoc(const RpbSearchDoc& from);

  inline RpbSearchDoc& operator=(const RpbSearchDoc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RpbSearchDoc& default_instance();

  void Swap(RpbSearchDoc* other);

  // implements Message ----------------------------------------------

  RpbSearchDoc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RpbSearchDoc& from);
  void MergeFrom(const RpbSearchDoc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .RpbPair fields = 1;
  inline int fields_size() const;
  inline void clear_fields();
  static const int kFieldsFieldNumber = 1;
  inline const ::RpbPair& fields(int index) const;
  inline ::RpbPair* mutable_fields(int index);
  inline ::RpbPair* add_fields();
  inline const ::google::protobuf::RepeatedPtrField< ::RpbPair >&
      fields() const;
  inline ::google::protobuf::RepeatedPtrField< ::RpbPair >*
      mutable_fields();

  // @@protoc_insertion_point(class_scope:RpbSearchDoc)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::RpbPair > fields_;
  friend void  protobuf_AddDesc_riak_5fsearch_2eproto();
  friend void protobuf_AssignDesc_riak_5fsearch_2eproto();
  friend void protobuf_ShutdownFile_riak_5fsearch_2eproto();

  void InitAsDefaultInstance();
  static RpbSearchDoc* default_instance_;
};
// -------------------------------------------------------------------

class RpbSearchQueryReq : public ::google::protobuf::Message {
 public:
  RpbSearchQueryReq();
  virtual ~RpbSearchQueryReq();

  RpbSearchQueryReq(const RpbSearchQueryReq& from);

  inline RpbSearchQueryReq& operator=(const RpbSearchQueryReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RpbSearchQueryReq& default_instance();

  void Swap(RpbSearchQueryReq* other);

  // implements Message ----------------------------------------------

  RpbSearchQueryReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RpbSearchQueryReq& from);
  void MergeFrom(const RpbSearchQueryReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes q = 1;
  inline bool has_q() const;
  inline void clear_q();
  static const int kQFieldNumber = 1;
  inline const ::std::string& q() const;
  inline void set_q(const ::std::string& value);
  inline void set_q(const char* value);
  inline void set_q(const void* value, size_t size);
  inline ::std::string* mutable_q();
  inline ::std::string* release_q();
  inline void set_allocated_q(::std::string* q);

  // required bytes index = 2;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 2;
  inline const ::std::string& index() const;
  inline void set_index(const ::std::string& value);
  inline void set_index(const char* value);
  inline void set_index(const void* value, size_t size);
  inline ::std::string* mutable_index();
  inline ::std::string* release_index();
  inline void set_allocated_index(::std::string* index);

  // optional uint32 rows = 3;
  inline bool has_rows() const;
  inline void clear_rows();
  static const int kRowsFieldNumber = 3;
  inline ::google::protobuf::uint32 rows() const;
  inline void set_rows(::google::protobuf::uint32 value);

  // optional uint32 start = 4;
  inline bool has_start() const;
  inline void clear_start();
  static const int kStartFieldNumber = 4;
  inline ::google::protobuf::uint32 start() const;
  inline void set_start(::google::protobuf::uint32 value);

  // optional bytes sort = 5;
  inline bool has_sort() const;
  inline void clear_sort();
  static const int kSortFieldNumber = 5;
  inline const ::std::string& sort() const;
  inline void set_sort(const ::std::string& value);
  inline void set_sort(const char* value);
  inline void set_sort(const void* value, size_t size);
  inline ::std::string* mutable_sort();
  inline ::std::string* release_sort();
  inline void set_allocated_sort(::std::string* sort);

  // optional bytes filter = 6;
  inline bool has_filter() const;
  inline void clear_filter();
  static const int kFilterFieldNumber = 6;
  inline const ::std::string& filter() const;
  inline void set_filter(const ::std::string& value);
  inline void set_filter(const char* value);
  inline void set_filter(const void* value, size_t size);
  inline ::std::string* mutable_filter();
  inline ::std::string* release_filter();
  inline void set_allocated_filter(::std::string* filter);

  // optional bytes df = 7;
  inline bool has_df() const;
  inline void clear_df();
  static const int kDfFieldNumber = 7;
  inline const ::std::string& df() const;
  inline void set_df(const ::std::string& value);
  inline void set_df(const char* value);
  inline void set_df(const void* value, size_t size);
  inline ::std::string* mutable_df();
  inline ::std::string* release_df();
  inline void set_allocated_df(::std::string* df);

  // optional bytes op = 8;
  inline bool has_op() const;
  inline void clear_op();
  static const int kOpFieldNumber = 8;
  inline const ::std::string& op() const;
  inline void set_op(const ::std::string& value);
  inline void set_op(const char* value);
  inline void set_op(const void* value, size_t size);
  inline ::std::string* mutable_op();
  inline ::std::string* release_op();
  inline void set_allocated_op(::std::string* op);

  // repeated bytes fl = 9;
  inline int fl_size() const;
  inline void clear_fl();
  static const int kFlFieldNumber = 9;
  inline const ::std::string& fl(int index) const;
  inline ::std::string* mutable_fl(int index);
  inline void set_fl(int index, const ::std::string& value);
  inline void set_fl(int index, const char* value);
  inline void set_fl(int index, const void* value, size_t size);
  inline ::std::string* add_fl();
  inline void add_fl(const ::std::string& value);
  inline void add_fl(const char* value);
  inline void add_fl(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& fl() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_fl();

  // optional bytes presort = 10;
  inline bool has_presort() const;
  inline void clear_presort();
  static const int kPresortFieldNumber = 10;
  inline const ::std::string& presort() const;
  inline void set_presort(const ::std::string& value);
  inline void set_presort(const char* value);
  inline void set_presort(const void* value, size_t size);
  inline ::std::string* mutable_presort();
  inline ::std::string* release_presort();
  inline void set_allocated_presort(::std::string* presort);

  // @@protoc_insertion_point(class_scope:RpbSearchQueryReq)
 private:
  inline void set_has_q();
  inline void clear_has_q();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_rows();
  inline void clear_has_rows();
  inline void set_has_start();
  inline void clear_has_start();
  inline void set_has_sort();
  inline void clear_has_sort();
  inline void set_has_filter();
  inline void clear_has_filter();
  inline void set_has_df();
  inline void clear_has_df();
  inline void set_has_op();
  inline void clear_has_op();
  inline void set_has_presort();
  inline void clear_has_presort();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* q_;
  ::std::string* index_;
  ::google::protobuf::uint32 rows_;
  ::google::protobuf::uint32 start_;
  ::std::string* sort_;
  ::std::string* filter_;
  ::std::string* df_;
  ::std::string* op_;
  ::google::protobuf::RepeatedPtrField< ::std::string> fl_;
  ::std::string* presort_;
  friend void  protobuf_AddDesc_riak_5fsearch_2eproto();
  friend void protobuf_AssignDesc_riak_5fsearch_2eproto();
  friend void protobuf_ShutdownFile_riak_5fsearch_2eproto();

  void InitAsDefaultInstance();
  static RpbSearchQueryReq* default_instance_;
};
// -------------------------------------------------------------------

class RpbSearchQueryResp : public ::google::protobuf::Message {
 public:
  RpbSearchQueryResp();
  virtual ~RpbSearchQueryResp();

  RpbSearchQueryResp(const RpbSearchQueryResp& from);

  inline RpbSearchQueryResp& operator=(const RpbSearchQueryResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RpbSearchQueryResp& default_instance();

  void Swap(RpbSearchQueryResp* other);

  // implements Message ----------------------------------------------

  RpbSearchQueryResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RpbSearchQueryResp& from);
  void MergeFrom(const RpbSearchQueryResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .RpbSearchDoc docs = 1;
  inline int docs_size() const;
  inline void clear_docs();
  static const int kDocsFieldNumber = 1;
  inline const ::RpbSearchDoc& docs(int index) const;
  inline ::RpbSearchDoc* mutable_docs(int index);
  inline ::RpbSearchDoc* add_docs();
  inline const ::google::protobuf::RepeatedPtrField< ::RpbSearchDoc >&
      docs() const;
  inline ::google::protobuf::RepeatedPtrField< ::RpbSearchDoc >*
      mutable_docs();

  // optional float max_score = 2;
  inline bool has_max_score() const;
  inline void clear_max_score();
  static const int kMaxScoreFieldNumber = 2;
  inline float max_score() const;
  inline void set_max_score(float value);

  // optional uint32 num_found = 3;
  inline bool has_num_found() const;
  inline void clear_num_found();
  static const int kNumFoundFieldNumber = 3;
  inline ::google::protobuf::uint32 num_found() const;
  inline void set_num_found(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:RpbSearchQueryResp)
 private:
  inline void set_has_max_score();
  inline void clear_has_max_score();
  inline void set_has_num_found();
  inline void clear_has_num_found();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::RpbSearchDoc > docs_;
  float max_score_;
  ::google::protobuf::uint32 num_found_;
  friend void  protobuf_AddDesc_riak_5fsearch_2eproto();
  friend void protobuf_AssignDesc_riak_5fsearch_2eproto();
  friend void protobuf_ShutdownFile_riak_5fsearch_2eproto();

  void InitAsDefaultInstance();
  static RpbSearchQueryResp* default_instance_;
};
// ===================================================================


// ===================================================================

// RpbSearchDoc

// repeated .RpbPair fields = 1;
inline int RpbSearchDoc::fields_size() const {
  return fields_.size();
}
inline void RpbSearchDoc::clear_fields() {
  fields_.Clear();
}
inline const ::RpbPair& RpbSearchDoc::fields(int index) const {
  // @@protoc_insertion_point(field_get:RpbSearchDoc.fields)
  return fields_.Get(index);
}
inline ::RpbPair* RpbSearchDoc::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:RpbSearchDoc.fields)
  return fields_.Mutable(index);
}
inline ::RpbPair* RpbSearchDoc::add_fields() {
  // @@protoc_insertion_point(field_add:RpbSearchDoc.fields)
  return fields_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::RpbPair >&
RpbSearchDoc::fields() const {
  // @@protoc_insertion_point(field_list:RpbSearchDoc.fields)
  return fields_;
}
inline ::google::protobuf::RepeatedPtrField< ::RpbPair >*
RpbSearchDoc::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:RpbSearchDoc.fields)
  return &fields_;
}

// -------------------------------------------------------------------

// RpbSearchQueryReq

// required bytes q = 1;
inline bool RpbSearchQueryReq::has_q() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RpbSearchQueryReq::set_has_q() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RpbSearchQueryReq::clear_has_q() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RpbSearchQueryReq::clear_q() {
  if (q_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    q_->clear();
  }
  clear_has_q();
}
inline const ::std::string& RpbSearchQueryReq::q() const {
  // @@protoc_insertion_point(field_get:RpbSearchQueryReq.q)
  return *q_;
}
inline void RpbSearchQueryReq::set_q(const ::std::string& value) {
  set_has_q();
  if (q_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    q_ = new ::std::string;
  }
  q_->assign(value);
  // @@protoc_insertion_point(field_set:RpbSearchQueryReq.q)
}
inline void RpbSearchQueryReq::set_q(const char* value) {
  set_has_q();
  if (q_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    q_ = new ::std::string;
  }
  q_->assign(value);
  // @@protoc_insertion_point(field_set_char:RpbSearchQueryReq.q)
}
inline void RpbSearchQueryReq::set_q(const void* value, size_t size) {
  set_has_q();
  if (q_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    q_ = new ::std::string;
  }
  q_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RpbSearchQueryReq.q)
}
inline ::std::string* RpbSearchQueryReq::mutable_q() {
  set_has_q();
  if (q_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    q_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:RpbSearchQueryReq.q)
  return q_;
}
inline ::std::string* RpbSearchQueryReq::release_q() {
  clear_has_q();
  if (q_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = q_;
    q_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RpbSearchQueryReq::set_allocated_q(::std::string* q) {
  if (q_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete q_;
  }
  if (q) {
    set_has_q();
    q_ = q;
  } else {
    clear_has_q();
    q_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:RpbSearchQueryReq.q)
}

// required bytes index = 2;
inline bool RpbSearchQueryReq::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RpbSearchQueryReq::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RpbSearchQueryReq::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RpbSearchQueryReq::clear_index() {
  if (index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    index_->clear();
  }
  clear_has_index();
}
inline const ::std::string& RpbSearchQueryReq::index() const {
  // @@protoc_insertion_point(field_get:RpbSearchQueryReq.index)
  return *index_;
}
inline void RpbSearchQueryReq::set_index(const ::std::string& value) {
  set_has_index();
  if (index_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    index_ = new ::std::string;
  }
  index_->assign(value);
  // @@protoc_insertion_point(field_set:RpbSearchQueryReq.index)
}
inline void RpbSearchQueryReq::set_index(const char* value) {
  set_has_index();
  if (index_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    index_ = new ::std::string;
  }
  index_->assign(value);
  // @@protoc_insertion_point(field_set_char:RpbSearchQueryReq.index)
}
inline void RpbSearchQueryReq::set_index(const void* value, size_t size) {
  set_has_index();
  if (index_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    index_ = new ::std::string;
  }
  index_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RpbSearchQueryReq.index)
}
inline ::std::string* RpbSearchQueryReq::mutable_index() {
  set_has_index();
  if (index_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    index_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:RpbSearchQueryReq.index)
  return index_;
}
inline ::std::string* RpbSearchQueryReq::release_index() {
  clear_has_index();
  if (index_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = index_;
    index_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RpbSearchQueryReq::set_allocated_index(::std::string* index) {
  if (index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete index_;
  }
  if (index) {
    set_has_index();
    index_ = index;
  } else {
    clear_has_index();
    index_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:RpbSearchQueryReq.index)
}

// optional uint32 rows = 3;
inline bool RpbSearchQueryReq::has_rows() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RpbSearchQueryReq::set_has_rows() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RpbSearchQueryReq::clear_has_rows() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RpbSearchQueryReq::clear_rows() {
  rows_ = 0u;
  clear_has_rows();
}
inline ::google::protobuf::uint32 RpbSearchQueryReq::rows() const {
  // @@protoc_insertion_point(field_get:RpbSearchQueryReq.rows)
  return rows_;
}
inline void RpbSearchQueryReq::set_rows(::google::protobuf::uint32 value) {
  set_has_rows();
  rows_ = value;
  // @@protoc_insertion_point(field_set:RpbSearchQueryReq.rows)
}

// optional uint32 start = 4;
inline bool RpbSearchQueryReq::has_start() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RpbSearchQueryReq::set_has_start() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RpbSearchQueryReq::clear_has_start() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RpbSearchQueryReq::clear_start() {
  start_ = 0u;
  clear_has_start();
}
inline ::google::protobuf::uint32 RpbSearchQueryReq::start() const {
  // @@protoc_insertion_point(field_get:RpbSearchQueryReq.start)
  return start_;
}
inline void RpbSearchQueryReq::set_start(::google::protobuf::uint32 value) {
  set_has_start();
  start_ = value;
  // @@protoc_insertion_point(field_set:RpbSearchQueryReq.start)
}

// optional bytes sort = 5;
inline bool RpbSearchQueryReq::has_sort() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RpbSearchQueryReq::set_has_sort() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RpbSearchQueryReq::clear_has_sort() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RpbSearchQueryReq::clear_sort() {
  if (sort_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sort_->clear();
  }
  clear_has_sort();
}
inline const ::std::string& RpbSearchQueryReq::sort() const {
  // @@protoc_insertion_point(field_get:RpbSearchQueryReq.sort)
  return *sort_;
}
inline void RpbSearchQueryReq::set_sort(const ::std::string& value) {
  set_has_sort();
  if (sort_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sort_ = new ::std::string;
  }
  sort_->assign(value);
  // @@protoc_insertion_point(field_set:RpbSearchQueryReq.sort)
}
inline void RpbSearchQueryReq::set_sort(const char* value) {
  set_has_sort();
  if (sort_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sort_ = new ::std::string;
  }
  sort_->assign(value);
  // @@protoc_insertion_point(field_set_char:RpbSearchQueryReq.sort)
}
inline void RpbSearchQueryReq::set_sort(const void* value, size_t size) {
  set_has_sort();
  if (sort_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sort_ = new ::std::string;
  }
  sort_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RpbSearchQueryReq.sort)
}
inline ::std::string* RpbSearchQueryReq::mutable_sort() {
  set_has_sort();
  if (sort_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sort_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:RpbSearchQueryReq.sort)
  return sort_;
}
inline ::std::string* RpbSearchQueryReq::release_sort() {
  clear_has_sort();
  if (sort_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sort_;
    sort_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RpbSearchQueryReq::set_allocated_sort(::std::string* sort) {
  if (sort_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sort_;
  }
  if (sort) {
    set_has_sort();
    sort_ = sort;
  } else {
    clear_has_sort();
    sort_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:RpbSearchQueryReq.sort)
}

// optional bytes filter = 6;
inline bool RpbSearchQueryReq::has_filter() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RpbSearchQueryReq::set_has_filter() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RpbSearchQueryReq::clear_has_filter() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RpbSearchQueryReq::clear_filter() {
  if (filter_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filter_->clear();
  }
  clear_has_filter();
}
inline const ::std::string& RpbSearchQueryReq::filter() const {
  // @@protoc_insertion_point(field_get:RpbSearchQueryReq.filter)
  return *filter_;
}
inline void RpbSearchQueryReq::set_filter(const ::std::string& value) {
  set_has_filter();
  if (filter_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filter_ = new ::std::string;
  }
  filter_->assign(value);
  // @@protoc_insertion_point(field_set:RpbSearchQueryReq.filter)
}
inline void RpbSearchQueryReq::set_filter(const char* value) {
  set_has_filter();
  if (filter_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filter_ = new ::std::string;
  }
  filter_->assign(value);
  // @@protoc_insertion_point(field_set_char:RpbSearchQueryReq.filter)
}
inline void RpbSearchQueryReq::set_filter(const void* value, size_t size) {
  set_has_filter();
  if (filter_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filter_ = new ::std::string;
  }
  filter_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RpbSearchQueryReq.filter)
}
inline ::std::string* RpbSearchQueryReq::mutable_filter() {
  set_has_filter();
  if (filter_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filter_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:RpbSearchQueryReq.filter)
  return filter_;
}
inline ::std::string* RpbSearchQueryReq::release_filter() {
  clear_has_filter();
  if (filter_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = filter_;
    filter_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RpbSearchQueryReq::set_allocated_filter(::std::string* filter) {
  if (filter_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filter_;
  }
  if (filter) {
    set_has_filter();
    filter_ = filter;
  } else {
    clear_has_filter();
    filter_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:RpbSearchQueryReq.filter)
}

// optional bytes df = 7;
inline bool RpbSearchQueryReq::has_df() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RpbSearchQueryReq::set_has_df() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RpbSearchQueryReq::clear_has_df() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RpbSearchQueryReq::clear_df() {
  if (df_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    df_->clear();
  }
  clear_has_df();
}
inline const ::std::string& RpbSearchQueryReq::df() const {
  // @@protoc_insertion_point(field_get:RpbSearchQueryReq.df)
  return *df_;
}
inline void RpbSearchQueryReq::set_df(const ::std::string& value) {
  set_has_df();
  if (df_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    df_ = new ::std::string;
  }
  df_->assign(value);
  // @@protoc_insertion_point(field_set:RpbSearchQueryReq.df)
}
inline void RpbSearchQueryReq::set_df(const char* value) {
  set_has_df();
  if (df_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    df_ = new ::std::string;
  }
  df_->assign(value);
  // @@protoc_insertion_point(field_set_char:RpbSearchQueryReq.df)
}
inline void RpbSearchQueryReq::set_df(const void* value, size_t size) {
  set_has_df();
  if (df_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    df_ = new ::std::string;
  }
  df_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RpbSearchQueryReq.df)
}
inline ::std::string* RpbSearchQueryReq::mutable_df() {
  set_has_df();
  if (df_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    df_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:RpbSearchQueryReq.df)
  return df_;
}
inline ::std::string* RpbSearchQueryReq::release_df() {
  clear_has_df();
  if (df_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = df_;
    df_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RpbSearchQueryReq::set_allocated_df(::std::string* df) {
  if (df_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete df_;
  }
  if (df) {
    set_has_df();
    df_ = df;
  } else {
    clear_has_df();
    df_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:RpbSearchQueryReq.df)
}

// optional bytes op = 8;
inline bool RpbSearchQueryReq::has_op() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RpbSearchQueryReq::set_has_op() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RpbSearchQueryReq::clear_has_op() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RpbSearchQueryReq::clear_op() {
  if (op_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    op_->clear();
  }
  clear_has_op();
}
inline const ::std::string& RpbSearchQueryReq::op() const {
  // @@protoc_insertion_point(field_get:RpbSearchQueryReq.op)
  return *op_;
}
inline void RpbSearchQueryReq::set_op(const ::std::string& value) {
  set_has_op();
  if (op_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    op_ = new ::std::string;
  }
  op_->assign(value);
  // @@protoc_insertion_point(field_set:RpbSearchQueryReq.op)
}
inline void RpbSearchQueryReq::set_op(const char* value) {
  set_has_op();
  if (op_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    op_ = new ::std::string;
  }
  op_->assign(value);
  // @@protoc_insertion_point(field_set_char:RpbSearchQueryReq.op)
}
inline void RpbSearchQueryReq::set_op(const void* value, size_t size) {
  set_has_op();
  if (op_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    op_ = new ::std::string;
  }
  op_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RpbSearchQueryReq.op)
}
inline ::std::string* RpbSearchQueryReq::mutable_op() {
  set_has_op();
  if (op_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    op_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:RpbSearchQueryReq.op)
  return op_;
}
inline ::std::string* RpbSearchQueryReq::release_op() {
  clear_has_op();
  if (op_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = op_;
    op_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RpbSearchQueryReq::set_allocated_op(::std::string* op) {
  if (op_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete op_;
  }
  if (op) {
    set_has_op();
    op_ = op;
  } else {
    clear_has_op();
    op_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:RpbSearchQueryReq.op)
}

// repeated bytes fl = 9;
inline int RpbSearchQueryReq::fl_size() const {
  return fl_.size();
}
inline void RpbSearchQueryReq::clear_fl() {
  fl_.Clear();
}
inline const ::std::string& RpbSearchQueryReq::fl(int index) const {
  // @@protoc_insertion_point(field_get:RpbSearchQueryReq.fl)
  return fl_.Get(index);
}
inline ::std::string* RpbSearchQueryReq::mutable_fl(int index) {
  // @@protoc_insertion_point(field_mutable:RpbSearchQueryReq.fl)
  return fl_.Mutable(index);
}
inline void RpbSearchQueryReq::set_fl(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:RpbSearchQueryReq.fl)
  fl_.Mutable(index)->assign(value);
}
inline void RpbSearchQueryReq::set_fl(int index, const char* value) {
  fl_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:RpbSearchQueryReq.fl)
}
inline void RpbSearchQueryReq::set_fl(int index, const void* value, size_t size) {
  fl_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RpbSearchQueryReq.fl)
}
inline ::std::string* RpbSearchQueryReq::add_fl() {
  return fl_.Add();
}
inline void RpbSearchQueryReq::add_fl(const ::std::string& value) {
  fl_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:RpbSearchQueryReq.fl)
}
inline void RpbSearchQueryReq::add_fl(const char* value) {
  fl_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:RpbSearchQueryReq.fl)
}
inline void RpbSearchQueryReq::add_fl(const void* value, size_t size) {
  fl_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:RpbSearchQueryReq.fl)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
RpbSearchQueryReq::fl() const {
  // @@protoc_insertion_point(field_list:RpbSearchQueryReq.fl)
  return fl_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
RpbSearchQueryReq::mutable_fl() {
  // @@protoc_insertion_point(field_mutable_list:RpbSearchQueryReq.fl)
  return &fl_;
}

// optional bytes presort = 10;
inline bool RpbSearchQueryReq::has_presort() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RpbSearchQueryReq::set_has_presort() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RpbSearchQueryReq::clear_has_presort() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RpbSearchQueryReq::clear_presort() {
  if (presort_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    presort_->clear();
  }
  clear_has_presort();
}
inline const ::std::string& RpbSearchQueryReq::presort() const {
  // @@protoc_insertion_point(field_get:RpbSearchQueryReq.presort)
  return *presort_;
}
inline void RpbSearchQueryReq::set_presort(const ::std::string& value) {
  set_has_presort();
  if (presort_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    presort_ = new ::std::string;
  }
  presort_->assign(value);
  // @@protoc_insertion_point(field_set:RpbSearchQueryReq.presort)
}
inline void RpbSearchQueryReq::set_presort(const char* value) {
  set_has_presort();
  if (presort_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    presort_ = new ::std::string;
  }
  presort_->assign(value);
  // @@protoc_insertion_point(field_set_char:RpbSearchQueryReq.presort)
}
inline void RpbSearchQueryReq::set_presort(const void* value, size_t size) {
  set_has_presort();
  if (presort_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    presort_ = new ::std::string;
  }
  presort_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RpbSearchQueryReq.presort)
}
inline ::std::string* RpbSearchQueryReq::mutable_presort() {
  set_has_presort();
  if (presort_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    presort_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:RpbSearchQueryReq.presort)
  return presort_;
}
inline ::std::string* RpbSearchQueryReq::release_presort() {
  clear_has_presort();
  if (presort_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = presort_;
    presort_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RpbSearchQueryReq::set_allocated_presort(::std::string* presort) {
  if (presort_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete presort_;
  }
  if (presort) {
    set_has_presort();
    presort_ = presort;
  } else {
    clear_has_presort();
    presort_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:RpbSearchQueryReq.presort)
}

// -------------------------------------------------------------------

// RpbSearchQueryResp

// repeated .RpbSearchDoc docs = 1;
inline int RpbSearchQueryResp::docs_size() const {
  return docs_.size();
}
inline void RpbSearchQueryResp::clear_docs() {
  docs_.Clear();
}
inline const ::RpbSearchDoc& RpbSearchQueryResp::docs(int index) const {
  // @@protoc_insertion_point(field_get:RpbSearchQueryResp.docs)
  return docs_.Get(index);
}
inline ::RpbSearchDoc* RpbSearchQueryResp::mutable_docs(int index) {
  // @@protoc_insertion_point(field_mutable:RpbSearchQueryResp.docs)
  return docs_.Mutable(index);
}
inline ::RpbSearchDoc* RpbSearchQueryResp::add_docs() {
  // @@protoc_insertion_point(field_add:RpbSearchQueryResp.docs)
  return docs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::RpbSearchDoc >&
RpbSearchQueryResp::docs() const {
  // @@protoc_insertion_point(field_list:RpbSearchQueryResp.docs)
  return docs_;
}
inline ::google::protobuf::RepeatedPtrField< ::RpbSearchDoc >*
RpbSearchQueryResp::mutable_docs() {
  // @@protoc_insertion_point(field_mutable_list:RpbSearchQueryResp.docs)
  return &docs_;
}

// optional float max_score = 2;
inline bool RpbSearchQueryResp::has_max_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RpbSearchQueryResp::set_has_max_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RpbSearchQueryResp::clear_has_max_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RpbSearchQueryResp::clear_max_score() {
  max_score_ = 0;
  clear_has_max_score();
}
inline float RpbSearchQueryResp::max_score() const {
  // @@protoc_insertion_point(field_get:RpbSearchQueryResp.max_score)
  return max_score_;
}
inline void RpbSearchQueryResp::set_max_score(float value) {
  set_has_max_score();
  max_score_ = value;
  // @@protoc_insertion_point(field_set:RpbSearchQueryResp.max_score)
}

// optional uint32 num_found = 3;
inline bool RpbSearchQueryResp::has_num_found() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RpbSearchQueryResp::set_has_num_found() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RpbSearchQueryResp::clear_has_num_found() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RpbSearchQueryResp::clear_num_found() {
  num_found_ = 0u;
  clear_has_num_found();
}
inline ::google::protobuf::uint32 RpbSearchQueryResp::num_found() const {
  // @@protoc_insertion_point(field_get:RpbSearchQueryResp.num_found)
  return num_found_;
}
inline void RpbSearchQueryResp::set_num_found(::google::protobuf::uint32 value) {
  set_has_num_found();
  num_found_ = value;
  // @@protoc_insertion_point(field_set:RpbSearchQueryResp.num_found)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_riak_5fsearch_2eproto__INCLUDED
