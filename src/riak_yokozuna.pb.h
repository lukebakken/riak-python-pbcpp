// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: riak_yokozuna.proto

#ifndef PROTOBUF_riak_5fyokozuna_2eproto__INCLUDED
#define PROTOBUF_riak_5fyokozuna_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_riak_5fyokozuna_2eproto();
void protobuf_AssignDesc_riak_5fyokozuna_2eproto();
void protobuf_ShutdownFile_riak_5fyokozuna_2eproto();

class RpbYokozunaIndex;
class RpbYokozunaIndexGetReq;
class RpbYokozunaIndexGetResp;
class RpbYokozunaIndexPutReq;
class RpbYokozunaIndexDeleteReq;
class RpbYokozunaSchema;
class RpbYokozunaSchemaPutReq;
class RpbYokozunaSchemaGetReq;
class RpbYokozunaSchemaGetResp;

// ===================================================================

class RpbYokozunaIndex : public ::google::protobuf::Message {
 public:
  RpbYokozunaIndex();
  virtual ~RpbYokozunaIndex();

  RpbYokozunaIndex(const RpbYokozunaIndex& from);

  inline RpbYokozunaIndex& operator=(const RpbYokozunaIndex& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RpbYokozunaIndex& default_instance();

  void Swap(RpbYokozunaIndex* other);

  // implements Message ----------------------------------------------

  RpbYokozunaIndex* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RpbYokozunaIndex& from);
  void MergeFrom(const RpbYokozunaIndex& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional bytes schema = 2;
  inline bool has_schema() const;
  inline void clear_schema();
  static const int kSchemaFieldNumber = 2;
  inline const ::std::string& schema() const;
  inline void set_schema(const ::std::string& value);
  inline void set_schema(const char* value);
  inline void set_schema(const void* value, size_t size);
  inline ::std::string* mutable_schema();
  inline ::std::string* release_schema();
  inline void set_allocated_schema(::std::string* schema);

  // optional uint32 n_val = 3;
  inline bool has_n_val() const;
  inline void clear_n_val();
  static const int kNValFieldNumber = 3;
  inline ::google::protobuf::uint32 n_val() const;
  inline void set_n_val(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:RpbYokozunaIndex)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_schema();
  inline void clear_has_schema();
  inline void set_has_n_val();
  inline void clear_has_n_val();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* schema_;
  ::google::protobuf::uint32 n_val_;
  friend void  protobuf_AddDesc_riak_5fyokozuna_2eproto();
  friend void protobuf_AssignDesc_riak_5fyokozuna_2eproto();
  friend void protobuf_ShutdownFile_riak_5fyokozuna_2eproto();

  void InitAsDefaultInstance();
  static RpbYokozunaIndex* default_instance_;
};
// -------------------------------------------------------------------

class RpbYokozunaIndexGetReq : public ::google::protobuf::Message {
 public:
  RpbYokozunaIndexGetReq();
  virtual ~RpbYokozunaIndexGetReq();

  RpbYokozunaIndexGetReq(const RpbYokozunaIndexGetReq& from);

  inline RpbYokozunaIndexGetReq& operator=(const RpbYokozunaIndexGetReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RpbYokozunaIndexGetReq& default_instance();

  void Swap(RpbYokozunaIndexGetReq* other);

  // implements Message ----------------------------------------------

  RpbYokozunaIndexGetReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RpbYokozunaIndexGetReq& from);
  void MergeFrom(const RpbYokozunaIndexGetReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:RpbYokozunaIndexGetReq)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  friend void  protobuf_AddDesc_riak_5fyokozuna_2eproto();
  friend void protobuf_AssignDesc_riak_5fyokozuna_2eproto();
  friend void protobuf_ShutdownFile_riak_5fyokozuna_2eproto();

  void InitAsDefaultInstance();
  static RpbYokozunaIndexGetReq* default_instance_;
};
// -------------------------------------------------------------------

class RpbYokozunaIndexGetResp : public ::google::protobuf::Message {
 public:
  RpbYokozunaIndexGetResp();
  virtual ~RpbYokozunaIndexGetResp();

  RpbYokozunaIndexGetResp(const RpbYokozunaIndexGetResp& from);

  inline RpbYokozunaIndexGetResp& operator=(const RpbYokozunaIndexGetResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RpbYokozunaIndexGetResp& default_instance();

  void Swap(RpbYokozunaIndexGetResp* other);

  // implements Message ----------------------------------------------

  RpbYokozunaIndexGetResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RpbYokozunaIndexGetResp& from);
  void MergeFrom(const RpbYokozunaIndexGetResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .RpbYokozunaIndex index = 1;
  inline int index_size() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline const ::RpbYokozunaIndex& index(int index) const;
  inline ::RpbYokozunaIndex* mutable_index(int index);
  inline ::RpbYokozunaIndex* add_index();
  inline const ::google::protobuf::RepeatedPtrField< ::RpbYokozunaIndex >&
      index() const;
  inline ::google::protobuf::RepeatedPtrField< ::RpbYokozunaIndex >*
      mutable_index();

  // @@protoc_insertion_point(class_scope:RpbYokozunaIndexGetResp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::RpbYokozunaIndex > index_;
  friend void  protobuf_AddDesc_riak_5fyokozuna_2eproto();
  friend void protobuf_AssignDesc_riak_5fyokozuna_2eproto();
  friend void protobuf_ShutdownFile_riak_5fyokozuna_2eproto();

  void InitAsDefaultInstance();
  static RpbYokozunaIndexGetResp* default_instance_;
};
// -------------------------------------------------------------------

class RpbYokozunaIndexPutReq : public ::google::protobuf::Message {
 public:
  RpbYokozunaIndexPutReq();
  virtual ~RpbYokozunaIndexPutReq();

  RpbYokozunaIndexPutReq(const RpbYokozunaIndexPutReq& from);

  inline RpbYokozunaIndexPutReq& operator=(const RpbYokozunaIndexPutReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RpbYokozunaIndexPutReq& default_instance();

  void Swap(RpbYokozunaIndexPutReq* other);

  // implements Message ----------------------------------------------

  RpbYokozunaIndexPutReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RpbYokozunaIndexPutReq& from);
  void MergeFrom(const RpbYokozunaIndexPutReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .RpbYokozunaIndex index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline const ::RpbYokozunaIndex& index() const;
  inline ::RpbYokozunaIndex* mutable_index();
  inline ::RpbYokozunaIndex* release_index();
  inline void set_allocated_index(::RpbYokozunaIndex* index);

  // optional uint32 timeout = 2;
  inline bool has_timeout() const;
  inline void clear_timeout();
  static const int kTimeoutFieldNumber = 2;
  inline ::google::protobuf::uint32 timeout() const;
  inline void set_timeout(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:RpbYokozunaIndexPutReq)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_timeout();
  inline void clear_has_timeout();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::RpbYokozunaIndex* index_;
  ::google::protobuf::uint32 timeout_;
  friend void  protobuf_AddDesc_riak_5fyokozuna_2eproto();
  friend void protobuf_AssignDesc_riak_5fyokozuna_2eproto();
  friend void protobuf_ShutdownFile_riak_5fyokozuna_2eproto();

  void InitAsDefaultInstance();
  static RpbYokozunaIndexPutReq* default_instance_;
};
// -------------------------------------------------------------------

class RpbYokozunaIndexDeleteReq : public ::google::protobuf::Message {
 public:
  RpbYokozunaIndexDeleteReq();
  virtual ~RpbYokozunaIndexDeleteReq();

  RpbYokozunaIndexDeleteReq(const RpbYokozunaIndexDeleteReq& from);

  inline RpbYokozunaIndexDeleteReq& operator=(const RpbYokozunaIndexDeleteReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RpbYokozunaIndexDeleteReq& default_instance();

  void Swap(RpbYokozunaIndexDeleteReq* other);

  // implements Message ----------------------------------------------

  RpbYokozunaIndexDeleteReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RpbYokozunaIndexDeleteReq& from);
  void MergeFrom(const RpbYokozunaIndexDeleteReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:RpbYokozunaIndexDeleteReq)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  friend void  protobuf_AddDesc_riak_5fyokozuna_2eproto();
  friend void protobuf_AssignDesc_riak_5fyokozuna_2eproto();
  friend void protobuf_ShutdownFile_riak_5fyokozuna_2eproto();

  void InitAsDefaultInstance();
  static RpbYokozunaIndexDeleteReq* default_instance_;
};
// -------------------------------------------------------------------

class RpbYokozunaSchema : public ::google::protobuf::Message {
 public:
  RpbYokozunaSchema();
  virtual ~RpbYokozunaSchema();

  RpbYokozunaSchema(const RpbYokozunaSchema& from);

  inline RpbYokozunaSchema& operator=(const RpbYokozunaSchema& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RpbYokozunaSchema& default_instance();

  void Swap(RpbYokozunaSchema* other);

  // implements Message ----------------------------------------------

  RpbYokozunaSchema* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RpbYokozunaSchema& from);
  void MergeFrom(const RpbYokozunaSchema& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional bytes content = 2;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 2;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const void* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:RpbYokozunaSchema)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* content_;
  friend void  protobuf_AddDesc_riak_5fyokozuna_2eproto();
  friend void protobuf_AssignDesc_riak_5fyokozuna_2eproto();
  friend void protobuf_ShutdownFile_riak_5fyokozuna_2eproto();

  void InitAsDefaultInstance();
  static RpbYokozunaSchema* default_instance_;
};
// -------------------------------------------------------------------

class RpbYokozunaSchemaPutReq : public ::google::protobuf::Message {
 public:
  RpbYokozunaSchemaPutReq();
  virtual ~RpbYokozunaSchemaPutReq();

  RpbYokozunaSchemaPutReq(const RpbYokozunaSchemaPutReq& from);

  inline RpbYokozunaSchemaPutReq& operator=(const RpbYokozunaSchemaPutReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RpbYokozunaSchemaPutReq& default_instance();

  void Swap(RpbYokozunaSchemaPutReq* other);

  // implements Message ----------------------------------------------

  RpbYokozunaSchemaPutReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RpbYokozunaSchemaPutReq& from);
  void MergeFrom(const RpbYokozunaSchemaPutReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .RpbYokozunaSchema schema = 1;
  inline bool has_schema() const;
  inline void clear_schema();
  static const int kSchemaFieldNumber = 1;
  inline const ::RpbYokozunaSchema& schema() const;
  inline ::RpbYokozunaSchema* mutable_schema();
  inline ::RpbYokozunaSchema* release_schema();
  inline void set_allocated_schema(::RpbYokozunaSchema* schema);

  // @@protoc_insertion_point(class_scope:RpbYokozunaSchemaPutReq)
 private:
  inline void set_has_schema();
  inline void clear_has_schema();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::RpbYokozunaSchema* schema_;
  friend void  protobuf_AddDesc_riak_5fyokozuna_2eproto();
  friend void protobuf_AssignDesc_riak_5fyokozuna_2eproto();
  friend void protobuf_ShutdownFile_riak_5fyokozuna_2eproto();

  void InitAsDefaultInstance();
  static RpbYokozunaSchemaPutReq* default_instance_;
};
// -------------------------------------------------------------------

class RpbYokozunaSchemaGetReq : public ::google::protobuf::Message {
 public:
  RpbYokozunaSchemaGetReq();
  virtual ~RpbYokozunaSchemaGetReq();

  RpbYokozunaSchemaGetReq(const RpbYokozunaSchemaGetReq& from);

  inline RpbYokozunaSchemaGetReq& operator=(const RpbYokozunaSchemaGetReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RpbYokozunaSchemaGetReq& default_instance();

  void Swap(RpbYokozunaSchemaGetReq* other);

  // implements Message ----------------------------------------------

  RpbYokozunaSchemaGetReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RpbYokozunaSchemaGetReq& from);
  void MergeFrom(const RpbYokozunaSchemaGetReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:RpbYokozunaSchemaGetReq)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  friend void  protobuf_AddDesc_riak_5fyokozuna_2eproto();
  friend void protobuf_AssignDesc_riak_5fyokozuna_2eproto();
  friend void protobuf_ShutdownFile_riak_5fyokozuna_2eproto();

  void InitAsDefaultInstance();
  static RpbYokozunaSchemaGetReq* default_instance_;
};
// -------------------------------------------------------------------

class RpbYokozunaSchemaGetResp : public ::google::protobuf::Message {
 public:
  RpbYokozunaSchemaGetResp();
  virtual ~RpbYokozunaSchemaGetResp();

  RpbYokozunaSchemaGetResp(const RpbYokozunaSchemaGetResp& from);

  inline RpbYokozunaSchemaGetResp& operator=(const RpbYokozunaSchemaGetResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RpbYokozunaSchemaGetResp& default_instance();

  void Swap(RpbYokozunaSchemaGetResp* other);

  // implements Message ----------------------------------------------

  RpbYokozunaSchemaGetResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RpbYokozunaSchemaGetResp& from);
  void MergeFrom(const RpbYokozunaSchemaGetResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .RpbYokozunaSchema schema = 1;
  inline bool has_schema() const;
  inline void clear_schema();
  static const int kSchemaFieldNumber = 1;
  inline const ::RpbYokozunaSchema& schema() const;
  inline ::RpbYokozunaSchema* mutable_schema();
  inline ::RpbYokozunaSchema* release_schema();
  inline void set_allocated_schema(::RpbYokozunaSchema* schema);

  // @@protoc_insertion_point(class_scope:RpbYokozunaSchemaGetResp)
 private:
  inline void set_has_schema();
  inline void clear_has_schema();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::RpbYokozunaSchema* schema_;
  friend void  protobuf_AddDesc_riak_5fyokozuna_2eproto();
  friend void protobuf_AssignDesc_riak_5fyokozuna_2eproto();
  friend void protobuf_ShutdownFile_riak_5fyokozuna_2eproto();

  void InitAsDefaultInstance();
  static RpbYokozunaSchemaGetResp* default_instance_;
};
// ===================================================================


// ===================================================================

// RpbYokozunaIndex

// required bytes name = 1;
inline bool RpbYokozunaIndex::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RpbYokozunaIndex::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RpbYokozunaIndex::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RpbYokozunaIndex::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& RpbYokozunaIndex::name() const {
  // @@protoc_insertion_point(field_get:RpbYokozunaIndex.name)
  return *name_;
}
inline void RpbYokozunaIndex::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:RpbYokozunaIndex.name)
}
inline void RpbYokozunaIndex::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:RpbYokozunaIndex.name)
}
inline void RpbYokozunaIndex::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RpbYokozunaIndex.name)
}
inline ::std::string* RpbYokozunaIndex::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:RpbYokozunaIndex.name)
  return name_;
}
inline ::std::string* RpbYokozunaIndex::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RpbYokozunaIndex::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:RpbYokozunaIndex.name)
}

// optional bytes schema = 2;
inline bool RpbYokozunaIndex::has_schema() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RpbYokozunaIndex::set_has_schema() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RpbYokozunaIndex::clear_has_schema() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RpbYokozunaIndex::clear_schema() {
  if (schema_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    schema_->clear();
  }
  clear_has_schema();
}
inline const ::std::string& RpbYokozunaIndex::schema() const {
  // @@protoc_insertion_point(field_get:RpbYokozunaIndex.schema)
  return *schema_;
}
inline void RpbYokozunaIndex::set_schema(const ::std::string& value) {
  set_has_schema();
  if (schema_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    schema_ = new ::std::string;
  }
  schema_->assign(value);
  // @@protoc_insertion_point(field_set:RpbYokozunaIndex.schema)
}
inline void RpbYokozunaIndex::set_schema(const char* value) {
  set_has_schema();
  if (schema_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    schema_ = new ::std::string;
  }
  schema_->assign(value);
  // @@protoc_insertion_point(field_set_char:RpbYokozunaIndex.schema)
}
inline void RpbYokozunaIndex::set_schema(const void* value, size_t size) {
  set_has_schema();
  if (schema_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    schema_ = new ::std::string;
  }
  schema_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RpbYokozunaIndex.schema)
}
inline ::std::string* RpbYokozunaIndex::mutable_schema() {
  set_has_schema();
  if (schema_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    schema_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:RpbYokozunaIndex.schema)
  return schema_;
}
inline ::std::string* RpbYokozunaIndex::release_schema() {
  clear_has_schema();
  if (schema_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = schema_;
    schema_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RpbYokozunaIndex::set_allocated_schema(::std::string* schema) {
  if (schema_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete schema_;
  }
  if (schema) {
    set_has_schema();
    schema_ = schema;
  } else {
    clear_has_schema();
    schema_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:RpbYokozunaIndex.schema)
}

// optional uint32 n_val = 3;
inline bool RpbYokozunaIndex::has_n_val() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RpbYokozunaIndex::set_has_n_val() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RpbYokozunaIndex::clear_has_n_val() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RpbYokozunaIndex::clear_n_val() {
  n_val_ = 0u;
  clear_has_n_val();
}
inline ::google::protobuf::uint32 RpbYokozunaIndex::n_val() const {
  // @@protoc_insertion_point(field_get:RpbYokozunaIndex.n_val)
  return n_val_;
}
inline void RpbYokozunaIndex::set_n_val(::google::protobuf::uint32 value) {
  set_has_n_val();
  n_val_ = value;
  // @@protoc_insertion_point(field_set:RpbYokozunaIndex.n_val)
}

// -------------------------------------------------------------------

// RpbYokozunaIndexGetReq

// optional bytes name = 1;
inline bool RpbYokozunaIndexGetReq::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RpbYokozunaIndexGetReq::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RpbYokozunaIndexGetReq::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RpbYokozunaIndexGetReq::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& RpbYokozunaIndexGetReq::name() const {
  // @@protoc_insertion_point(field_get:RpbYokozunaIndexGetReq.name)
  return *name_;
}
inline void RpbYokozunaIndexGetReq::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:RpbYokozunaIndexGetReq.name)
}
inline void RpbYokozunaIndexGetReq::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:RpbYokozunaIndexGetReq.name)
}
inline void RpbYokozunaIndexGetReq::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RpbYokozunaIndexGetReq.name)
}
inline ::std::string* RpbYokozunaIndexGetReq::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:RpbYokozunaIndexGetReq.name)
  return name_;
}
inline ::std::string* RpbYokozunaIndexGetReq::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RpbYokozunaIndexGetReq::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:RpbYokozunaIndexGetReq.name)
}

// -------------------------------------------------------------------

// RpbYokozunaIndexGetResp

// repeated .RpbYokozunaIndex index = 1;
inline int RpbYokozunaIndexGetResp::index_size() const {
  return index_.size();
}
inline void RpbYokozunaIndexGetResp::clear_index() {
  index_.Clear();
}
inline const ::RpbYokozunaIndex& RpbYokozunaIndexGetResp::index(int index) const {
  // @@protoc_insertion_point(field_get:RpbYokozunaIndexGetResp.index)
  return index_.Get(index);
}
inline ::RpbYokozunaIndex* RpbYokozunaIndexGetResp::mutable_index(int index) {
  // @@protoc_insertion_point(field_mutable:RpbYokozunaIndexGetResp.index)
  return index_.Mutable(index);
}
inline ::RpbYokozunaIndex* RpbYokozunaIndexGetResp::add_index() {
  // @@protoc_insertion_point(field_add:RpbYokozunaIndexGetResp.index)
  return index_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::RpbYokozunaIndex >&
RpbYokozunaIndexGetResp::index() const {
  // @@protoc_insertion_point(field_list:RpbYokozunaIndexGetResp.index)
  return index_;
}
inline ::google::protobuf::RepeatedPtrField< ::RpbYokozunaIndex >*
RpbYokozunaIndexGetResp::mutable_index() {
  // @@protoc_insertion_point(field_mutable_list:RpbYokozunaIndexGetResp.index)
  return &index_;
}

// -------------------------------------------------------------------

// RpbYokozunaIndexPutReq

// required .RpbYokozunaIndex index = 1;
inline bool RpbYokozunaIndexPutReq::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RpbYokozunaIndexPutReq::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RpbYokozunaIndexPutReq::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RpbYokozunaIndexPutReq::clear_index() {
  if (index_ != NULL) index_->::RpbYokozunaIndex::Clear();
  clear_has_index();
}
inline const ::RpbYokozunaIndex& RpbYokozunaIndexPutReq::index() const {
  // @@protoc_insertion_point(field_get:RpbYokozunaIndexPutReq.index)
  return index_ != NULL ? *index_ : *default_instance_->index_;
}
inline ::RpbYokozunaIndex* RpbYokozunaIndexPutReq::mutable_index() {
  set_has_index();
  if (index_ == NULL) index_ = new ::RpbYokozunaIndex;
  // @@protoc_insertion_point(field_mutable:RpbYokozunaIndexPutReq.index)
  return index_;
}
inline ::RpbYokozunaIndex* RpbYokozunaIndexPutReq::release_index() {
  clear_has_index();
  ::RpbYokozunaIndex* temp = index_;
  index_ = NULL;
  return temp;
}
inline void RpbYokozunaIndexPutReq::set_allocated_index(::RpbYokozunaIndex* index) {
  delete index_;
  index_ = index;
  if (index) {
    set_has_index();
  } else {
    clear_has_index();
  }
  // @@protoc_insertion_point(field_set_allocated:RpbYokozunaIndexPutReq.index)
}

// optional uint32 timeout = 2;
inline bool RpbYokozunaIndexPutReq::has_timeout() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RpbYokozunaIndexPutReq::set_has_timeout() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RpbYokozunaIndexPutReq::clear_has_timeout() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RpbYokozunaIndexPutReq::clear_timeout() {
  timeout_ = 0u;
  clear_has_timeout();
}
inline ::google::protobuf::uint32 RpbYokozunaIndexPutReq::timeout() const {
  // @@protoc_insertion_point(field_get:RpbYokozunaIndexPutReq.timeout)
  return timeout_;
}
inline void RpbYokozunaIndexPutReq::set_timeout(::google::protobuf::uint32 value) {
  set_has_timeout();
  timeout_ = value;
  // @@protoc_insertion_point(field_set:RpbYokozunaIndexPutReq.timeout)
}

// -------------------------------------------------------------------

// RpbYokozunaIndexDeleteReq

// required bytes name = 1;
inline bool RpbYokozunaIndexDeleteReq::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RpbYokozunaIndexDeleteReq::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RpbYokozunaIndexDeleteReq::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RpbYokozunaIndexDeleteReq::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& RpbYokozunaIndexDeleteReq::name() const {
  // @@protoc_insertion_point(field_get:RpbYokozunaIndexDeleteReq.name)
  return *name_;
}
inline void RpbYokozunaIndexDeleteReq::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:RpbYokozunaIndexDeleteReq.name)
}
inline void RpbYokozunaIndexDeleteReq::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:RpbYokozunaIndexDeleteReq.name)
}
inline void RpbYokozunaIndexDeleteReq::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RpbYokozunaIndexDeleteReq.name)
}
inline ::std::string* RpbYokozunaIndexDeleteReq::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:RpbYokozunaIndexDeleteReq.name)
  return name_;
}
inline ::std::string* RpbYokozunaIndexDeleteReq::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RpbYokozunaIndexDeleteReq::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:RpbYokozunaIndexDeleteReq.name)
}

// -------------------------------------------------------------------

// RpbYokozunaSchema

// required bytes name = 1;
inline bool RpbYokozunaSchema::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RpbYokozunaSchema::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RpbYokozunaSchema::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RpbYokozunaSchema::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& RpbYokozunaSchema::name() const {
  // @@protoc_insertion_point(field_get:RpbYokozunaSchema.name)
  return *name_;
}
inline void RpbYokozunaSchema::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:RpbYokozunaSchema.name)
}
inline void RpbYokozunaSchema::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:RpbYokozunaSchema.name)
}
inline void RpbYokozunaSchema::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RpbYokozunaSchema.name)
}
inline ::std::string* RpbYokozunaSchema::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:RpbYokozunaSchema.name)
  return name_;
}
inline ::std::string* RpbYokozunaSchema::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RpbYokozunaSchema::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:RpbYokozunaSchema.name)
}

// optional bytes content = 2;
inline bool RpbYokozunaSchema::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RpbYokozunaSchema::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RpbYokozunaSchema::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RpbYokozunaSchema::clear_content() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& RpbYokozunaSchema::content() const {
  // @@protoc_insertion_point(field_get:RpbYokozunaSchema.content)
  return *content_;
}
inline void RpbYokozunaSchema::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set:RpbYokozunaSchema.content)
}
inline void RpbYokozunaSchema::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set_char:RpbYokozunaSchema.content)
}
inline void RpbYokozunaSchema::set_content(const void* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RpbYokozunaSchema.content)
}
inline ::std::string* RpbYokozunaSchema::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:RpbYokozunaSchema.content)
  return content_;
}
inline ::std::string* RpbYokozunaSchema::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RpbYokozunaSchema::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:RpbYokozunaSchema.content)
}

// -------------------------------------------------------------------

// RpbYokozunaSchemaPutReq

// required .RpbYokozunaSchema schema = 1;
inline bool RpbYokozunaSchemaPutReq::has_schema() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RpbYokozunaSchemaPutReq::set_has_schema() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RpbYokozunaSchemaPutReq::clear_has_schema() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RpbYokozunaSchemaPutReq::clear_schema() {
  if (schema_ != NULL) schema_->::RpbYokozunaSchema::Clear();
  clear_has_schema();
}
inline const ::RpbYokozunaSchema& RpbYokozunaSchemaPutReq::schema() const {
  // @@protoc_insertion_point(field_get:RpbYokozunaSchemaPutReq.schema)
  return schema_ != NULL ? *schema_ : *default_instance_->schema_;
}
inline ::RpbYokozunaSchema* RpbYokozunaSchemaPutReq::mutable_schema() {
  set_has_schema();
  if (schema_ == NULL) schema_ = new ::RpbYokozunaSchema;
  // @@protoc_insertion_point(field_mutable:RpbYokozunaSchemaPutReq.schema)
  return schema_;
}
inline ::RpbYokozunaSchema* RpbYokozunaSchemaPutReq::release_schema() {
  clear_has_schema();
  ::RpbYokozunaSchema* temp = schema_;
  schema_ = NULL;
  return temp;
}
inline void RpbYokozunaSchemaPutReq::set_allocated_schema(::RpbYokozunaSchema* schema) {
  delete schema_;
  schema_ = schema;
  if (schema) {
    set_has_schema();
  } else {
    clear_has_schema();
  }
  // @@protoc_insertion_point(field_set_allocated:RpbYokozunaSchemaPutReq.schema)
}

// -------------------------------------------------------------------

// RpbYokozunaSchemaGetReq

// required bytes name = 1;
inline bool RpbYokozunaSchemaGetReq::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RpbYokozunaSchemaGetReq::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RpbYokozunaSchemaGetReq::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RpbYokozunaSchemaGetReq::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& RpbYokozunaSchemaGetReq::name() const {
  // @@protoc_insertion_point(field_get:RpbYokozunaSchemaGetReq.name)
  return *name_;
}
inline void RpbYokozunaSchemaGetReq::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:RpbYokozunaSchemaGetReq.name)
}
inline void RpbYokozunaSchemaGetReq::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:RpbYokozunaSchemaGetReq.name)
}
inline void RpbYokozunaSchemaGetReq::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RpbYokozunaSchemaGetReq.name)
}
inline ::std::string* RpbYokozunaSchemaGetReq::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:RpbYokozunaSchemaGetReq.name)
  return name_;
}
inline ::std::string* RpbYokozunaSchemaGetReq::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RpbYokozunaSchemaGetReq::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:RpbYokozunaSchemaGetReq.name)
}

// -------------------------------------------------------------------

// RpbYokozunaSchemaGetResp

// required .RpbYokozunaSchema schema = 1;
inline bool RpbYokozunaSchemaGetResp::has_schema() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RpbYokozunaSchemaGetResp::set_has_schema() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RpbYokozunaSchemaGetResp::clear_has_schema() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RpbYokozunaSchemaGetResp::clear_schema() {
  if (schema_ != NULL) schema_->::RpbYokozunaSchema::Clear();
  clear_has_schema();
}
inline const ::RpbYokozunaSchema& RpbYokozunaSchemaGetResp::schema() const {
  // @@protoc_insertion_point(field_get:RpbYokozunaSchemaGetResp.schema)
  return schema_ != NULL ? *schema_ : *default_instance_->schema_;
}
inline ::RpbYokozunaSchema* RpbYokozunaSchemaGetResp::mutable_schema() {
  set_has_schema();
  if (schema_ == NULL) schema_ = new ::RpbYokozunaSchema;
  // @@protoc_insertion_point(field_mutable:RpbYokozunaSchemaGetResp.schema)
  return schema_;
}
inline ::RpbYokozunaSchema* RpbYokozunaSchemaGetResp::release_schema() {
  clear_has_schema();
  ::RpbYokozunaSchema* temp = schema_;
  schema_ = NULL;
  return temp;
}
inline void RpbYokozunaSchemaGetResp::set_allocated_schema(::RpbYokozunaSchema* schema) {
  delete schema_;
  schema_ = schema;
  if (schema) {
    set_has_schema();
  } else {
    clear_has_schema();
  }
  // @@protoc_insertion_point(field_set_allocated:RpbYokozunaSchemaGetResp.schema)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_riak_5fyokozuna_2eproto__INCLUDED
