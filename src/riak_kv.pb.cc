// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: riak_kv.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "riak_kv.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* RpbGetClientIdResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbGetClientIdResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbSetClientIdReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbSetClientIdReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbGetReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbGetReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbGetResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbGetResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbPutReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbPutReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbPutResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbPutResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbDelReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbDelReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbListBucketsReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbListBucketsReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbListBucketsResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbListBucketsResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbListKeysReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbListKeysReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbListKeysResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbListKeysResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbMapRedReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbMapRedReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbMapRedResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbMapRedResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbIndexReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbIndexReq_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RpbIndexReq_IndexQueryType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* RpbIndexResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbIndexResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbIndexBodyResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbIndexBodyResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbCSBucketReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbCSBucketReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbCSBucketResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbCSBucketResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbIndexObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbIndexObject_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbContent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbContent_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbLink_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbLink_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbCounterUpdateReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbCounterUpdateReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbCounterUpdateResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbCounterUpdateResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbCounterGetReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbCounterGetReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbCounterGetResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbCounterGetResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbGetBucketKeyPreflistReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbGetBucketKeyPreflistReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbGetBucketKeyPreflistResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbGetBucketKeyPreflistResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbBucketKeyPreflistItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbBucketKeyPreflistItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbCoverageReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbCoverageReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbCoverageResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbCoverageResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbCoverageEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbCoverageEntry_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_riak_5fkv_2eproto() {
  protobuf_AddDesc_riak_5fkv_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "riak_kv.proto");
  GOOGLE_CHECK(file != NULL);
  RpbGetClientIdResp_descriptor_ = file->message_type(0);
  static const int RpbGetClientIdResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetClientIdResp, client_id_),
  };
  RpbGetClientIdResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbGetClientIdResp_descriptor_,
      RpbGetClientIdResp::default_instance_,
      RpbGetClientIdResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetClientIdResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetClientIdResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbGetClientIdResp));
  RpbSetClientIdReq_descriptor_ = file->message_type(1);
  static const int RpbSetClientIdReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbSetClientIdReq, client_id_),
  };
  RpbSetClientIdReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbSetClientIdReq_descriptor_,
      RpbSetClientIdReq::default_instance_,
      RpbSetClientIdReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbSetClientIdReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbSetClientIdReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbSetClientIdReq));
  RpbGetReq_descriptor_ = file->message_type(2);
  static const int RpbGetReq_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetReq, bucket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetReq, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetReq, r_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetReq, pr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetReq, basic_quorum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetReq, notfound_ok_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetReq, if_modified_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetReq, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetReq, deletedvclock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetReq, timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetReq, sloppy_quorum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetReq, n_val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetReq, type_),
  };
  RpbGetReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbGetReq_descriptor_,
      RpbGetReq::default_instance_,
      RpbGetReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbGetReq));
  RpbGetResp_descriptor_ = file->message_type(3);
  static const int RpbGetResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetResp, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetResp, vclock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetResp, unchanged_),
  };
  RpbGetResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbGetResp_descriptor_,
      RpbGetResp::default_instance_,
      RpbGetResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbGetResp));
  RpbPutReq_descriptor_ = file->message_type(4);
  static const int RpbPutReq_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbPutReq, bucket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbPutReq, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbPutReq, vclock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbPutReq, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbPutReq, w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbPutReq, dw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbPutReq, return_body_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbPutReq, pw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbPutReq, if_not_modified_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbPutReq, if_none_match_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbPutReq, return_head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbPutReq, timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbPutReq, asis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbPutReq, sloppy_quorum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbPutReq, n_val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbPutReq, type_),
  };
  RpbPutReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbPutReq_descriptor_,
      RpbPutReq::default_instance_,
      RpbPutReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbPutReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbPutReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbPutReq));
  RpbPutResp_descriptor_ = file->message_type(5);
  static const int RpbPutResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbPutResp, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbPutResp, vclock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbPutResp, key_),
  };
  RpbPutResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbPutResp_descriptor_,
      RpbPutResp::default_instance_,
      RpbPutResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbPutResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbPutResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbPutResp));
  RpbDelReq_descriptor_ = file->message_type(6);
  static const int RpbDelReq_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbDelReq, bucket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbDelReq, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbDelReq, rw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbDelReq, vclock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbDelReq, r_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbDelReq, w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbDelReq, pr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbDelReq, pw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbDelReq, dw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbDelReq, timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbDelReq, sloppy_quorum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbDelReq, n_val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbDelReq, type_),
  };
  RpbDelReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbDelReq_descriptor_,
      RpbDelReq::default_instance_,
      RpbDelReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbDelReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbDelReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbDelReq));
  RpbListBucketsReq_descriptor_ = file->message_type(7);
  static const int RpbListBucketsReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbListBucketsReq, timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbListBucketsReq, stream_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbListBucketsReq, type_),
  };
  RpbListBucketsReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbListBucketsReq_descriptor_,
      RpbListBucketsReq::default_instance_,
      RpbListBucketsReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbListBucketsReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbListBucketsReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbListBucketsReq));
  RpbListBucketsResp_descriptor_ = file->message_type(8);
  static const int RpbListBucketsResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbListBucketsResp, buckets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbListBucketsResp, done_),
  };
  RpbListBucketsResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbListBucketsResp_descriptor_,
      RpbListBucketsResp::default_instance_,
      RpbListBucketsResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbListBucketsResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbListBucketsResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbListBucketsResp));
  RpbListKeysReq_descriptor_ = file->message_type(9);
  static const int RpbListKeysReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbListKeysReq, bucket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbListKeysReq, timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbListKeysReq, type_),
  };
  RpbListKeysReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbListKeysReq_descriptor_,
      RpbListKeysReq::default_instance_,
      RpbListKeysReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbListKeysReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbListKeysReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbListKeysReq));
  RpbListKeysResp_descriptor_ = file->message_type(10);
  static const int RpbListKeysResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbListKeysResp, keys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbListKeysResp, done_),
  };
  RpbListKeysResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbListKeysResp_descriptor_,
      RpbListKeysResp::default_instance_,
      RpbListKeysResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbListKeysResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbListKeysResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbListKeysResp));
  RpbMapRedReq_descriptor_ = file->message_type(11);
  static const int RpbMapRedReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbMapRedReq, request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbMapRedReq, content_type_),
  };
  RpbMapRedReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbMapRedReq_descriptor_,
      RpbMapRedReq::default_instance_,
      RpbMapRedReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbMapRedReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbMapRedReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbMapRedReq));
  RpbMapRedResp_descriptor_ = file->message_type(12);
  static const int RpbMapRedResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbMapRedResp, phase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbMapRedResp, response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbMapRedResp, done_),
  };
  RpbMapRedResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbMapRedResp_descriptor_,
      RpbMapRedResp::default_instance_,
      RpbMapRedResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbMapRedResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbMapRedResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbMapRedResp));
  RpbIndexReq_descriptor_ = file->message_type(13);
  static const int RpbIndexReq_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbIndexReq, bucket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbIndexReq, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbIndexReq, qtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbIndexReq, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbIndexReq, range_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbIndexReq, range_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbIndexReq, return_terms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbIndexReq, stream_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbIndexReq, max_results_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbIndexReq, continuation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbIndexReq, timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbIndexReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbIndexReq, term_regex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbIndexReq, pagination_sort_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbIndexReq, cover_context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbIndexReq, return_body_),
  };
  RpbIndexReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbIndexReq_descriptor_,
      RpbIndexReq::default_instance_,
      RpbIndexReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbIndexReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbIndexReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbIndexReq));
  RpbIndexReq_IndexQueryType_descriptor_ = RpbIndexReq_descriptor_->enum_type(0);
  RpbIndexResp_descriptor_ = file->message_type(14);
  static const int RpbIndexResp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbIndexResp, keys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbIndexResp, results_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbIndexResp, continuation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbIndexResp, done_),
  };
  RpbIndexResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbIndexResp_descriptor_,
      RpbIndexResp::default_instance_,
      RpbIndexResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbIndexResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbIndexResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbIndexResp));
  RpbIndexBodyResp_descriptor_ = file->message_type(15);
  static const int RpbIndexBodyResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbIndexBodyResp, objects_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbIndexBodyResp, continuation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbIndexBodyResp, done_),
  };
  RpbIndexBodyResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbIndexBodyResp_descriptor_,
      RpbIndexBodyResp::default_instance_,
      RpbIndexBodyResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbIndexBodyResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbIndexBodyResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbIndexBodyResp));
  RpbCSBucketReq_descriptor_ = file->message_type(16);
  static const int RpbCSBucketReq_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCSBucketReq, bucket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCSBucketReq, start_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCSBucketReq, end_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCSBucketReq, start_incl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCSBucketReq, end_incl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCSBucketReq, continuation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCSBucketReq, max_results_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCSBucketReq, timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCSBucketReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCSBucketReq, cover_context_),
  };
  RpbCSBucketReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbCSBucketReq_descriptor_,
      RpbCSBucketReq::default_instance_,
      RpbCSBucketReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCSBucketReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCSBucketReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbCSBucketReq));
  RpbCSBucketResp_descriptor_ = file->message_type(17);
  static const int RpbCSBucketResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCSBucketResp, objects_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCSBucketResp, continuation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCSBucketResp, done_),
  };
  RpbCSBucketResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbCSBucketResp_descriptor_,
      RpbCSBucketResp::default_instance_,
      RpbCSBucketResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCSBucketResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCSBucketResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbCSBucketResp));
  RpbIndexObject_descriptor_ = file->message_type(18);
  static const int RpbIndexObject_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbIndexObject, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbIndexObject, object_),
  };
  RpbIndexObject_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbIndexObject_descriptor_,
      RpbIndexObject::default_instance_,
      RpbIndexObject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbIndexObject, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbIndexObject, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbIndexObject));
  RpbContent_descriptor_ = file->message_type(19);
  static const int RpbContent_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbContent, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbContent, content_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbContent, charset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbContent, content_encoding_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbContent, vtag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbContent, links_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbContent, last_mod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbContent, last_mod_usecs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbContent, usermeta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbContent, indexes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbContent, deleted_),
  };
  RpbContent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbContent_descriptor_,
      RpbContent::default_instance_,
      RpbContent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbContent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbContent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbContent));
  RpbLink_descriptor_ = file->message_type(20);
  static const int RpbLink_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbLink, bucket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbLink, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbLink, tag_),
  };
  RpbLink_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbLink_descriptor_,
      RpbLink::default_instance_,
      RpbLink_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbLink, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbLink, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbLink));
  RpbCounterUpdateReq_descriptor_ = file->message_type(21);
  static const int RpbCounterUpdateReq_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCounterUpdateReq, bucket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCounterUpdateReq, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCounterUpdateReq, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCounterUpdateReq, w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCounterUpdateReq, dw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCounterUpdateReq, pw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCounterUpdateReq, returnvalue_),
  };
  RpbCounterUpdateReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbCounterUpdateReq_descriptor_,
      RpbCounterUpdateReq::default_instance_,
      RpbCounterUpdateReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCounterUpdateReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCounterUpdateReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbCounterUpdateReq));
  RpbCounterUpdateResp_descriptor_ = file->message_type(22);
  static const int RpbCounterUpdateResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCounterUpdateResp, value_),
  };
  RpbCounterUpdateResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbCounterUpdateResp_descriptor_,
      RpbCounterUpdateResp::default_instance_,
      RpbCounterUpdateResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCounterUpdateResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCounterUpdateResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbCounterUpdateResp));
  RpbCounterGetReq_descriptor_ = file->message_type(23);
  static const int RpbCounterGetReq_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCounterGetReq, bucket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCounterGetReq, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCounterGetReq, r_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCounterGetReq, pr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCounterGetReq, basic_quorum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCounterGetReq, notfound_ok_),
  };
  RpbCounterGetReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbCounterGetReq_descriptor_,
      RpbCounterGetReq::default_instance_,
      RpbCounterGetReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCounterGetReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCounterGetReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbCounterGetReq));
  RpbCounterGetResp_descriptor_ = file->message_type(24);
  static const int RpbCounterGetResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCounterGetResp, value_),
  };
  RpbCounterGetResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbCounterGetResp_descriptor_,
      RpbCounterGetResp::default_instance_,
      RpbCounterGetResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCounterGetResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCounterGetResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbCounterGetResp));
  RpbGetBucketKeyPreflistReq_descriptor_ = file->message_type(25);
  static const int RpbGetBucketKeyPreflistReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetBucketKeyPreflistReq, bucket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetBucketKeyPreflistReq, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetBucketKeyPreflistReq, type_),
  };
  RpbGetBucketKeyPreflistReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbGetBucketKeyPreflistReq_descriptor_,
      RpbGetBucketKeyPreflistReq::default_instance_,
      RpbGetBucketKeyPreflistReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetBucketKeyPreflistReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetBucketKeyPreflistReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbGetBucketKeyPreflistReq));
  RpbGetBucketKeyPreflistResp_descriptor_ = file->message_type(26);
  static const int RpbGetBucketKeyPreflistResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetBucketKeyPreflistResp, preflist_),
  };
  RpbGetBucketKeyPreflistResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbGetBucketKeyPreflistResp_descriptor_,
      RpbGetBucketKeyPreflistResp::default_instance_,
      RpbGetBucketKeyPreflistResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetBucketKeyPreflistResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetBucketKeyPreflistResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbGetBucketKeyPreflistResp));
  RpbBucketKeyPreflistItem_descriptor_ = file->message_type(27);
  static const int RpbBucketKeyPreflistItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbBucketKeyPreflistItem, partition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbBucketKeyPreflistItem, node_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbBucketKeyPreflistItem, primary_),
  };
  RpbBucketKeyPreflistItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbBucketKeyPreflistItem_descriptor_,
      RpbBucketKeyPreflistItem::default_instance_,
      RpbBucketKeyPreflistItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbBucketKeyPreflistItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbBucketKeyPreflistItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbBucketKeyPreflistItem));
  RpbCoverageReq_descriptor_ = file->message_type(28);
  static const int RpbCoverageReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCoverageReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCoverageReq, bucket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCoverageReq, min_partitions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCoverageReq, replace_cover_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCoverageReq, unavailable_cover_),
  };
  RpbCoverageReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbCoverageReq_descriptor_,
      RpbCoverageReq::default_instance_,
      RpbCoverageReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCoverageReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCoverageReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbCoverageReq));
  RpbCoverageResp_descriptor_ = file->message_type(29);
  static const int RpbCoverageResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCoverageResp, entries_),
  };
  RpbCoverageResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbCoverageResp_descriptor_,
      RpbCoverageResp::default_instance_,
      RpbCoverageResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCoverageResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCoverageResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbCoverageResp));
  RpbCoverageEntry_descriptor_ = file->message_type(30);
  static const int RpbCoverageEntry_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCoverageEntry, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCoverageEntry, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCoverageEntry, keyspace_desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCoverageEntry, cover_context_),
  };
  RpbCoverageEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbCoverageEntry_descriptor_,
      RpbCoverageEntry::default_instance_,
      RpbCoverageEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCoverageEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCoverageEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbCoverageEntry));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_riak_5fkv_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbGetClientIdResp_descriptor_, &RpbGetClientIdResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbSetClientIdReq_descriptor_, &RpbSetClientIdReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbGetReq_descriptor_, &RpbGetReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbGetResp_descriptor_, &RpbGetResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbPutReq_descriptor_, &RpbPutReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbPutResp_descriptor_, &RpbPutResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbDelReq_descriptor_, &RpbDelReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbListBucketsReq_descriptor_, &RpbListBucketsReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbListBucketsResp_descriptor_, &RpbListBucketsResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbListKeysReq_descriptor_, &RpbListKeysReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbListKeysResp_descriptor_, &RpbListKeysResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbMapRedReq_descriptor_, &RpbMapRedReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbMapRedResp_descriptor_, &RpbMapRedResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbIndexReq_descriptor_, &RpbIndexReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbIndexResp_descriptor_, &RpbIndexResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbIndexBodyResp_descriptor_, &RpbIndexBodyResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbCSBucketReq_descriptor_, &RpbCSBucketReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbCSBucketResp_descriptor_, &RpbCSBucketResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbIndexObject_descriptor_, &RpbIndexObject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbContent_descriptor_, &RpbContent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbLink_descriptor_, &RpbLink::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbCounterUpdateReq_descriptor_, &RpbCounterUpdateReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbCounterUpdateResp_descriptor_, &RpbCounterUpdateResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbCounterGetReq_descriptor_, &RpbCounterGetReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbCounterGetResp_descriptor_, &RpbCounterGetResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbGetBucketKeyPreflistReq_descriptor_, &RpbGetBucketKeyPreflistReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbGetBucketKeyPreflistResp_descriptor_, &RpbGetBucketKeyPreflistResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbBucketKeyPreflistItem_descriptor_, &RpbBucketKeyPreflistItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbCoverageReq_descriptor_, &RpbCoverageReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbCoverageResp_descriptor_, &RpbCoverageResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbCoverageEntry_descriptor_, &RpbCoverageEntry::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_riak_5fkv_2eproto() {
  delete RpbGetClientIdResp::default_instance_;
  delete RpbGetClientIdResp_reflection_;
  delete RpbSetClientIdReq::default_instance_;
  delete RpbSetClientIdReq_reflection_;
  delete RpbGetReq::default_instance_;
  delete RpbGetReq_reflection_;
  delete RpbGetResp::default_instance_;
  delete RpbGetResp_reflection_;
  delete RpbPutReq::default_instance_;
  delete RpbPutReq_reflection_;
  delete RpbPutResp::default_instance_;
  delete RpbPutResp_reflection_;
  delete RpbDelReq::default_instance_;
  delete RpbDelReq_reflection_;
  delete RpbListBucketsReq::default_instance_;
  delete RpbListBucketsReq_reflection_;
  delete RpbListBucketsResp::default_instance_;
  delete RpbListBucketsResp_reflection_;
  delete RpbListKeysReq::default_instance_;
  delete RpbListKeysReq_reflection_;
  delete RpbListKeysResp::default_instance_;
  delete RpbListKeysResp_reflection_;
  delete RpbMapRedReq::default_instance_;
  delete RpbMapRedReq_reflection_;
  delete RpbMapRedResp::default_instance_;
  delete RpbMapRedResp_reflection_;
  delete RpbIndexReq::default_instance_;
  delete RpbIndexReq_reflection_;
  delete RpbIndexResp::default_instance_;
  delete RpbIndexResp_reflection_;
  delete RpbIndexBodyResp::default_instance_;
  delete RpbIndexBodyResp_reflection_;
  delete RpbCSBucketReq::default_instance_;
  delete RpbCSBucketReq_reflection_;
  delete RpbCSBucketResp::default_instance_;
  delete RpbCSBucketResp_reflection_;
  delete RpbIndexObject::default_instance_;
  delete RpbIndexObject_reflection_;
  delete RpbContent::default_instance_;
  delete RpbContent_reflection_;
  delete RpbLink::default_instance_;
  delete RpbLink_reflection_;
  delete RpbCounterUpdateReq::default_instance_;
  delete RpbCounterUpdateReq_reflection_;
  delete RpbCounterUpdateResp::default_instance_;
  delete RpbCounterUpdateResp_reflection_;
  delete RpbCounterGetReq::default_instance_;
  delete RpbCounterGetReq_reflection_;
  delete RpbCounterGetResp::default_instance_;
  delete RpbCounterGetResp_reflection_;
  delete RpbGetBucketKeyPreflistReq::default_instance_;
  delete RpbGetBucketKeyPreflistReq_reflection_;
  delete RpbGetBucketKeyPreflistResp::default_instance_;
  delete RpbGetBucketKeyPreflistResp_reflection_;
  delete RpbBucketKeyPreflistItem::default_instance_;
  delete RpbBucketKeyPreflistItem_reflection_;
  delete RpbCoverageReq::default_instance_;
  delete RpbCoverageReq_reflection_;
  delete RpbCoverageResp::default_instance_;
  delete RpbCoverageResp_reflection_;
  delete RpbCoverageEntry::default_instance_;
  delete RpbCoverageEntry_reflection_;
}

void protobuf_AddDesc_riak_5fkv_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_riak_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rriak_kv.proto\032\nriak.proto\"\'\n\022RpbGetCli"
    "entIdResp\022\021\n\tclient_id\030\001 \002(\014\"&\n\021RpbSetCl"
    "ientIdReq\022\021\n\tclient_id\030\001 \002(\014\"\351\001\n\tRpbGetR"
    "eq\022\016\n\006bucket\030\001 \002(\014\022\013\n\003key\030\002 \002(\014\022\t\n\001r\030\003 \001"
    "(\r\022\n\n\002pr\030\004 \001(\r\022\024\n\014basic_quorum\030\005 \001(\010\022\023\n\013"
    "notfound_ok\030\006 \001(\010\022\023\n\013if_modified\030\007 \001(\014\022\014"
    "\n\004head\030\010 \001(\010\022\025\n\rdeletedvclock\030\t \001(\010\022\017\n\007t"
    "imeout\030\n \001(\r\022\025\n\rsloppy_quorum\030\013 \001(\010\022\r\n\005n"
    "_val\030\014 \001(\r\022\014\n\004type\030\r \001(\014\"M\n\nRpbGetResp\022\034"
    "\n\007content\030\001 \003(\0132\013.RpbContent\022\016\n\006vclock\030\002"
    " \001(\014\022\021\n\tunchanged\030\003 \001(\010\"\246\002\n\tRpbPutReq\022\016\n"
    "\006bucket\030\001 \002(\014\022\013\n\003key\030\002 \001(\014\022\016\n\006vclock\030\003 \001"
    "(\014\022\034\n\007content\030\004 \002(\0132\013.RpbContent\022\t\n\001w\030\005 "
    "\001(\r\022\n\n\002dw\030\006 \001(\r\022\023\n\013return_body\030\007 \001(\010\022\n\n\002"
    "pw\030\010 \001(\r\022\027\n\017if_not_modified\030\t \001(\010\022\025\n\rif_"
    "none_match\030\n \001(\010\022\023\n\013return_head\030\013 \001(\010\022\017\n"
    "\007timeout\030\014 \001(\r\022\014\n\004asis\030\r \001(\010\022\025\n\rsloppy_q"
    "uorum\030\016 \001(\010\022\r\n\005n_val\030\017 \001(\r\022\014\n\004type\030\020 \001(\014"
    "\"G\n\nRpbPutResp\022\034\n\007content\030\001 \003(\0132\013.RpbCon"
    "tent\022\016\n\006vclock\030\002 \001(\014\022\013\n\003key\030\003 \001(\014\"\303\001\n\tRp"
    "bDelReq\022\016\n\006bucket\030\001 \002(\014\022\013\n\003key\030\002 \002(\014\022\n\n\002"
    "rw\030\003 \001(\r\022\016\n\006vclock\030\004 \001(\014\022\t\n\001r\030\005 \001(\r\022\t\n\001w"
    "\030\006 \001(\r\022\n\n\002pr\030\007 \001(\r\022\n\n\002pw\030\010 \001(\r\022\n\n\002dw\030\t \001"
    "(\r\022\017\n\007timeout\030\n \001(\r\022\025\n\rsloppy_quorum\030\013 \001"
    "(\010\022\r\n\005n_val\030\014 \001(\r\022\014\n\004type\030\r \001(\014\"B\n\021RpbLi"
    "stBucketsReq\022\017\n\007timeout\030\001 \001(\r\022\016\n\006stream\030"
    "\002 \001(\010\022\014\n\004type\030\003 \001(\014\"3\n\022RpbListBucketsRes"
    "p\022\017\n\007buckets\030\001 \003(\014\022\014\n\004done\030\002 \001(\010\"\?\n\016RpbL"
    "istKeysReq\022\016\n\006bucket\030\001 \002(\014\022\017\n\007timeout\030\002 "
    "\001(\r\022\014\n\004type\030\003 \001(\014\"-\n\017RpbListKeysResp\022\014\n\004"
    "keys\030\001 \003(\014\022\014\n\004done\030\002 \001(\010\"5\n\014RpbMapRedReq"
    "\022\017\n\007request\030\001 \002(\014\022\024\n\014content_type\030\002 \002(\014\""
    ">\n\rRpbMapRedResp\022\r\n\005phase\030\001 \001(\r\022\020\n\010respo"
    "nse\030\002 \001(\014\022\014\n\004done\030\003 \001(\010\"\371\002\n\013RpbIndexReq\022"
    "\016\n\006bucket\030\001 \002(\014\022\r\n\005index\030\002 \002(\014\022*\n\005qtype\030"
    "\003 \002(\0162\033.RpbIndexReq.IndexQueryType\022\013\n\003ke"
    "y\030\004 \001(\014\022\021\n\trange_min\030\005 \001(\014\022\021\n\trange_max\030"
    "\006 \001(\014\022\024\n\014return_terms\030\007 \001(\010\022\016\n\006stream\030\010 "
    "\001(\010\022\023\n\013max_results\030\t \001(\r\022\024\n\014continuation"
    "\030\n \001(\014\022\017\n\007timeout\030\013 \001(\r\022\014\n\004type\030\014 \001(\014\022\022\n"
    "\nterm_regex\030\r \001(\014\022\027\n\017pagination_sort\030\016 \001"
    "(\010\022\025\n\rcover_context\030\017 \001(\014\022\023\n\013return_body"
    "\030\020 \001(\010\"#\n\016IndexQueryType\022\006\n\002eq\020\000\022\t\n\005rang"
    "e\020\001\"[\n\014RpbIndexResp\022\014\n\004keys\030\001 \003(\014\022\031\n\007res"
    "ults\030\002 \003(\0132\010.RpbPair\022\024\n\014continuation\030\003 \001"
    "(\014\022\014\n\004done\030\004 \001(\010\"X\n\020RpbIndexBodyResp\022 \n\007"
    "objects\030\001 \003(\0132\017.RpbIndexObject\022\024\n\014contin"
    "uation\030\002 \001(\014\022\014\n\004done\030\003 \001(\010\"\330\001\n\016RpbCSBuck"
    "etReq\022\016\n\006bucket\030\001 \002(\014\022\021\n\tstart_key\030\002 \002(\014"
    "\022\017\n\007end_key\030\003 \001(\014\022\030\n\nstart_incl\030\004 \001(\010:\004t"
    "rue\022\027\n\010end_incl\030\005 \001(\010:\005false\022\024\n\014continua"
    "tion\030\006 \001(\014\022\023\n\013max_results\030\007 \001(\r\022\017\n\007timeo"
    "ut\030\010 \001(\r\022\014\n\004type\030\t \001(\014\022\025\n\rcover_context\030"
    "\n \001(\014\"W\n\017RpbCSBucketResp\022 \n\007objects\030\001 \003("
    "\0132\017.RpbIndexObject\022\024\n\014continuation\030\002 \001(\014"
    "\022\014\n\004done\030\003 \001(\010\":\n\016RpbIndexObject\022\013\n\003key\030"
    "\001 \002(\014\022\033\n\006object\030\002 \002(\0132\013.RpbGetResp\"\365\001\n\nR"
    "pbContent\022\r\n\005value\030\001 \002(\014\022\024\n\014content_type"
    "\030\002 \001(\014\022\017\n\007charset\030\003 \001(\014\022\030\n\020content_encod"
    "ing\030\004 \001(\014\022\014\n\004vtag\030\005 \001(\014\022\027\n\005links\030\006 \003(\0132\010"
    ".RpbLink\022\020\n\010last_mod\030\007 \001(\r\022\026\n\016last_mod_u"
    "secs\030\010 \001(\r\022\032\n\010usermeta\030\t \003(\0132\010.RpbPair\022\031"
    "\n\007indexes\030\n \003(\0132\010.RpbPair\022\017\n\007deleted\030\013 \001"
    "(\010\"3\n\007RpbLink\022\016\n\006bucket\030\001 \001(\014\022\013\n\003key\030\002 \001"
    "(\014\022\013\n\003tag\030\003 \001(\014\"z\n\023RpbCounterUpdateReq\022\016"
    "\n\006bucket\030\001 \002(\014\022\013\n\003key\030\002 \002(\014\022\016\n\006amount\030\003 "
    "\002(\022\022\t\n\001w\030\004 \001(\r\022\n\n\002dw\030\005 \001(\r\022\n\n\002pw\030\006 \001(\r\022\023"
    "\n\013returnvalue\030\007 \001(\010\"%\n\024RpbCounterUpdateR"
    "esp\022\r\n\005value\030\001 \001(\022\"q\n\020RpbCounterGetReq\022\016"
    "\n\006bucket\030\001 \002(\014\022\013\n\003key\030\002 \002(\014\022\t\n\001r\030\003 \001(\r\022\n"
    "\n\002pr\030\004 \001(\r\022\024\n\014basic_quorum\030\005 \001(\010\022\023\n\013notf"
    "ound_ok\030\006 \001(\010\"\"\n\021RpbCounterGetResp\022\r\n\005va"
    "lue\030\001 \001(\022\"G\n\032RpbGetBucketKeyPreflistReq\022"
    "\016\n\006bucket\030\001 \002(\014\022\013\n\003key\030\002 \002(\014\022\014\n\004type\030\003 \001"
    "(\014\"J\n\033RpbGetBucketKeyPreflistResp\022+\n\010pre"
    "flist\030\001 \003(\0132\031.RpbBucketKeyPreflistItem\"L"
    "\n\030RpbBucketKeyPreflistItem\022\021\n\tpartition\030"
    "\001 \002(\003\022\014\n\004node\030\002 \002(\014\022\017\n\007primary\030\003 \002(\010\"x\n\016"
    "RpbCoverageReq\022\014\n\004type\030\001 \001(\014\022\016\n\006bucket\030\002"
    " \002(\014\022\026\n\016min_partitions\030\003 \001(\r\022\025\n\rreplace_"
    "cover\030\004 \001(\014\022\031\n\021unavailable_cover\030\005 \003(\014\"5"
    "\n\017RpbCoverageResp\022\"\n\007entries\030\001 \003(\0132\021.Rpb"
    "CoverageEntry\"Z\n\020RpbCoverageEntry\022\n\n\002ip\030"
    "\001 \002(\014\022\014\n\004port\030\002 \002(\r\022\025\n\rkeyspace_desc\030\003 \001"
    "(\014\022\025\n\rcover_context\030\004 \002(\014B#\n\027com.basho.r"
    "iak.protobufB\010RiakKvPB", 3422);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "riak_kv.proto", &protobuf_RegisterTypes);
  RpbGetClientIdResp::default_instance_ = new RpbGetClientIdResp();
  RpbSetClientIdReq::default_instance_ = new RpbSetClientIdReq();
  RpbGetReq::default_instance_ = new RpbGetReq();
  RpbGetResp::default_instance_ = new RpbGetResp();
  RpbPutReq::default_instance_ = new RpbPutReq();
  RpbPutResp::default_instance_ = new RpbPutResp();
  RpbDelReq::default_instance_ = new RpbDelReq();
  RpbListBucketsReq::default_instance_ = new RpbListBucketsReq();
  RpbListBucketsResp::default_instance_ = new RpbListBucketsResp();
  RpbListKeysReq::default_instance_ = new RpbListKeysReq();
  RpbListKeysResp::default_instance_ = new RpbListKeysResp();
  RpbMapRedReq::default_instance_ = new RpbMapRedReq();
  RpbMapRedResp::default_instance_ = new RpbMapRedResp();
  RpbIndexReq::default_instance_ = new RpbIndexReq();
  RpbIndexResp::default_instance_ = new RpbIndexResp();
  RpbIndexBodyResp::default_instance_ = new RpbIndexBodyResp();
  RpbCSBucketReq::default_instance_ = new RpbCSBucketReq();
  RpbCSBucketResp::default_instance_ = new RpbCSBucketResp();
  RpbIndexObject::default_instance_ = new RpbIndexObject();
  RpbContent::default_instance_ = new RpbContent();
  RpbLink::default_instance_ = new RpbLink();
  RpbCounterUpdateReq::default_instance_ = new RpbCounterUpdateReq();
  RpbCounterUpdateResp::default_instance_ = new RpbCounterUpdateResp();
  RpbCounterGetReq::default_instance_ = new RpbCounterGetReq();
  RpbCounterGetResp::default_instance_ = new RpbCounterGetResp();
  RpbGetBucketKeyPreflistReq::default_instance_ = new RpbGetBucketKeyPreflistReq();
  RpbGetBucketKeyPreflistResp::default_instance_ = new RpbGetBucketKeyPreflistResp();
  RpbBucketKeyPreflistItem::default_instance_ = new RpbBucketKeyPreflistItem();
  RpbCoverageReq::default_instance_ = new RpbCoverageReq();
  RpbCoverageResp::default_instance_ = new RpbCoverageResp();
  RpbCoverageEntry::default_instance_ = new RpbCoverageEntry();
  RpbGetClientIdResp::default_instance_->InitAsDefaultInstance();
  RpbSetClientIdReq::default_instance_->InitAsDefaultInstance();
  RpbGetReq::default_instance_->InitAsDefaultInstance();
  RpbGetResp::default_instance_->InitAsDefaultInstance();
  RpbPutReq::default_instance_->InitAsDefaultInstance();
  RpbPutResp::default_instance_->InitAsDefaultInstance();
  RpbDelReq::default_instance_->InitAsDefaultInstance();
  RpbListBucketsReq::default_instance_->InitAsDefaultInstance();
  RpbListBucketsResp::default_instance_->InitAsDefaultInstance();
  RpbListKeysReq::default_instance_->InitAsDefaultInstance();
  RpbListKeysResp::default_instance_->InitAsDefaultInstance();
  RpbMapRedReq::default_instance_->InitAsDefaultInstance();
  RpbMapRedResp::default_instance_->InitAsDefaultInstance();
  RpbIndexReq::default_instance_->InitAsDefaultInstance();
  RpbIndexResp::default_instance_->InitAsDefaultInstance();
  RpbIndexBodyResp::default_instance_->InitAsDefaultInstance();
  RpbCSBucketReq::default_instance_->InitAsDefaultInstance();
  RpbCSBucketResp::default_instance_->InitAsDefaultInstance();
  RpbIndexObject::default_instance_->InitAsDefaultInstance();
  RpbContent::default_instance_->InitAsDefaultInstance();
  RpbLink::default_instance_->InitAsDefaultInstance();
  RpbCounterUpdateReq::default_instance_->InitAsDefaultInstance();
  RpbCounterUpdateResp::default_instance_->InitAsDefaultInstance();
  RpbCounterGetReq::default_instance_->InitAsDefaultInstance();
  RpbCounterGetResp::default_instance_->InitAsDefaultInstance();
  RpbGetBucketKeyPreflistReq::default_instance_->InitAsDefaultInstance();
  RpbGetBucketKeyPreflistResp::default_instance_->InitAsDefaultInstance();
  RpbBucketKeyPreflistItem::default_instance_->InitAsDefaultInstance();
  RpbCoverageReq::default_instance_->InitAsDefaultInstance();
  RpbCoverageResp::default_instance_->InitAsDefaultInstance();
  RpbCoverageEntry::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_riak_5fkv_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_riak_5fkv_2eproto {
  StaticDescriptorInitializer_riak_5fkv_2eproto() {
    protobuf_AddDesc_riak_5fkv_2eproto();
  }
} static_descriptor_initializer_riak_5fkv_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int RpbGetClientIdResp::kClientIdFieldNumber;
#endif  // !_MSC_VER

RpbGetClientIdResp::RpbGetClientIdResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbGetClientIdResp)
}

void RpbGetClientIdResp::InitAsDefaultInstance() {
}

RpbGetClientIdResp::RpbGetClientIdResp(const RpbGetClientIdResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbGetClientIdResp)
}

void RpbGetClientIdResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  client_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbGetClientIdResp::~RpbGetClientIdResp() {
  // @@protoc_insertion_point(destructor:RpbGetClientIdResp)
  SharedDtor();
}

void RpbGetClientIdResp::SharedDtor() {
  if (client_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete client_id_;
  }
  if (this != default_instance_) {
  }
}

void RpbGetClientIdResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbGetClientIdResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbGetClientIdResp_descriptor_;
}

const RpbGetClientIdResp& RpbGetClientIdResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_5fkv_2eproto();
  return *default_instance_;
}

RpbGetClientIdResp* RpbGetClientIdResp::default_instance_ = NULL;

RpbGetClientIdResp* RpbGetClientIdResp::New() const {
  return new RpbGetClientIdResp;
}

void RpbGetClientIdResp::Clear() {
  if (has_client_id()) {
    if (client_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      client_id_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbGetClientIdResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbGetClientIdResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes client_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_client_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbGetClientIdResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbGetClientIdResp)
  return false;
#undef DO_
}

void RpbGetClientIdResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbGetClientIdResp)
  // required bytes client_id = 1;
  if (has_client_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->client_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbGetClientIdResp)
}

::google::protobuf::uint8* RpbGetClientIdResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbGetClientIdResp)
  // required bytes client_id = 1;
  if (has_client_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->client_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbGetClientIdResp)
  return target;
}

int RpbGetClientIdResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes client_id = 1;
    if (has_client_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->client_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbGetClientIdResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbGetClientIdResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbGetClientIdResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbGetClientIdResp::MergeFrom(const RpbGetClientIdResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_id()) {
      set_client_id(from.client_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbGetClientIdResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbGetClientIdResp::CopyFrom(const RpbGetClientIdResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbGetClientIdResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RpbGetClientIdResp::Swap(RpbGetClientIdResp* other) {
  if (other != this) {
    std::swap(client_id_, other->client_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbGetClientIdResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbGetClientIdResp_descriptor_;
  metadata.reflection = RpbGetClientIdResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbSetClientIdReq::kClientIdFieldNumber;
#endif  // !_MSC_VER

RpbSetClientIdReq::RpbSetClientIdReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbSetClientIdReq)
}

void RpbSetClientIdReq::InitAsDefaultInstance() {
}

RpbSetClientIdReq::RpbSetClientIdReq(const RpbSetClientIdReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbSetClientIdReq)
}

void RpbSetClientIdReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  client_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbSetClientIdReq::~RpbSetClientIdReq() {
  // @@protoc_insertion_point(destructor:RpbSetClientIdReq)
  SharedDtor();
}

void RpbSetClientIdReq::SharedDtor() {
  if (client_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete client_id_;
  }
  if (this != default_instance_) {
  }
}

void RpbSetClientIdReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbSetClientIdReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbSetClientIdReq_descriptor_;
}

const RpbSetClientIdReq& RpbSetClientIdReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_5fkv_2eproto();
  return *default_instance_;
}

RpbSetClientIdReq* RpbSetClientIdReq::default_instance_ = NULL;

RpbSetClientIdReq* RpbSetClientIdReq::New() const {
  return new RpbSetClientIdReq;
}

void RpbSetClientIdReq::Clear() {
  if (has_client_id()) {
    if (client_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      client_id_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbSetClientIdReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbSetClientIdReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes client_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_client_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbSetClientIdReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbSetClientIdReq)
  return false;
#undef DO_
}

void RpbSetClientIdReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbSetClientIdReq)
  // required bytes client_id = 1;
  if (has_client_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->client_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbSetClientIdReq)
}

::google::protobuf::uint8* RpbSetClientIdReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbSetClientIdReq)
  // required bytes client_id = 1;
  if (has_client_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->client_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbSetClientIdReq)
  return target;
}

int RpbSetClientIdReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes client_id = 1;
    if (has_client_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->client_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbSetClientIdReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbSetClientIdReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbSetClientIdReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbSetClientIdReq::MergeFrom(const RpbSetClientIdReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_id()) {
      set_client_id(from.client_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbSetClientIdReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbSetClientIdReq::CopyFrom(const RpbSetClientIdReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbSetClientIdReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RpbSetClientIdReq::Swap(RpbSetClientIdReq* other) {
  if (other != this) {
    std::swap(client_id_, other->client_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbSetClientIdReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbSetClientIdReq_descriptor_;
  metadata.reflection = RpbSetClientIdReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbGetReq::kBucketFieldNumber;
const int RpbGetReq::kKeyFieldNumber;
const int RpbGetReq::kRFieldNumber;
const int RpbGetReq::kPrFieldNumber;
const int RpbGetReq::kBasicQuorumFieldNumber;
const int RpbGetReq::kNotfoundOkFieldNumber;
const int RpbGetReq::kIfModifiedFieldNumber;
const int RpbGetReq::kHeadFieldNumber;
const int RpbGetReq::kDeletedvclockFieldNumber;
const int RpbGetReq::kTimeoutFieldNumber;
const int RpbGetReq::kSloppyQuorumFieldNumber;
const int RpbGetReq::kNValFieldNumber;
const int RpbGetReq::kTypeFieldNumber;
#endif  // !_MSC_VER

RpbGetReq::RpbGetReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbGetReq)
}

void RpbGetReq::InitAsDefaultInstance() {
}

RpbGetReq::RpbGetReq(const RpbGetReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbGetReq)
}

void RpbGetReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  bucket_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  r_ = 0u;
  pr_ = 0u;
  basic_quorum_ = false;
  notfound_ok_ = false;
  if_modified_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = false;
  deletedvclock_ = false;
  timeout_ = 0u;
  sloppy_quorum_ = false;
  n_val_ = 0u;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbGetReq::~RpbGetReq() {
  // @@protoc_insertion_point(destructor:RpbGetReq)
  SharedDtor();
}

void RpbGetReq::SharedDtor() {
  if (bucket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bucket_;
  }
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (if_modified_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete if_modified_;
  }
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (this != default_instance_) {
  }
}

void RpbGetReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbGetReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbGetReq_descriptor_;
}

const RpbGetReq& RpbGetReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_5fkv_2eproto();
  return *default_instance_;
}

RpbGetReq* RpbGetReq::default_instance_ = NULL;

RpbGetReq* RpbGetReq::New() const {
  return new RpbGetReq;
}

void RpbGetReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RpbGetReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(r_, pr_);
    ZR_(basic_quorum_, head_);
    if (has_bucket()) {
      if (bucket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bucket_->clear();
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_if_modified()) {
      if (if_modified_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        if_modified_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 7936) {
    ZR_(deletedvclock_, n_val_);
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbGetReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbGetReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes bucket = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bucket()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // required bytes key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_r;
        break;
      }

      // optional uint32 r = 3;
      case 3: {
        if (tag == 24) {
         parse_r:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &r_)));
          set_has_r();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_pr;
        break;
      }

      // optional uint32 pr = 4;
      case 4: {
        if (tag == 32) {
         parse_pr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pr_)));
          set_has_pr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_basic_quorum;
        break;
      }

      // optional bool basic_quorum = 5;
      case 5: {
        if (tag == 40) {
         parse_basic_quorum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &basic_quorum_)));
          set_has_basic_quorum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_notfound_ok;
        break;
      }

      // optional bool notfound_ok = 6;
      case 6: {
        if (tag == 48) {
         parse_notfound_ok:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &notfound_ok_)));
          set_has_notfound_ok();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_if_modified;
        break;
      }

      // optional bytes if_modified = 7;
      case 7: {
        if (tag == 58) {
         parse_if_modified:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_if_modified()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_head;
        break;
      }

      // optional bool head = 8;
      case 8: {
        if (tag == 64) {
         parse_head:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &head_)));
          set_has_head();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_deletedvclock;
        break;
      }

      // optional bool deletedvclock = 9;
      case 9: {
        if (tag == 72) {
         parse_deletedvclock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &deletedvclock_)));
          set_has_deletedvclock();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_timeout;
        break;
      }

      // optional uint32 timeout = 10;
      case 10: {
        if (tag == 80) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_sloppy_quorum;
        break;
      }

      // optional bool sloppy_quorum = 11;
      case 11: {
        if (tag == 88) {
         parse_sloppy_quorum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sloppy_quorum_)));
          set_has_sloppy_quorum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_n_val;
        break;
      }

      // optional uint32 n_val = 12;
      case 12: {
        if (tag == 96) {
         parse_n_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &n_val_)));
          set_has_n_val();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_type;
        break;
      }

      // optional bytes type = 13;
      case 13: {
        if (tag == 106) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbGetReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbGetReq)
  return false;
#undef DO_
}

void RpbGetReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbGetReq)
  // required bytes bucket = 1;
  if (has_bucket()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->bucket(), output);
  }

  // required bytes key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->key(), output);
  }

  // optional uint32 r = 3;
  if (has_r()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->r(), output);
  }

  // optional uint32 pr = 4;
  if (has_pr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->pr(), output);
  }

  // optional bool basic_quorum = 5;
  if (has_basic_quorum()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->basic_quorum(), output);
  }

  // optional bool notfound_ok = 6;
  if (has_notfound_ok()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->notfound_ok(), output);
  }

  // optional bytes if_modified = 7;
  if (has_if_modified()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->if_modified(), output);
  }

  // optional bool head = 8;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->head(), output);
  }

  // optional bool deletedvclock = 9;
  if (has_deletedvclock()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->deletedvclock(), output);
  }

  // optional uint32 timeout = 10;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->timeout(), output);
  }

  // optional bool sloppy_quorum = 11;
  if (has_sloppy_quorum()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->sloppy_quorum(), output);
  }

  // optional uint32 n_val = 12;
  if (has_n_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->n_val(), output);
  }

  // optional bytes type = 13;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      13, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbGetReq)
}

::google::protobuf::uint8* RpbGetReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbGetReq)
  // required bytes bucket = 1;
  if (has_bucket()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->bucket(), target);
  }

  // required bytes key = 2;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->key(), target);
  }

  // optional uint32 r = 3;
  if (has_r()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->r(), target);
  }

  // optional uint32 pr = 4;
  if (has_pr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->pr(), target);
  }

  // optional bool basic_quorum = 5;
  if (has_basic_quorum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->basic_quorum(), target);
  }

  // optional bool notfound_ok = 6;
  if (has_notfound_ok()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->notfound_ok(), target);
  }

  // optional bytes if_modified = 7;
  if (has_if_modified()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->if_modified(), target);
  }

  // optional bool head = 8;
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->head(), target);
  }

  // optional bool deletedvclock = 9;
  if (has_deletedvclock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->deletedvclock(), target);
  }

  // optional uint32 timeout = 10;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->timeout(), target);
  }

  // optional bool sloppy_quorum = 11;
  if (has_sloppy_quorum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->sloppy_quorum(), target);
  }

  // optional uint32 n_val = 12;
  if (has_n_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->n_val(), target);
  }

  // optional bytes type = 13;
  if (has_type()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbGetReq)
  return target;
}

int RpbGetReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes bucket = 1;
    if (has_bucket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bucket());
    }

    // required bytes key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // optional uint32 r = 3;
    if (has_r()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->r());
    }

    // optional uint32 pr = 4;
    if (has_pr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pr());
    }

    // optional bool basic_quorum = 5;
    if (has_basic_quorum()) {
      total_size += 1 + 1;
    }

    // optional bool notfound_ok = 6;
    if (has_notfound_ok()) {
      total_size += 1 + 1;
    }

    // optional bytes if_modified = 7;
    if (has_if_modified()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->if_modified());
    }

    // optional bool head = 8;
    if (has_head()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool deletedvclock = 9;
    if (has_deletedvclock()) {
      total_size += 1 + 1;
    }

    // optional uint32 timeout = 10;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeout());
    }

    // optional bool sloppy_quorum = 11;
    if (has_sloppy_quorum()) {
      total_size += 1 + 1;
    }

    // optional uint32 n_val = 12;
    if (has_n_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->n_val());
    }

    // optional bytes type = 13;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbGetReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbGetReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbGetReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbGetReq::MergeFrom(const RpbGetReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bucket()) {
      set_bucket(from.bucket());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_r()) {
      set_r(from.r());
    }
    if (from.has_pr()) {
      set_pr(from.pr());
    }
    if (from.has_basic_quorum()) {
      set_basic_quorum(from.basic_quorum());
    }
    if (from.has_notfound_ok()) {
      set_notfound_ok(from.notfound_ok());
    }
    if (from.has_if_modified()) {
      set_if_modified(from.if_modified());
    }
    if (from.has_head()) {
      set_head(from.head());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_deletedvclock()) {
      set_deletedvclock(from.deletedvclock());
    }
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
    if (from.has_sloppy_quorum()) {
      set_sloppy_quorum(from.sloppy_quorum());
    }
    if (from.has_n_val()) {
      set_n_val(from.n_val());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbGetReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbGetReq::CopyFrom(const RpbGetReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbGetReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RpbGetReq::Swap(RpbGetReq* other) {
  if (other != this) {
    std::swap(bucket_, other->bucket_);
    std::swap(key_, other->key_);
    std::swap(r_, other->r_);
    std::swap(pr_, other->pr_);
    std::swap(basic_quorum_, other->basic_quorum_);
    std::swap(notfound_ok_, other->notfound_ok_);
    std::swap(if_modified_, other->if_modified_);
    std::swap(head_, other->head_);
    std::swap(deletedvclock_, other->deletedvclock_);
    std::swap(timeout_, other->timeout_);
    std::swap(sloppy_quorum_, other->sloppy_quorum_);
    std::swap(n_val_, other->n_val_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbGetReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbGetReq_descriptor_;
  metadata.reflection = RpbGetReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbGetResp::kContentFieldNumber;
const int RpbGetResp::kVclockFieldNumber;
const int RpbGetResp::kUnchangedFieldNumber;
#endif  // !_MSC_VER

RpbGetResp::RpbGetResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbGetResp)
}

void RpbGetResp::InitAsDefaultInstance() {
}

RpbGetResp::RpbGetResp(const RpbGetResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbGetResp)
}

void RpbGetResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  vclock_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unchanged_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbGetResp::~RpbGetResp() {
  // @@protoc_insertion_point(destructor:RpbGetResp)
  SharedDtor();
}

void RpbGetResp::SharedDtor() {
  if (vclock_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vclock_;
  }
  if (this != default_instance_) {
  }
}

void RpbGetResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbGetResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbGetResp_descriptor_;
}

const RpbGetResp& RpbGetResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_5fkv_2eproto();
  return *default_instance_;
}

RpbGetResp* RpbGetResp::default_instance_ = NULL;

RpbGetResp* RpbGetResp::New() const {
  return new RpbGetResp;
}

void RpbGetResp::Clear() {
  if (_has_bits_[0 / 32] & 6) {
    if (has_vclock()) {
      if (vclock_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        vclock_->clear();
      }
    }
    unchanged_ = false;
  }
  content_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbGetResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbGetResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .RpbContent content = 1;
      case 1: {
        if (tag == 10) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_content;
        if (input->ExpectTag(18)) goto parse_vclock;
        break;
      }

      // optional bytes vclock = 2;
      case 2: {
        if (tag == 18) {
         parse_vclock:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_vclock()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_unchanged;
        break;
      }

      // optional bool unchanged = 3;
      case 3: {
        if (tag == 24) {
         parse_unchanged:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &unchanged_)));
          set_has_unchanged();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbGetResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbGetResp)
  return false;
#undef DO_
}

void RpbGetResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbGetResp)
  // repeated .RpbContent content = 1;
  for (int i = 0; i < this->content_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->content(i), output);
  }

  // optional bytes vclock = 2;
  if (has_vclock()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->vclock(), output);
  }

  // optional bool unchanged = 3;
  if (has_unchanged()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->unchanged(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbGetResp)
}

::google::protobuf::uint8* RpbGetResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbGetResp)
  // repeated .RpbContent content = 1;
  for (int i = 0; i < this->content_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->content(i), target);
  }

  // optional bytes vclock = 2;
  if (has_vclock()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->vclock(), target);
  }

  // optional bool unchanged = 3;
  if (has_unchanged()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->unchanged(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbGetResp)
  return target;
}

int RpbGetResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bytes vclock = 2;
    if (has_vclock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->vclock());
    }

    // optional bool unchanged = 3;
    if (has_unchanged()) {
      total_size += 1 + 1;
    }

  }
  // repeated .RpbContent content = 1;
  total_size += 1 * this->content_size();
  for (int i = 0; i < this->content_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->content(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbGetResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbGetResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbGetResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbGetResp::MergeFrom(const RpbGetResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  content_.MergeFrom(from.content_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_vclock()) {
      set_vclock(from.vclock());
    }
    if (from.has_unchanged()) {
      set_unchanged(from.unchanged());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbGetResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbGetResp::CopyFrom(const RpbGetResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbGetResp::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->content())) return false;
  return true;
}

void RpbGetResp::Swap(RpbGetResp* other) {
  if (other != this) {
    content_.Swap(&other->content_);
    std::swap(vclock_, other->vclock_);
    std::swap(unchanged_, other->unchanged_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbGetResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbGetResp_descriptor_;
  metadata.reflection = RpbGetResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbPutReq::kBucketFieldNumber;
const int RpbPutReq::kKeyFieldNumber;
const int RpbPutReq::kVclockFieldNumber;
const int RpbPutReq::kContentFieldNumber;
const int RpbPutReq::kWFieldNumber;
const int RpbPutReq::kDwFieldNumber;
const int RpbPutReq::kReturnBodyFieldNumber;
const int RpbPutReq::kPwFieldNumber;
const int RpbPutReq::kIfNotModifiedFieldNumber;
const int RpbPutReq::kIfNoneMatchFieldNumber;
const int RpbPutReq::kReturnHeadFieldNumber;
const int RpbPutReq::kTimeoutFieldNumber;
const int RpbPutReq::kAsisFieldNumber;
const int RpbPutReq::kSloppyQuorumFieldNumber;
const int RpbPutReq::kNValFieldNumber;
const int RpbPutReq::kTypeFieldNumber;
#endif  // !_MSC_VER

RpbPutReq::RpbPutReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbPutReq)
}

void RpbPutReq::InitAsDefaultInstance() {
  content_ = const_cast< ::RpbContent*>(&::RpbContent::default_instance());
}

RpbPutReq::RpbPutReq(const RpbPutReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbPutReq)
}

void RpbPutReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  bucket_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vclock_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_ = NULL;
  w_ = 0u;
  dw_ = 0u;
  return_body_ = false;
  pw_ = 0u;
  if_not_modified_ = false;
  if_none_match_ = false;
  return_head_ = false;
  timeout_ = 0u;
  asis_ = false;
  sloppy_quorum_ = false;
  n_val_ = 0u;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbPutReq::~RpbPutReq() {
  // @@protoc_insertion_point(destructor:RpbPutReq)
  SharedDtor();
}

void RpbPutReq::SharedDtor() {
  if (bucket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bucket_;
  }
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (vclock_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vclock_;
  }
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (this != default_instance_) {
    delete content_;
  }
}

void RpbPutReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbPutReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbPutReq_descriptor_;
}

const RpbPutReq& RpbPutReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_5fkv_2eproto();
  return *default_instance_;
}

RpbPutReq* RpbPutReq::default_instance_ = NULL;

RpbPutReq* RpbPutReq::New() const {
  return new RpbPutReq;
}

void RpbPutReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RpbPutReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(w_, return_body_);
    if (has_bucket()) {
      if (bucket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bucket_->clear();
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_vclock()) {
      if (vclock_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        vclock_->clear();
      }
    }
    if (has_content()) {
      if (content_ != NULL) content_->::RpbContent::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(if_not_modified_, sloppy_quorum_);
    n_val_ = 0u;
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbPutReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbPutReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes bucket = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bucket()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional bytes key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_vclock;
        break;
      }

      // optional bytes vclock = 3;
      case 3: {
        if (tag == 26) {
         parse_vclock:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_vclock()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_content;
        break;
      }

      // required .RpbContent content = 4;
      case 4: {
        if (tag == 34) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_w;
        break;
      }

      // optional uint32 w = 5;
      case 5: {
        if (tag == 40) {
         parse_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &w_)));
          set_has_w();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_dw;
        break;
      }

      // optional uint32 dw = 6;
      case 6: {
        if (tag == 48) {
         parse_dw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_)));
          set_has_dw();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_return_body;
        break;
      }

      // optional bool return_body = 7;
      case 7: {
        if (tag == 56) {
         parse_return_body:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &return_body_)));
          set_has_return_body();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_pw;
        break;
      }

      // optional uint32 pw = 8;
      case 8: {
        if (tag == 64) {
         parse_pw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pw_)));
          set_has_pw();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_if_not_modified;
        break;
      }

      // optional bool if_not_modified = 9;
      case 9: {
        if (tag == 72) {
         parse_if_not_modified:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &if_not_modified_)));
          set_has_if_not_modified();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_if_none_match;
        break;
      }

      // optional bool if_none_match = 10;
      case 10: {
        if (tag == 80) {
         parse_if_none_match:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &if_none_match_)));
          set_has_if_none_match();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_return_head;
        break;
      }

      // optional bool return_head = 11;
      case 11: {
        if (tag == 88) {
         parse_return_head:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &return_head_)));
          set_has_return_head();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_timeout;
        break;
      }

      // optional uint32 timeout = 12;
      case 12: {
        if (tag == 96) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_asis;
        break;
      }

      // optional bool asis = 13;
      case 13: {
        if (tag == 104) {
         parse_asis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &asis_)));
          set_has_asis();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_sloppy_quorum;
        break;
      }

      // optional bool sloppy_quorum = 14;
      case 14: {
        if (tag == 112) {
         parse_sloppy_quorum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sloppy_quorum_)));
          set_has_sloppy_quorum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_n_val;
        break;
      }

      // optional uint32 n_val = 15;
      case 15: {
        if (tag == 120) {
         parse_n_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &n_val_)));
          set_has_n_val();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_type;
        break;
      }

      // optional bytes type = 16;
      case 16: {
        if (tag == 130) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbPutReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbPutReq)
  return false;
#undef DO_
}

void RpbPutReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbPutReq)
  // required bytes bucket = 1;
  if (has_bucket()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->bucket(), output);
  }

  // optional bytes key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->key(), output);
  }

  // optional bytes vclock = 3;
  if (has_vclock()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->vclock(), output);
  }

  // required .RpbContent content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->content(), output);
  }

  // optional uint32 w = 5;
  if (has_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->w(), output);
  }

  // optional uint32 dw = 6;
  if (has_dw()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->dw(), output);
  }

  // optional bool return_body = 7;
  if (has_return_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->return_body(), output);
  }

  // optional uint32 pw = 8;
  if (has_pw()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->pw(), output);
  }

  // optional bool if_not_modified = 9;
  if (has_if_not_modified()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->if_not_modified(), output);
  }

  // optional bool if_none_match = 10;
  if (has_if_none_match()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->if_none_match(), output);
  }

  // optional bool return_head = 11;
  if (has_return_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->return_head(), output);
  }

  // optional uint32 timeout = 12;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->timeout(), output);
  }

  // optional bool asis = 13;
  if (has_asis()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->asis(), output);
  }

  // optional bool sloppy_quorum = 14;
  if (has_sloppy_quorum()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->sloppy_quorum(), output);
  }

  // optional uint32 n_val = 15;
  if (has_n_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->n_val(), output);
  }

  // optional bytes type = 16;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      16, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbPutReq)
}

::google::protobuf::uint8* RpbPutReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbPutReq)
  // required bytes bucket = 1;
  if (has_bucket()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->bucket(), target);
  }

  // optional bytes key = 2;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->key(), target);
  }

  // optional bytes vclock = 3;
  if (has_vclock()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->vclock(), target);
  }

  // required .RpbContent content = 4;
  if (has_content()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->content(), target);
  }

  // optional uint32 w = 5;
  if (has_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->w(), target);
  }

  // optional uint32 dw = 6;
  if (has_dw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->dw(), target);
  }

  // optional bool return_body = 7;
  if (has_return_body()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->return_body(), target);
  }

  // optional uint32 pw = 8;
  if (has_pw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->pw(), target);
  }

  // optional bool if_not_modified = 9;
  if (has_if_not_modified()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->if_not_modified(), target);
  }

  // optional bool if_none_match = 10;
  if (has_if_none_match()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->if_none_match(), target);
  }

  // optional bool return_head = 11;
  if (has_return_head()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->return_head(), target);
  }

  // optional uint32 timeout = 12;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->timeout(), target);
  }

  // optional bool asis = 13;
  if (has_asis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->asis(), target);
  }

  // optional bool sloppy_quorum = 14;
  if (has_sloppy_quorum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->sloppy_quorum(), target);
  }

  // optional uint32 n_val = 15;
  if (has_n_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->n_val(), target);
  }

  // optional bytes type = 16;
  if (has_type()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        16, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbPutReq)
  return target;
}

int RpbPutReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes bucket = 1;
    if (has_bucket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bucket());
    }

    // optional bytes key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // optional bytes vclock = 3;
    if (has_vclock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->vclock());
    }

    // required .RpbContent content = 4;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->content());
    }

    // optional uint32 w = 5;
    if (has_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->w());
    }

    // optional uint32 dw = 6;
    if (has_dw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dw());
    }

    // optional bool return_body = 7;
    if (has_return_body()) {
      total_size += 1 + 1;
    }

    // optional uint32 pw = 8;
    if (has_pw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pw());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool if_not_modified = 9;
    if (has_if_not_modified()) {
      total_size += 1 + 1;
    }

    // optional bool if_none_match = 10;
    if (has_if_none_match()) {
      total_size += 1 + 1;
    }

    // optional bool return_head = 11;
    if (has_return_head()) {
      total_size += 1 + 1;
    }

    // optional uint32 timeout = 12;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeout());
    }

    // optional bool asis = 13;
    if (has_asis()) {
      total_size += 1 + 1;
    }

    // optional bool sloppy_quorum = 14;
    if (has_sloppy_quorum()) {
      total_size += 1 + 1;
    }

    // optional uint32 n_val = 15;
    if (has_n_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->n_val());
    }

    // optional bytes type = 16;
    if (has_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbPutReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbPutReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbPutReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbPutReq::MergeFrom(const RpbPutReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bucket()) {
      set_bucket(from.bucket());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_vclock()) {
      set_vclock(from.vclock());
    }
    if (from.has_content()) {
      mutable_content()->::RpbContent::MergeFrom(from.content());
    }
    if (from.has_w()) {
      set_w(from.w());
    }
    if (from.has_dw()) {
      set_dw(from.dw());
    }
    if (from.has_return_body()) {
      set_return_body(from.return_body());
    }
    if (from.has_pw()) {
      set_pw(from.pw());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_if_not_modified()) {
      set_if_not_modified(from.if_not_modified());
    }
    if (from.has_if_none_match()) {
      set_if_none_match(from.if_none_match());
    }
    if (from.has_return_head()) {
      set_return_head(from.return_head());
    }
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
    if (from.has_asis()) {
      set_asis(from.asis());
    }
    if (from.has_sloppy_quorum()) {
      set_sloppy_quorum(from.sloppy_quorum());
    }
    if (from.has_n_val()) {
      set_n_val(from.n_val());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbPutReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbPutReq::CopyFrom(const RpbPutReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbPutReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;

  if (has_content()) {
    if (!this->content().IsInitialized()) return false;
  }
  return true;
}

void RpbPutReq::Swap(RpbPutReq* other) {
  if (other != this) {
    std::swap(bucket_, other->bucket_);
    std::swap(key_, other->key_);
    std::swap(vclock_, other->vclock_);
    std::swap(content_, other->content_);
    std::swap(w_, other->w_);
    std::swap(dw_, other->dw_);
    std::swap(return_body_, other->return_body_);
    std::swap(pw_, other->pw_);
    std::swap(if_not_modified_, other->if_not_modified_);
    std::swap(if_none_match_, other->if_none_match_);
    std::swap(return_head_, other->return_head_);
    std::swap(timeout_, other->timeout_);
    std::swap(asis_, other->asis_);
    std::swap(sloppy_quorum_, other->sloppy_quorum_);
    std::swap(n_val_, other->n_val_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbPutReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbPutReq_descriptor_;
  metadata.reflection = RpbPutReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbPutResp::kContentFieldNumber;
const int RpbPutResp::kVclockFieldNumber;
const int RpbPutResp::kKeyFieldNumber;
#endif  // !_MSC_VER

RpbPutResp::RpbPutResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbPutResp)
}

void RpbPutResp::InitAsDefaultInstance() {
}

RpbPutResp::RpbPutResp(const RpbPutResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbPutResp)
}

void RpbPutResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  vclock_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbPutResp::~RpbPutResp() {
  // @@protoc_insertion_point(destructor:RpbPutResp)
  SharedDtor();
}

void RpbPutResp::SharedDtor() {
  if (vclock_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vclock_;
  }
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void RpbPutResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbPutResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbPutResp_descriptor_;
}

const RpbPutResp& RpbPutResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_5fkv_2eproto();
  return *default_instance_;
}

RpbPutResp* RpbPutResp::default_instance_ = NULL;

RpbPutResp* RpbPutResp::New() const {
  return new RpbPutResp;
}

void RpbPutResp::Clear() {
  if (_has_bits_[0 / 32] & 6) {
    if (has_vclock()) {
      if (vclock_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        vclock_->clear();
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
  }
  content_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbPutResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbPutResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .RpbContent content = 1;
      case 1: {
        if (tag == 10) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_content;
        if (input->ExpectTag(18)) goto parse_vclock;
        break;
      }

      // optional bytes vclock = 2;
      case 2: {
        if (tag == 18) {
         parse_vclock:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_vclock()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_key;
        break;
      }

      // optional bytes key = 3;
      case 3: {
        if (tag == 26) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbPutResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbPutResp)
  return false;
#undef DO_
}

void RpbPutResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbPutResp)
  // repeated .RpbContent content = 1;
  for (int i = 0; i < this->content_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->content(i), output);
  }

  // optional bytes vclock = 2;
  if (has_vclock()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->vclock(), output);
  }

  // optional bytes key = 3;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbPutResp)
}

::google::protobuf::uint8* RpbPutResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbPutResp)
  // repeated .RpbContent content = 1;
  for (int i = 0; i < this->content_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->content(i), target);
  }

  // optional bytes vclock = 2;
  if (has_vclock()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->vclock(), target);
  }

  // optional bytes key = 3;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbPutResp)
  return target;
}

int RpbPutResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bytes vclock = 2;
    if (has_vclock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->vclock());
    }

    // optional bytes key = 3;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

  }
  // repeated .RpbContent content = 1;
  total_size += 1 * this->content_size();
  for (int i = 0; i < this->content_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->content(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbPutResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbPutResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbPutResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbPutResp::MergeFrom(const RpbPutResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  content_.MergeFrom(from.content_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_vclock()) {
      set_vclock(from.vclock());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbPutResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbPutResp::CopyFrom(const RpbPutResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbPutResp::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->content())) return false;
  return true;
}

void RpbPutResp::Swap(RpbPutResp* other) {
  if (other != this) {
    content_.Swap(&other->content_);
    std::swap(vclock_, other->vclock_);
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbPutResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbPutResp_descriptor_;
  metadata.reflection = RpbPutResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbDelReq::kBucketFieldNumber;
const int RpbDelReq::kKeyFieldNumber;
const int RpbDelReq::kRwFieldNumber;
const int RpbDelReq::kVclockFieldNumber;
const int RpbDelReq::kRFieldNumber;
const int RpbDelReq::kWFieldNumber;
const int RpbDelReq::kPrFieldNumber;
const int RpbDelReq::kPwFieldNumber;
const int RpbDelReq::kDwFieldNumber;
const int RpbDelReq::kTimeoutFieldNumber;
const int RpbDelReq::kSloppyQuorumFieldNumber;
const int RpbDelReq::kNValFieldNumber;
const int RpbDelReq::kTypeFieldNumber;
#endif  // !_MSC_VER

RpbDelReq::RpbDelReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbDelReq)
}

void RpbDelReq::InitAsDefaultInstance() {
}

RpbDelReq::RpbDelReq(const RpbDelReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbDelReq)
}

void RpbDelReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  bucket_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rw_ = 0u;
  vclock_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  r_ = 0u;
  w_ = 0u;
  pr_ = 0u;
  pw_ = 0u;
  dw_ = 0u;
  timeout_ = 0u;
  sloppy_quorum_ = false;
  n_val_ = 0u;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbDelReq::~RpbDelReq() {
  // @@protoc_insertion_point(destructor:RpbDelReq)
  SharedDtor();
}

void RpbDelReq::SharedDtor() {
  if (bucket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bucket_;
  }
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (vclock_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vclock_;
  }
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (this != default_instance_) {
  }
}

void RpbDelReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbDelReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbDelReq_descriptor_;
}

const RpbDelReq& RpbDelReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_5fkv_2eproto();
  return *default_instance_;
}

RpbDelReq* RpbDelReq::default_instance_ = NULL;

RpbDelReq* RpbDelReq::New() const {
  return new RpbDelReq;
}

void RpbDelReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RpbDelReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(rw_, pw_);
    if (has_bucket()) {
      if (bucket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bucket_->clear();
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_vclock()) {
      if (vclock_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        vclock_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 7936) {
    ZR_(dw_, sloppy_quorum_);
    n_val_ = 0u;
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbDelReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbDelReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes bucket = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bucket()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // required bytes key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_rw;
        break;
      }

      // optional uint32 rw = 3;
      case 3: {
        if (tag == 24) {
         parse_rw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rw_)));
          set_has_rw();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_vclock;
        break;
      }

      // optional bytes vclock = 4;
      case 4: {
        if (tag == 34) {
         parse_vclock:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_vclock()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_r;
        break;
      }

      // optional uint32 r = 5;
      case 5: {
        if (tag == 40) {
         parse_r:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &r_)));
          set_has_r();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_w;
        break;
      }

      // optional uint32 w = 6;
      case 6: {
        if (tag == 48) {
         parse_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &w_)));
          set_has_w();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_pr;
        break;
      }

      // optional uint32 pr = 7;
      case 7: {
        if (tag == 56) {
         parse_pr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pr_)));
          set_has_pr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_pw;
        break;
      }

      // optional uint32 pw = 8;
      case 8: {
        if (tag == 64) {
         parse_pw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pw_)));
          set_has_pw();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_dw;
        break;
      }

      // optional uint32 dw = 9;
      case 9: {
        if (tag == 72) {
         parse_dw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_)));
          set_has_dw();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_timeout;
        break;
      }

      // optional uint32 timeout = 10;
      case 10: {
        if (tag == 80) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_sloppy_quorum;
        break;
      }

      // optional bool sloppy_quorum = 11;
      case 11: {
        if (tag == 88) {
         parse_sloppy_quorum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sloppy_quorum_)));
          set_has_sloppy_quorum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_n_val;
        break;
      }

      // optional uint32 n_val = 12;
      case 12: {
        if (tag == 96) {
         parse_n_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &n_val_)));
          set_has_n_val();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_type;
        break;
      }

      // optional bytes type = 13;
      case 13: {
        if (tag == 106) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbDelReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbDelReq)
  return false;
#undef DO_
}

void RpbDelReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbDelReq)
  // required bytes bucket = 1;
  if (has_bucket()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->bucket(), output);
  }

  // required bytes key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->key(), output);
  }

  // optional uint32 rw = 3;
  if (has_rw()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rw(), output);
  }

  // optional bytes vclock = 4;
  if (has_vclock()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->vclock(), output);
  }

  // optional uint32 r = 5;
  if (has_r()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->r(), output);
  }

  // optional uint32 w = 6;
  if (has_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->w(), output);
  }

  // optional uint32 pr = 7;
  if (has_pr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->pr(), output);
  }

  // optional uint32 pw = 8;
  if (has_pw()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->pw(), output);
  }

  // optional uint32 dw = 9;
  if (has_dw()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->dw(), output);
  }

  // optional uint32 timeout = 10;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->timeout(), output);
  }

  // optional bool sloppy_quorum = 11;
  if (has_sloppy_quorum()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->sloppy_quorum(), output);
  }

  // optional uint32 n_val = 12;
  if (has_n_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->n_val(), output);
  }

  // optional bytes type = 13;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      13, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbDelReq)
}

::google::protobuf::uint8* RpbDelReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbDelReq)
  // required bytes bucket = 1;
  if (has_bucket()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->bucket(), target);
  }

  // required bytes key = 2;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->key(), target);
  }

  // optional uint32 rw = 3;
  if (has_rw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rw(), target);
  }

  // optional bytes vclock = 4;
  if (has_vclock()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->vclock(), target);
  }

  // optional uint32 r = 5;
  if (has_r()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->r(), target);
  }

  // optional uint32 w = 6;
  if (has_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->w(), target);
  }

  // optional uint32 pr = 7;
  if (has_pr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->pr(), target);
  }

  // optional uint32 pw = 8;
  if (has_pw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->pw(), target);
  }

  // optional uint32 dw = 9;
  if (has_dw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->dw(), target);
  }

  // optional uint32 timeout = 10;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->timeout(), target);
  }

  // optional bool sloppy_quorum = 11;
  if (has_sloppy_quorum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->sloppy_quorum(), target);
  }

  // optional uint32 n_val = 12;
  if (has_n_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->n_val(), target);
  }

  // optional bytes type = 13;
  if (has_type()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbDelReq)
  return target;
}

int RpbDelReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes bucket = 1;
    if (has_bucket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bucket());
    }

    // required bytes key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // optional uint32 rw = 3;
    if (has_rw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rw());
    }

    // optional bytes vclock = 4;
    if (has_vclock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->vclock());
    }

    // optional uint32 r = 5;
    if (has_r()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->r());
    }

    // optional uint32 w = 6;
    if (has_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->w());
    }

    // optional uint32 pr = 7;
    if (has_pr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pr());
    }

    // optional uint32 pw = 8;
    if (has_pw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pw());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 dw = 9;
    if (has_dw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dw());
    }

    // optional uint32 timeout = 10;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeout());
    }

    // optional bool sloppy_quorum = 11;
    if (has_sloppy_quorum()) {
      total_size += 1 + 1;
    }

    // optional uint32 n_val = 12;
    if (has_n_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->n_val());
    }

    // optional bytes type = 13;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbDelReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbDelReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbDelReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbDelReq::MergeFrom(const RpbDelReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bucket()) {
      set_bucket(from.bucket());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_rw()) {
      set_rw(from.rw());
    }
    if (from.has_vclock()) {
      set_vclock(from.vclock());
    }
    if (from.has_r()) {
      set_r(from.r());
    }
    if (from.has_w()) {
      set_w(from.w());
    }
    if (from.has_pr()) {
      set_pr(from.pr());
    }
    if (from.has_pw()) {
      set_pw(from.pw());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_dw()) {
      set_dw(from.dw());
    }
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
    if (from.has_sloppy_quorum()) {
      set_sloppy_quorum(from.sloppy_quorum());
    }
    if (from.has_n_val()) {
      set_n_val(from.n_val());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbDelReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbDelReq::CopyFrom(const RpbDelReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbDelReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RpbDelReq::Swap(RpbDelReq* other) {
  if (other != this) {
    std::swap(bucket_, other->bucket_);
    std::swap(key_, other->key_);
    std::swap(rw_, other->rw_);
    std::swap(vclock_, other->vclock_);
    std::swap(r_, other->r_);
    std::swap(w_, other->w_);
    std::swap(pr_, other->pr_);
    std::swap(pw_, other->pw_);
    std::swap(dw_, other->dw_);
    std::swap(timeout_, other->timeout_);
    std::swap(sloppy_quorum_, other->sloppy_quorum_);
    std::swap(n_val_, other->n_val_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbDelReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbDelReq_descriptor_;
  metadata.reflection = RpbDelReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbListBucketsReq::kTimeoutFieldNumber;
const int RpbListBucketsReq::kStreamFieldNumber;
const int RpbListBucketsReq::kTypeFieldNumber;
#endif  // !_MSC_VER

RpbListBucketsReq::RpbListBucketsReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbListBucketsReq)
}

void RpbListBucketsReq::InitAsDefaultInstance() {
}

RpbListBucketsReq::RpbListBucketsReq(const RpbListBucketsReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbListBucketsReq)
}

void RpbListBucketsReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  timeout_ = 0u;
  stream_ = false;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbListBucketsReq::~RpbListBucketsReq() {
  // @@protoc_insertion_point(destructor:RpbListBucketsReq)
  SharedDtor();
}

void RpbListBucketsReq::SharedDtor() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (this != default_instance_) {
  }
}

void RpbListBucketsReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbListBucketsReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbListBucketsReq_descriptor_;
}

const RpbListBucketsReq& RpbListBucketsReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_5fkv_2eproto();
  return *default_instance_;
}

RpbListBucketsReq* RpbListBucketsReq::default_instance_ = NULL;

RpbListBucketsReq* RpbListBucketsReq::New() const {
  return new RpbListBucketsReq;
}

void RpbListBucketsReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RpbListBucketsReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(timeout_, stream_);
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbListBucketsReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbListBucketsReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 timeout = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_stream;
        break;
      }

      // optional bool stream = 2;
      case 2: {
        if (tag == 16) {
         parse_stream:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stream_)));
          set_has_stream();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_type;
        break;
      }

      // optional bytes type = 3;
      case 3: {
        if (tag == 26) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbListBucketsReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbListBucketsReq)
  return false;
#undef DO_
}

void RpbListBucketsReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbListBucketsReq)
  // optional uint32 timeout = 1;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->timeout(), output);
  }

  // optional bool stream = 2;
  if (has_stream()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->stream(), output);
  }

  // optional bytes type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbListBucketsReq)
}

::google::protobuf::uint8* RpbListBucketsReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbListBucketsReq)
  // optional uint32 timeout = 1;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->timeout(), target);
  }

  // optional bool stream = 2;
  if (has_stream()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->stream(), target);
  }

  // optional bytes type = 3;
  if (has_type()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbListBucketsReq)
  return target;
}

int RpbListBucketsReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 timeout = 1;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeout());
    }

    // optional bool stream = 2;
    if (has_stream()) {
      total_size += 1 + 1;
    }

    // optional bytes type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbListBucketsReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbListBucketsReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbListBucketsReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbListBucketsReq::MergeFrom(const RpbListBucketsReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
    if (from.has_stream()) {
      set_stream(from.stream());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbListBucketsReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbListBucketsReq::CopyFrom(const RpbListBucketsReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbListBucketsReq::IsInitialized() const {

  return true;
}

void RpbListBucketsReq::Swap(RpbListBucketsReq* other) {
  if (other != this) {
    std::swap(timeout_, other->timeout_);
    std::swap(stream_, other->stream_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbListBucketsReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbListBucketsReq_descriptor_;
  metadata.reflection = RpbListBucketsReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbListBucketsResp::kBucketsFieldNumber;
const int RpbListBucketsResp::kDoneFieldNumber;
#endif  // !_MSC_VER

RpbListBucketsResp::RpbListBucketsResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbListBucketsResp)
}

void RpbListBucketsResp::InitAsDefaultInstance() {
}

RpbListBucketsResp::RpbListBucketsResp(const RpbListBucketsResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbListBucketsResp)
}

void RpbListBucketsResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  done_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbListBucketsResp::~RpbListBucketsResp() {
  // @@protoc_insertion_point(destructor:RpbListBucketsResp)
  SharedDtor();
}

void RpbListBucketsResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RpbListBucketsResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbListBucketsResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbListBucketsResp_descriptor_;
}

const RpbListBucketsResp& RpbListBucketsResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_5fkv_2eproto();
  return *default_instance_;
}

RpbListBucketsResp* RpbListBucketsResp::default_instance_ = NULL;

RpbListBucketsResp* RpbListBucketsResp::New() const {
  return new RpbListBucketsResp;
}

void RpbListBucketsResp::Clear() {
  done_ = false;
  buckets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbListBucketsResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbListBucketsResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes buckets = 1;
      case 1: {
        if (tag == 10) {
         parse_buckets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_buckets()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_buckets;
        if (input->ExpectTag(16)) goto parse_done;
        break;
      }

      // optional bool done = 2;
      case 2: {
        if (tag == 16) {
         parse_done:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &done_)));
          set_has_done();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbListBucketsResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbListBucketsResp)
  return false;
#undef DO_
}

void RpbListBucketsResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbListBucketsResp)
  // repeated bytes buckets = 1;
  for (int i = 0; i < this->buckets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->buckets(i), output);
  }

  // optional bool done = 2;
  if (has_done()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->done(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbListBucketsResp)
}

::google::protobuf::uint8* RpbListBucketsResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbListBucketsResp)
  // repeated bytes buckets = 1;
  for (int i = 0; i < this->buckets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->buckets(i), target);
  }

  // optional bool done = 2;
  if (has_done()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->done(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbListBucketsResp)
  return target;
}

int RpbListBucketsResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bool done = 2;
    if (has_done()) {
      total_size += 1 + 1;
    }

  }
  // repeated bytes buckets = 1;
  total_size += 1 * this->buckets_size();
  for (int i = 0; i < this->buckets_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->buckets(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbListBucketsResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbListBucketsResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbListBucketsResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbListBucketsResp::MergeFrom(const RpbListBucketsResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  buckets_.MergeFrom(from.buckets_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_done()) {
      set_done(from.done());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbListBucketsResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbListBucketsResp::CopyFrom(const RpbListBucketsResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbListBucketsResp::IsInitialized() const {

  return true;
}

void RpbListBucketsResp::Swap(RpbListBucketsResp* other) {
  if (other != this) {
    buckets_.Swap(&other->buckets_);
    std::swap(done_, other->done_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbListBucketsResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbListBucketsResp_descriptor_;
  metadata.reflection = RpbListBucketsResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbListKeysReq::kBucketFieldNumber;
const int RpbListKeysReq::kTimeoutFieldNumber;
const int RpbListKeysReq::kTypeFieldNumber;
#endif  // !_MSC_VER

RpbListKeysReq::RpbListKeysReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbListKeysReq)
}

void RpbListKeysReq::InitAsDefaultInstance() {
}

RpbListKeysReq::RpbListKeysReq(const RpbListKeysReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbListKeysReq)
}

void RpbListKeysReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  bucket_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timeout_ = 0u;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbListKeysReq::~RpbListKeysReq() {
  // @@protoc_insertion_point(destructor:RpbListKeysReq)
  SharedDtor();
}

void RpbListKeysReq::SharedDtor() {
  if (bucket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bucket_;
  }
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (this != default_instance_) {
  }
}

void RpbListKeysReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbListKeysReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbListKeysReq_descriptor_;
}

const RpbListKeysReq& RpbListKeysReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_5fkv_2eproto();
  return *default_instance_;
}

RpbListKeysReq* RpbListKeysReq::default_instance_ = NULL;

RpbListKeysReq* RpbListKeysReq::New() const {
  return new RpbListKeysReq;
}

void RpbListKeysReq::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_bucket()) {
      if (bucket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bucket_->clear();
      }
    }
    timeout_ = 0u;
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbListKeysReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbListKeysReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes bucket = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bucket()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_timeout;
        break;
      }

      // optional uint32 timeout = 2;
      case 2: {
        if (tag == 16) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_type;
        break;
      }

      // optional bytes type = 3;
      case 3: {
        if (tag == 26) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbListKeysReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbListKeysReq)
  return false;
#undef DO_
}

void RpbListKeysReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbListKeysReq)
  // required bytes bucket = 1;
  if (has_bucket()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->bucket(), output);
  }

  // optional uint32 timeout = 2;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->timeout(), output);
  }

  // optional bytes type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbListKeysReq)
}

::google::protobuf::uint8* RpbListKeysReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbListKeysReq)
  // required bytes bucket = 1;
  if (has_bucket()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->bucket(), target);
  }

  // optional uint32 timeout = 2;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->timeout(), target);
  }

  // optional bytes type = 3;
  if (has_type()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbListKeysReq)
  return target;
}

int RpbListKeysReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes bucket = 1;
    if (has_bucket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bucket());
    }

    // optional uint32 timeout = 2;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeout());
    }

    // optional bytes type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbListKeysReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbListKeysReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbListKeysReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbListKeysReq::MergeFrom(const RpbListKeysReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bucket()) {
      set_bucket(from.bucket());
    }
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbListKeysReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbListKeysReq::CopyFrom(const RpbListKeysReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbListKeysReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RpbListKeysReq::Swap(RpbListKeysReq* other) {
  if (other != this) {
    std::swap(bucket_, other->bucket_);
    std::swap(timeout_, other->timeout_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbListKeysReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbListKeysReq_descriptor_;
  metadata.reflection = RpbListKeysReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbListKeysResp::kKeysFieldNumber;
const int RpbListKeysResp::kDoneFieldNumber;
#endif  // !_MSC_VER

RpbListKeysResp::RpbListKeysResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbListKeysResp)
}

void RpbListKeysResp::InitAsDefaultInstance() {
}

RpbListKeysResp::RpbListKeysResp(const RpbListKeysResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbListKeysResp)
}

void RpbListKeysResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  done_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbListKeysResp::~RpbListKeysResp() {
  // @@protoc_insertion_point(destructor:RpbListKeysResp)
  SharedDtor();
}

void RpbListKeysResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RpbListKeysResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbListKeysResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbListKeysResp_descriptor_;
}

const RpbListKeysResp& RpbListKeysResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_5fkv_2eproto();
  return *default_instance_;
}

RpbListKeysResp* RpbListKeysResp::default_instance_ = NULL;

RpbListKeysResp* RpbListKeysResp::New() const {
  return new RpbListKeysResp;
}

void RpbListKeysResp::Clear() {
  done_ = false;
  keys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbListKeysResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbListKeysResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes keys = 1;
      case 1: {
        if (tag == 10) {
         parse_keys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_keys()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_keys;
        if (input->ExpectTag(16)) goto parse_done;
        break;
      }

      // optional bool done = 2;
      case 2: {
        if (tag == 16) {
         parse_done:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &done_)));
          set_has_done();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbListKeysResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbListKeysResp)
  return false;
#undef DO_
}

void RpbListKeysResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbListKeysResp)
  // repeated bytes keys = 1;
  for (int i = 0; i < this->keys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->keys(i), output);
  }

  // optional bool done = 2;
  if (has_done()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->done(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbListKeysResp)
}

::google::protobuf::uint8* RpbListKeysResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbListKeysResp)
  // repeated bytes keys = 1;
  for (int i = 0; i < this->keys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->keys(i), target);
  }

  // optional bool done = 2;
  if (has_done()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->done(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbListKeysResp)
  return target;
}

int RpbListKeysResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bool done = 2;
    if (has_done()) {
      total_size += 1 + 1;
    }

  }
  // repeated bytes keys = 1;
  total_size += 1 * this->keys_size();
  for (int i = 0; i < this->keys_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->keys(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbListKeysResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbListKeysResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbListKeysResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbListKeysResp::MergeFrom(const RpbListKeysResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  keys_.MergeFrom(from.keys_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_done()) {
      set_done(from.done());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbListKeysResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbListKeysResp::CopyFrom(const RpbListKeysResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbListKeysResp::IsInitialized() const {

  return true;
}

void RpbListKeysResp::Swap(RpbListKeysResp* other) {
  if (other != this) {
    keys_.Swap(&other->keys_);
    std::swap(done_, other->done_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbListKeysResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbListKeysResp_descriptor_;
  metadata.reflection = RpbListKeysResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbMapRedReq::kRequestFieldNumber;
const int RpbMapRedReq::kContentTypeFieldNumber;
#endif  // !_MSC_VER

RpbMapRedReq::RpbMapRedReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbMapRedReq)
}

void RpbMapRedReq::InitAsDefaultInstance() {
}

RpbMapRedReq::RpbMapRedReq(const RpbMapRedReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbMapRedReq)
}

void RpbMapRedReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  request_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbMapRedReq::~RpbMapRedReq() {
  // @@protoc_insertion_point(destructor:RpbMapRedReq)
  SharedDtor();
}

void RpbMapRedReq::SharedDtor() {
  if (request_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete request_;
  }
  if (content_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_type_;
  }
  if (this != default_instance_) {
  }
}

void RpbMapRedReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbMapRedReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbMapRedReq_descriptor_;
}

const RpbMapRedReq& RpbMapRedReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_5fkv_2eproto();
  return *default_instance_;
}

RpbMapRedReq* RpbMapRedReq::default_instance_ = NULL;

RpbMapRedReq* RpbMapRedReq::New() const {
  return new RpbMapRedReq;
}

void RpbMapRedReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_request()) {
      if (request_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        request_->clear();
      }
    }
    if (has_content_type()) {
      if (content_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_type_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbMapRedReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbMapRedReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes request = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_content_type;
        break;
      }

      // required bytes content_type = 2;
      case 2: {
        if (tag == 18) {
         parse_content_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbMapRedReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbMapRedReq)
  return false;
#undef DO_
}

void RpbMapRedReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbMapRedReq)
  // required bytes request = 1;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->request(), output);
  }

  // required bytes content_type = 2;
  if (has_content_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->content_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbMapRedReq)
}

::google::protobuf::uint8* RpbMapRedReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbMapRedReq)
  // required bytes request = 1;
  if (has_request()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->request(), target);
  }

  // required bytes content_type = 2;
  if (has_content_type()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->content_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbMapRedReq)
  return target;
}

int RpbMapRedReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes request = 1;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->request());
    }

    // required bytes content_type = 2;
    if (has_content_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbMapRedReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbMapRedReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbMapRedReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbMapRedReq::MergeFrom(const RpbMapRedReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request()) {
      set_request(from.request());
    }
    if (from.has_content_type()) {
      set_content_type(from.content_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbMapRedReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbMapRedReq::CopyFrom(const RpbMapRedReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbMapRedReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RpbMapRedReq::Swap(RpbMapRedReq* other) {
  if (other != this) {
    std::swap(request_, other->request_);
    std::swap(content_type_, other->content_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbMapRedReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbMapRedReq_descriptor_;
  metadata.reflection = RpbMapRedReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbMapRedResp::kPhaseFieldNumber;
const int RpbMapRedResp::kResponseFieldNumber;
const int RpbMapRedResp::kDoneFieldNumber;
#endif  // !_MSC_VER

RpbMapRedResp::RpbMapRedResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbMapRedResp)
}

void RpbMapRedResp::InitAsDefaultInstance() {
}

RpbMapRedResp::RpbMapRedResp(const RpbMapRedResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbMapRedResp)
}

void RpbMapRedResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  phase_ = 0u;
  response_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  done_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbMapRedResp::~RpbMapRedResp() {
  // @@protoc_insertion_point(destructor:RpbMapRedResp)
  SharedDtor();
}

void RpbMapRedResp::SharedDtor() {
  if (response_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete response_;
  }
  if (this != default_instance_) {
  }
}

void RpbMapRedResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbMapRedResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbMapRedResp_descriptor_;
}

const RpbMapRedResp& RpbMapRedResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_5fkv_2eproto();
  return *default_instance_;
}

RpbMapRedResp* RpbMapRedResp::default_instance_ = NULL;

RpbMapRedResp* RpbMapRedResp::New() const {
  return new RpbMapRedResp;
}

void RpbMapRedResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RpbMapRedResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(phase_, done_);
    if (has_response()) {
      if (response_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        response_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbMapRedResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbMapRedResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 phase = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phase_)));
          set_has_phase();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_response;
        break;
      }

      // optional bytes response = 2;
      case 2: {
        if (tag == 18) {
         parse_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_done;
        break;
      }

      // optional bool done = 3;
      case 3: {
        if (tag == 24) {
         parse_done:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &done_)));
          set_has_done();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbMapRedResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbMapRedResp)
  return false;
#undef DO_
}

void RpbMapRedResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbMapRedResp)
  // optional uint32 phase = 1;
  if (has_phase()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->phase(), output);
  }

  // optional bytes response = 2;
  if (has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->response(), output);
  }

  // optional bool done = 3;
  if (has_done()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->done(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbMapRedResp)
}

::google::protobuf::uint8* RpbMapRedResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbMapRedResp)
  // optional uint32 phase = 1;
  if (has_phase()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->phase(), target);
  }

  // optional bytes response = 2;
  if (has_response()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->response(), target);
  }

  // optional bool done = 3;
  if (has_done()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->done(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbMapRedResp)
  return target;
}

int RpbMapRedResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 phase = 1;
    if (has_phase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phase());
    }

    // optional bytes response = 2;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->response());
    }

    // optional bool done = 3;
    if (has_done()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbMapRedResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbMapRedResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbMapRedResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbMapRedResp::MergeFrom(const RpbMapRedResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phase()) {
      set_phase(from.phase());
    }
    if (from.has_response()) {
      set_response(from.response());
    }
    if (from.has_done()) {
      set_done(from.done());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbMapRedResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbMapRedResp::CopyFrom(const RpbMapRedResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbMapRedResp::IsInitialized() const {

  return true;
}

void RpbMapRedResp::Swap(RpbMapRedResp* other) {
  if (other != this) {
    std::swap(phase_, other->phase_);
    std::swap(response_, other->response_);
    std::swap(done_, other->done_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbMapRedResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbMapRedResp_descriptor_;
  metadata.reflection = RpbMapRedResp_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* RpbIndexReq_IndexQueryType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbIndexReq_IndexQueryType_descriptor_;
}
bool RpbIndexReq_IndexQueryType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RpbIndexReq_IndexQueryType RpbIndexReq::eq;
const RpbIndexReq_IndexQueryType RpbIndexReq::range;
const RpbIndexReq_IndexQueryType RpbIndexReq::IndexQueryType_MIN;
const RpbIndexReq_IndexQueryType RpbIndexReq::IndexQueryType_MAX;
const int RpbIndexReq::IndexQueryType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int RpbIndexReq::kBucketFieldNumber;
const int RpbIndexReq::kIndexFieldNumber;
const int RpbIndexReq::kQtypeFieldNumber;
const int RpbIndexReq::kKeyFieldNumber;
const int RpbIndexReq::kRangeMinFieldNumber;
const int RpbIndexReq::kRangeMaxFieldNumber;
const int RpbIndexReq::kReturnTermsFieldNumber;
const int RpbIndexReq::kStreamFieldNumber;
const int RpbIndexReq::kMaxResultsFieldNumber;
const int RpbIndexReq::kContinuationFieldNumber;
const int RpbIndexReq::kTimeoutFieldNumber;
const int RpbIndexReq::kTypeFieldNumber;
const int RpbIndexReq::kTermRegexFieldNumber;
const int RpbIndexReq::kPaginationSortFieldNumber;
const int RpbIndexReq::kCoverContextFieldNumber;
const int RpbIndexReq::kReturnBodyFieldNumber;
#endif  // !_MSC_VER

RpbIndexReq::RpbIndexReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbIndexReq)
}

void RpbIndexReq::InitAsDefaultInstance() {
}

RpbIndexReq::RpbIndexReq(const RpbIndexReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbIndexReq)
}

void RpbIndexReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  bucket_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  index_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  qtype_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  range_min_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  range_max_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  return_terms_ = false;
  stream_ = false;
  max_results_ = 0u;
  continuation_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timeout_ = 0u;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  term_regex_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pagination_sort_ = false;
  cover_context_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  return_body_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbIndexReq::~RpbIndexReq() {
  // @@protoc_insertion_point(destructor:RpbIndexReq)
  SharedDtor();
}

void RpbIndexReq::SharedDtor() {
  if (bucket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bucket_;
  }
  if (index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete index_;
  }
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (range_min_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete range_min_;
  }
  if (range_max_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete range_max_;
  }
  if (continuation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete continuation_;
  }
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (term_regex_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete term_regex_;
  }
  if (cover_context_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cover_context_;
  }
  if (this != default_instance_) {
  }
}

void RpbIndexReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbIndexReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbIndexReq_descriptor_;
}

const RpbIndexReq& RpbIndexReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_5fkv_2eproto();
  return *default_instance_;
}

RpbIndexReq* RpbIndexReq::default_instance_ = NULL;

RpbIndexReq* RpbIndexReq::New() const {
  return new RpbIndexReq;
}

void RpbIndexReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RpbIndexReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(return_terms_, stream_);
    if (has_bucket()) {
      if (bucket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bucket_->clear();
      }
    }
    if (has_index()) {
      if (index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        index_->clear();
      }
    }
    qtype_ = 0;
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_range_min()) {
      if (range_min_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        range_min_->clear();
      }
    }
    if (has_range_max()) {
      if (range_max_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        range_max_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(pagination_sort_, return_body_);
    max_results_ = 0u;
    if (has_continuation()) {
      if (continuation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        continuation_->clear();
      }
    }
    timeout_ = 0u;
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
    if (has_term_regex()) {
      if (term_regex_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        term_regex_->clear();
      }
    }
    if (has_cover_context()) {
      if (cover_context_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cover_context_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbIndexReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbIndexReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes bucket = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bucket()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_index;
        break;
      }

      // required bytes index = 2;
      case 2: {
        if (tag == 18) {
         parse_index:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_index()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_qtype;
        break;
      }

      // required .RpbIndexReq.IndexQueryType qtype = 3;
      case 3: {
        if (tag == 24) {
         parse_qtype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::RpbIndexReq_IndexQueryType_IsValid(value)) {
            set_qtype(static_cast< ::RpbIndexReq_IndexQueryType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_key;
        break;
      }

      // optional bytes key = 4;
      case 4: {
        if (tag == 34) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_range_min;
        break;
      }

      // optional bytes range_min = 5;
      case 5: {
        if (tag == 42) {
         parse_range_min:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_range_min()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_range_max;
        break;
      }

      // optional bytes range_max = 6;
      case 6: {
        if (tag == 50) {
         parse_range_max:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_range_max()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_return_terms;
        break;
      }

      // optional bool return_terms = 7;
      case 7: {
        if (tag == 56) {
         parse_return_terms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &return_terms_)));
          set_has_return_terms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_stream;
        break;
      }

      // optional bool stream = 8;
      case 8: {
        if (tag == 64) {
         parse_stream:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stream_)));
          set_has_stream();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_max_results;
        break;
      }

      // optional uint32 max_results = 9;
      case 9: {
        if (tag == 72) {
         parse_max_results:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_results_)));
          set_has_max_results();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_continuation;
        break;
      }

      // optional bytes continuation = 10;
      case 10: {
        if (tag == 82) {
         parse_continuation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_continuation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_timeout;
        break;
      }

      // optional uint32 timeout = 11;
      case 11: {
        if (tag == 88) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_type;
        break;
      }

      // optional bytes type = 12;
      case 12: {
        if (tag == 98) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_term_regex;
        break;
      }

      // optional bytes term_regex = 13;
      case 13: {
        if (tag == 106) {
         parse_term_regex:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_term_regex()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_pagination_sort;
        break;
      }

      // optional bool pagination_sort = 14;
      case 14: {
        if (tag == 112) {
         parse_pagination_sort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pagination_sort_)));
          set_has_pagination_sort();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_cover_context;
        break;
      }

      // optional bytes cover_context = 15;
      case 15: {
        if (tag == 122) {
         parse_cover_context:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cover_context()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_return_body;
        break;
      }

      // optional bool return_body = 16;
      case 16: {
        if (tag == 128) {
         parse_return_body:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &return_body_)));
          set_has_return_body();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbIndexReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbIndexReq)
  return false;
#undef DO_
}

void RpbIndexReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbIndexReq)
  // required bytes bucket = 1;
  if (has_bucket()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->bucket(), output);
  }

  // required bytes index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->index(), output);
  }

  // required .RpbIndexReq.IndexQueryType qtype = 3;
  if (has_qtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->qtype(), output);
  }

  // optional bytes key = 4;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->key(), output);
  }

  // optional bytes range_min = 5;
  if (has_range_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->range_min(), output);
  }

  // optional bytes range_max = 6;
  if (has_range_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->range_max(), output);
  }

  // optional bool return_terms = 7;
  if (has_return_terms()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->return_terms(), output);
  }

  // optional bool stream = 8;
  if (has_stream()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->stream(), output);
  }

  // optional uint32 max_results = 9;
  if (has_max_results()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->max_results(), output);
  }

  // optional bytes continuation = 10;
  if (has_continuation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->continuation(), output);
  }

  // optional uint32 timeout = 11;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->timeout(), output);
  }

  // optional bytes type = 12;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      12, this->type(), output);
  }

  // optional bytes term_regex = 13;
  if (has_term_regex()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      13, this->term_regex(), output);
  }

  // optional bool pagination_sort = 14;
  if (has_pagination_sort()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->pagination_sort(), output);
  }

  // optional bytes cover_context = 15;
  if (has_cover_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      15, this->cover_context(), output);
  }

  // optional bool return_body = 16;
  if (has_return_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->return_body(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbIndexReq)
}

::google::protobuf::uint8* RpbIndexReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbIndexReq)
  // required bytes bucket = 1;
  if (has_bucket()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->bucket(), target);
  }

  // required bytes index = 2;
  if (has_index()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->index(), target);
  }

  // required .RpbIndexReq.IndexQueryType qtype = 3;
  if (has_qtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->qtype(), target);
  }

  // optional bytes key = 4;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->key(), target);
  }

  // optional bytes range_min = 5;
  if (has_range_min()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->range_min(), target);
  }

  // optional bytes range_max = 6;
  if (has_range_max()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->range_max(), target);
  }

  // optional bool return_terms = 7;
  if (has_return_terms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->return_terms(), target);
  }

  // optional bool stream = 8;
  if (has_stream()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->stream(), target);
  }

  // optional uint32 max_results = 9;
  if (has_max_results()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->max_results(), target);
  }

  // optional bytes continuation = 10;
  if (has_continuation()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->continuation(), target);
  }

  // optional uint32 timeout = 11;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->timeout(), target);
  }

  // optional bytes type = 12;
  if (has_type()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->type(), target);
  }

  // optional bytes term_regex = 13;
  if (has_term_regex()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->term_regex(), target);
  }

  // optional bool pagination_sort = 14;
  if (has_pagination_sort()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->pagination_sort(), target);
  }

  // optional bytes cover_context = 15;
  if (has_cover_context()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        15, this->cover_context(), target);
  }

  // optional bool return_body = 16;
  if (has_return_body()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->return_body(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbIndexReq)
  return target;
}

int RpbIndexReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes bucket = 1;
    if (has_bucket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bucket());
    }

    // required bytes index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->index());
    }

    // required .RpbIndexReq.IndexQueryType qtype = 3;
    if (has_qtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->qtype());
    }

    // optional bytes key = 4;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // optional bytes range_min = 5;
    if (has_range_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->range_min());
    }

    // optional bytes range_max = 6;
    if (has_range_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->range_max());
    }

    // optional bool return_terms = 7;
    if (has_return_terms()) {
      total_size += 1 + 1;
    }

    // optional bool stream = 8;
    if (has_stream()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 max_results = 9;
    if (has_max_results()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_results());
    }

    // optional bytes continuation = 10;
    if (has_continuation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->continuation());
    }

    // optional uint32 timeout = 11;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeout());
    }

    // optional bytes type = 12;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->type());
    }

    // optional bytes term_regex = 13;
    if (has_term_regex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->term_regex());
    }

    // optional bool pagination_sort = 14;
    if (has_pagination_sort()) {
      total_size += 1 + 1;
    }

    // optional bytes cover_context = 15;
    if (has_cover_context()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cover_context());
    }

    // optional bool return_body = 16;
    if (has_return_body()) {
      total_size += 2 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbIndexReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbIndexReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbIndexReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbIndexReq::MergeFrom(const RpbIndexReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bucket()) {
      set_bucket(from.bucket());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_qtype()) {
      set_qtype(from.qtype());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_range_min()) {
      set_range_min(from.range_min());
    }
    if (from.has_range_max()) {
      set_range_max(from.range_max());
    }
    if (from.has_return_terms()) {
      set_return_terms(from.return_terms());
    }
    if (from.has_stream()) {
      set_stream(from.stream());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_max_results()) {
      set_max_results(from.max_results());
    }
    if (from.has_continuation()) {
      set_continuation(from.continuation());
    }
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_term_regex()) {
      set_term_regex(from.term_regex());
    }
    if (from.has_pagination_sort()) {
      set_pagination_sort(from.pagination_sort());
    }
    if (from.has_cover_context()) {
      set_cover_context(from.cover_context());
    }
    if (from.has_return_body()) {
      set_return_body(from.return_body());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbIndexReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbIndexReq::CopyFrom(const RpbIndexReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbIndexReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RpbIndexReq::Swap(RpbIndexReq* other) {
  if (other != this) {
    std::swap(bucket_, other->bucket_);
    std::swap(index_, other->index_);
    std::swap(qtype_, other->qtype_);
    std::swap(key_, other->key_);
    std::swap(range_min_, other->range_min_);
    std::swap(range_max_, other->range_max_);
    std::swap(return_terms_, other->return_terms_);
    std::swap(stream_, other->stream_);
    std::swap(max_results_, other->max_results_);
    std::swap(continuation_, other->continuation_);
    std::swap(timeout_, other->timeout_);
    std::swap(type_, other->type_);
    std::swap(term_regex_, other->term_regex_);
    std::swap(pagination_sort_, other->pagination_sort_);
    std::swap(cover_context_, other->cover_context_);
    std::swap(return_body_, other->return_body_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbIndexReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbIndexReq_descriptor_;
  metadata.reflection = RpbIndexReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbIndexResp::kKeysFieldNumber;
const int RpbIndexResp::kResultsFieldNumber;
const int RpbIndexResp::kContinuationFieldNumber;
const int RpbIndexResp::kDoneFieldNumber;
#endif  // !_MSC_VER

RpbIndexResp::RpbIndexResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbIndexResp)
}

void RpbIndexResp::InitAsDefaultInstance() {
}

RpbIndexResp::RpbIndexResp(const RpbIndexResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbIndexResp)
}

void RpbIndexResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  continuation_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  done_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbIndexResp::~RpbIndexResp() {
  // @@protoc_insertion_point(destructor:RpbIndexResp)
  SharedDtor();
}

void RpbIndexResp::SharedDtor() {
  if (continuation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete continuation_;
  }
  if (this != default_instance_) {
  }
}

void RpbIndexResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbIndexResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbIndexResp_descriptor_;
}

const RpbIndexResp& RpbIndexResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_5fkv_2eproto();
  return *default_instance_;
}

RpbIndexResp* RpbIndexResp::default_instance_ = NULL;

RpbIndexResp* RpbIndexResp::New() const {
  return new RpbIndexResp;
}

void RpbIndexResp::Clear() {
  if (_has_bits_[0 / 32] & 12) {
    if (has_continuation()) {
      if (continuation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        continuation_->clear();
      }
    }
    done_ = false;
  }
  keys_.Clear();
  results_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbIndexResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbIndexResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes keys = 1;
      case 1: {
        if (tag == 10) {
         parse_keys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_keys()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_keys;
        if (input->ExpectTag(18)) goto parse_results;
        break;
      }

      // repeated .RpbPair results = 2;
      case 2: {
        if (tag == 18) {
         parse_results:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_results()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_results;
        if (input->ExpectTag(26)) goto parse_continuation;
        break;
      }

      // optional bytes continuation = 3;
      case 3: {
        if (tag == 26) {
         parse_continuation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_continuation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_done;
        break;
      }

      // optional bool done = 4;
      case 4: {
        if (tag == 32) {
         parse_done:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &done_)));
          set_has_done();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbIndexResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbIndexResp)
  return false;
#undef DO_
}

void RpbIndexResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbIndexResp)
  // repeated bytes keys = 1;
  for (int i = 0; i < this->keys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->keys(i), output);
  }

  // repeated .RpbPair results = 2;
  for (int i = 0; i < this->results_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->results(i), output);
  }

  // optional bytes continuation = 3;
  if (has_continuation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->continuation(), output);
  }

  // optional bool done = 4;
  if (has_done()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->done(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbIndexResp)
}

::google::protobuf::uint8* RpbIndexResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbIndexResp)
  // repeated bytes keys = 1;
  for (int i = 0; i < this->keys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->keys(i), target);
  }

  // repeated .RpbPair results = 2;
  for (int i = 0; i < this->results_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->results(i), target);
  }

  // optional bytes continuation = 3;
  if (has_continuation()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->continuation(), target);
  }

  // optional bool done = 4;
  if (has_done()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->done(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbIndexResp)
  return target;
}

int RpbIndexResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional bytes continuation = 3;
    if (has_continuation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->continuation());
    }

    // optional bool done = 4;
    if (has_done()) {
      total_size += 1 + 1;
    }

  }
  // repeated bytes keys = 1;
  total_size += 1 * this->keys_size();
  for (int i = 0; i < this->keys_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->keys(i));
  }

  // repeated .RpbPair results = 2;
  total_size += 1 * this->results_size();
  for (int i = 0; i < this->results_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->results(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbIndexResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbIndexResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbIndexResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbIndexResp::MergeFrom(const RpbIndexResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  keys_.MergeFrom(from.keys_);
  results_.MergeFrom(from.results_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_continuation()) {
      set_continuation(from.continuation());
    }
    if (from.has_done()) {
      set_done(from.done());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbIndexResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbIndexResp::CopyFrom(const RpbIndexResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbIndexResp::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->results())) return false;
  return true;
}

void RpbIndexResp::Swap(RpbIndexResp* other) {
  if (other != this) {
    keys_.Swap(&other->keys_);
    results_.Swap(&other->results_);
    std::swap(continuation_, other->continuation_);
    std::swap(done_, other->done_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbIndexResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbIndexResp_descriptor_;
  metadata.reflection = RpbIndexResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbIndexBodyResp::kObjectsFieldNumber;
const int RpbIndexBodyResp::kContinuationFieldNumber;
const int RpbIndexBodyResp::kDoneFieldNumber;
#endif  // !_MSC_VER

RpbIndexBodyResp::RpbIndexBodyResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbIndexBodyResp)
}

void RpbIndexBodyResp::InitAsDefaultInstance() {
}

RpbIndexBodyResp::RpbIndexBodyResp(const RpbIndexBodyResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbIndexBodyResp)
}

void RpbIndexBodyResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  continuation_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  done_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbIndexBodyResp::~RpbIndexBodyResp() {
  // @@protoc_insertion_point(destructor:RpbIndexBodyResp)
  SharedDtor();
}

void RpbIndexBodyResp::SharedDtor() {
  if (continuation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete continuation_;
  }
  if (this != default_instance_) {
  }
}

void RpbIndexBodyResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbIndexBodyResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbIndexBodyResp_descriptor_;
}

const RpbIndexBodyResp& RpbIndexBodyResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_5fkv_2eproto();
  return *default_instance_;
}

RpbIndexBodyResp* RpbIndexBodyResp::default_instance_ = NULL;

RpbIndexBodyResp* RpbIndexBodyResp::New() const {
  return new RpbIndexBodyResp;
}

void RpbIndexBodyResp::Clear() {
  if (_has_bits_[0 / 32] & 6) {
    if (has_continuation()) {
      if (continuation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        continuation_->clear();
      }
    }
    done_ = false;
  }
  objects_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbIndexBodyResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbIndexBodyResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .RpbIndexObject objects = 1;
      case 1: {
        if (tag == 10) {
         parse_objects:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_objects()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_objects;
        if (input->ExpectTag(18)) goto parse_continuation;
        break;
      }

      // optional bytes continuation = 2;
      case 2: {
        if (tag == 18) {
         parse_continuation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_continuation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_done;
        break;
      }

      // optional bool done = 3;
      case 3: {
        if (tag == 24) {
         parse_done:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &done_)));
          set_has_done();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbIndexBodyResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbIndexBodyResp)
  return false;
#undef DO_
}

void RpbIndexBodyResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbIndexBodyResp)
  // repeated .RpbIndexObject objects = 1;
  for (int i = 0; i < this->objects_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->objects(i), output);
  }

  // optional bytes continuation = 2;
  if (has_continuation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->continuation(), output);
  }

  // optional bool done = 3;
  if (has_done()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->done(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbIndexBodyResp)
}

::google::protobuf::uint8* RpbIndexBodyResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbIndexBodyResp)
  // repeated .RpbIndexObject objects = 1;
  for (int i = 0; i < this->objects_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->objects(i), target);
  }

  // optional bytes continuation = 2;
  if (has_continuation()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->continuation(), target);
  }

  // optional bool done = 3;
  if (has_done()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->done(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbIndexBodyResp)
  return target;
}

int RpbIndexBodyResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bytes continuation = 2;
    if (has_continuation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->continuation());
    }

    // optional bool done = 3;
    if (has_done()) {
      total_size += 1 + 1;
    }

  }
  // repeated .RpbIndexObject objects = 1;
  total_size += 1 * this->objects_size();
  for (int i = 0; i < this->objects_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->objects(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbIndexBodyResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbIndexBodyResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbIndexBodyResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbIndexBodyResp::MergeFrom(const RpbIndexBodyResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  objects_.MergeFrom(from.objects_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_continuation()) {
      set_continuation(from.continuation());
    }
    if (from.has_done()) {
      set_done(from.done());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbIndexBodyResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbIndexBodyResp::CopyFrom(const RpbIndexBodyResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbIndexBodyResp::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->objects())) return false;
  return true;
}

void RpbIndexBodyResp::Swap(RpbIndexBodyResp* other) {
  if (other != this) {
    objects_.Swap(&other->objects_);
    std::swap(continuation_, other->continuation_);
    std::swap(done_, other->done_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbIndexBodyResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbIndexBodyResp_descriptor_;
  metadata.reflection = RpbIndexBodyResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbCSBucketReq::kBucketFieldNumber;
const int RpbCSBucketReq::kStartKeyFieldNumber;
const int RpbCSBucketReq::kEndKeyFieldNumber;
const int RpbCSBucketReq::kStartInclFieldNumber;
const int RpbCSBucketReq::kEndInclFieldNumber;
const int RpbCSBucketReq::kContinuationFieldNumber;
const int RpbCSBucketReq::kMaxResultsFieldNumber;
const int RpbCSBucketReq::kTimeoutFieldNumber;
const int RpbCSBucketReq::kTypeFieldNumber;
const int RpbCSBucketReq::kCoverContextFieldNumber;
#endif  // !_MSC_VER

RpbCSBucketReq::RpbCSBucketReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbCSBucketReq)
}

void RpbCSBucketReq::InitAsDefaultInstance() {
}

RpbCSBucketReq::RpbCSBucketReq(const RpbCSBucketReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbCSBucketReq)
}

void RpbCSBucketReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  bucket_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_incl_ = true;
  end_incl_ = false;
  continuation_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  max_results_ = 0u;
  timeout_ = 0u;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cover_context_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbCSBucketReq::~RpbCSBucketReq() {
  // @@protoc_insertion_point(destructor:RpbCSBucketReq)
  SharedDtor();
}

void RpbCSBucketReq::SharedDtor() {
  if (bucket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bucket_;
  }
  if (start_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_key_;
  }
  if (end_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_key_;
  }
  if (continuation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete continuation_;
  }
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (cover_context_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cover_context_;
  }
  if (this != default_instance_) {
  }
}

void RpbCSBucketReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbCSBucketReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbCSBucketReq_descriptor_;
}

const RpbCSBucketReq& RpbCSBucketReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_5fkv_2eproto();
  return *default_instance_;
}

RpbCSBucketReq* RpbCSBucketReq::default_instance_ = NULL;

RpbCSBucketReq* RpbCSBucketReq::New() const {
  return new RpbCSBucketReq;
}

void RpbCSBucketReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RpbCSBucketReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(end_incl_, max_results_);
    if (has_bucket()) {
      if (bucket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bucket_->clear();
      }
    }
    if (has_start_key()) {
      if (start_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        start_key_->clear();
      }
    }
    if (has_end_key()) {
      if (end_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        end_key_->clear();
      }
    }
    start_incl_ = true;
    if (has_continuation()) {
      if (continuation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        continuation_->clear();
      }
    }
    timeout_ = 0u;
  }
  if (_has_bits_[8 / 32] & 768) {
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
    if (has_cover_context()) {
      if (cover_context_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cover_context_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbCSBucketReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbCSBucketReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes bucket = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bucket()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_start_key;
        break;
      }

      // required bytes start_key = 2;
      case 2: {
        if (tag == 18) {
         parse_start_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_end_key;
        break;
      }

      // optional bytes end_key = 3;
      case 3: {
        if (tag == 26) {
         parse_end_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_start_incl;
        break;
      }

      // optional bool start_incl = 4 [default = true];
      case 4: {
        if (tag == 32) {
         parse_start_incl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &start_incl_)));
          set_has_start_incl();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_end_incl;
        break;
      }

      // optional bool end_incl = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_end_incl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &end_incl_)));
          set_has_end_incl();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_continuation;
        break;
      }

      // optional bytes continuation = 6;
      case 6: {
        if (tag == 50) {
         parse_continuation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_continuation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_max_results;
        break;
      }

      // optional uint32 max_results = 7;
      case 7: {
        if (tag == 56) {
         parse_max_results:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_results_)));
          set_has_max_results();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_timeout;
        break;
      }

      // optional uint32 timeout = 8;
      case 8: {
        if (tag == 64) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_type;
        break;
      }

      // optional bytes type = 9;
      case 9: {
        if (tag == 74) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_cover_context;
        break;
      }

      // optional bytes cover_context = 10;
      case 10: {
        if (tag == 82) {
         parse_cover_context:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cover_context()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbCSBucketReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbCSBucketReq)
  return false;
#undef DO_
}

void RpbCSBucketReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbCSBucketReq)
  // required bytes bucket = 1;
  if (has_bucket()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->bucket(), output);
  }

  // required bytes start_key = 2;
  if (has_start_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->start_key(), output);
  }

  // optional bytes end_key = 3;
  if (has_end_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->end_key(), output);
  }

  // optional bool start_incl = 4 [default = true];
  if (has_start_incl()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->start_incl(), output);
  }

  // optional bool end_incl = 5 [default = false];
  if (has_end_incl()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->end_incl(), output);
  }

  // optional bytes continuation = 6;
  if (has_continuation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->continuation(), output);
  }

  // optional uint32 max_results = 7;
  if (has_max_results()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->max_results(), output);
  }

  // optional uint32 timeout = 8;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->timeout(), output);
  }

  // optional bytes type = 9;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->type(), output);
  }

  // optional bytes cover_context = 10;
  if (has_cover_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->cover_context(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbCSBucketReq)
}

::google::protobuf::uint8* RpbCSBucketReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbCSBucketReq)
  // required bytes bucket = 1;
  if (has_bucket()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->bucket(), target);
  }

  // required bytes start_key = 2;
  if (has_start_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->start_key(), target);
  }

  // optional bytes end_key = 3;
  if (has_end_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->end_key(), target);
  }

  // optional bool start_incl = 4 [default = true];
  if (has_start_incl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->start_incl(), target);
  }

  // optional bool end_incl = 5 [default = false];
  if (has_end_incl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->end_incl(), target);
  }

  // optional bytes continuation = 6;
  if (has_continuation()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->continuation(), target);
  }

  // optional uint32 max_results = 7;
  if (has_max_results()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->max_results(), target);
  }

  // optional uint32 timeout = 8;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->timeout(), target);
  }

  // optional bytes type = 9;
  if (has_type()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->type(), target);
  }

  // optional bytes cover_context = 10;
  if (has_cover_context()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->cover_context(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbCSBucketReq)
  return target;
}

int RpbCSBucketReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes bucket = 1;
    if (has_bucket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bucket());
    }

    // required bytes start_key = 2;
    if (has_start_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->start_key());
    }

    // optional bytes end_key = 3;
    if (has_end_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->end_key());
    }

    // optional bool start_incl = 4 [default = true];
    if (has_start_incl()) {
      total_size += 1 + 1;
    }

    // optional bool end_incl = 5 [default = false];
    if (has_end_incl()) {
      total_size += 1 + 1;
    }

    // optional bytes continuation = 6;
    if (has_continuation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->continuation());
    }

    // optional uint32 max_results = 7;
    if (has_max_results()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_results());
    }

    // optional uint32 timeout = 8;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeout());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes type = 9;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->type());
    }

    // optional bytes cover_context = 10;
    if (has_cover_context()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cover_context());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbCSBucketReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbCSBucketReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbCSBucketReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbCSBucketReq::MergeFrom(const RpbCSBucketReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bucket()) {
      set_bucket(from.bucket());
    }
    if (from.has_start_key()) {
      set_start_key(from.start_key());
    }
    if (from.has_end_key()) {
      set_end_key(from.end_key());
    }
    if (from.has_start_incl()) {
      set_start_incl(from.start_incl());
    }
    if (from.has_end_incl()) {
      set_end_incl(from.end_incl());
    }
    if (from.has_continuation()) {
      set_continuation(from.continuation());
    }
    if (from.has_max_results()) {
      set_max_results(from.max_results());
    }
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_cover_context()) {
      set_cover_context(from.cover_context());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbCSBucketReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbCSBucketReq::CopyFrom(const RpbCSBucketReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbCSBucketReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RpbCSBucketReq::Swap(RpbCSBucketReq* other) {
  if (other != this) {
    std::swap(bucket_, other->bucket_);
    std::swap(start_key_, other->start_key_);
    std::swap(end_key_, other->end_key_);
    std::swap(start_incl_, other->start_incl_);
    std::swap(end_incl_, other->end_incl_);
    std::swap(continuation_, other->continuation_);
    std::swap(max_results_, other->max_results_);
    std::swap(timeout_, other->timeout_);
    std::swap(type_, other->type_);
    std::swap(cover_context_, other->cover_context_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbCSBucketReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbCSBucketReq_descriptor_;
  metadata.reflection = RpbCSBucketReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbCSBucketResp::kObjectsFieldNumber;
const int RpbCSBucketResp::kContinuationFieldNumber;
const int RpbCSBucketResp::kDoneFieldNumber;
#endif  // !_MSC_VER

RpbCSBucketResp::RpbCSBucketResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbCSBucketResp)
}

void RpbCSBucketResp::InitAsDefaultInstance() {
}

RpbCSBucketResp::RpbCSBucketResp(const RpbCSBucketResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbCSBucketResp)
}

void RpbCSBucketResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  continuation_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  done_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbCSBucketResp::~RpbCSBucketResp() {
  // @@protoc_insertion_point(destructor:RpbCSBucketResp)
  SharedDtor();
}

void RpbCSBucketResp::SharedDtor() {
  if (continuation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete continuation_;
  }
  if (this != default_instance_) {
  }
}

void RpbCSBucketResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbCSBucketResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbCSBucketResp_descriptor_;
}

const RpbCSBucketResp& RpbCSBucketResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_5fkv_2eproto();
  return *default_instance_;
}

RpbCSBucketResp* RpbCSBucketResp::default_instance_ = NULL;

RpbCSBucketResp* RpbCSBucketResp::New() const {
  return new RpbCSBucketResp;
}

void RpbCSBucketResp::Clear() {
  if (_has_bits_[0 / 32] & 6) {
    if (has_continuation()) {
      if (continuation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        continuation_->clear();
      }
    }
    done_ = false;
  }
  objects_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbCSBucketResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbCSBucketResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .RpbIndexObject objects = 1;
      case 1: {
        if (tag == 10) {
         parse_objects:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_objects()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_objects;
        if (input->ExpectTag(18)) goto parse_continuation;
        break;
      }

      // optional bytes continuation = 2;
      case 2: {
        if (tag == 18) {
         parse_continuation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_continuation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_done;
        break;
      }

      // optional bool done = 3;
      case 3: {
        if (tag == 24) {
         parse_done:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &done_)));
          set_has_done();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbCSBucketResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbCSBucketResp)
  return false;
#undef DO_
}

void RpbCSBucketResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbCSBucketResp)
  // repeated .RpbIndexObject objects = 1;
  for (int i = 0; i < this->objects_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->objects(i), output);
  }

  // optional bytes continuation = 2;
  if (has_continuation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->continuation(), output);
  }

  // optional bool done = 3;
  if (has_done()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->done(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbCSBucketResp)
}

::google::protobuf::uint8* RpbCSBucketResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbCSBucketResp)
  // repeated .RpbIndexObject objects = 1;
  for (int i = 0; i < this->objects_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->objects(i), target);
  }

  // optional bytes continuation = 2;
  if (has_continuation()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->continuation(), target);
  }

  // optional bool done = 3;
  if (has_done()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->done(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbCSBucketResp)
  return target;
}

int RpbCSBucketResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bytes continuation = 2;
    if (has_continuation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->continuation());
    }

    // optional bool done = 3;
    if (has_done()) {
      total_size += 1 + 1;
    }

  }
  // repeated .RpbIndexObject objects = 1;
  total_size += 1 * this->objects_size();
  for (int i = 0; i < this->objects_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->objects(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbCSBucketResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbCSBucketResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbCSBucketResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbCSBucketResp::MergeFrom(const RpbCSBucketResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  objects_.MergeFrom(from.objects_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_continuation()) {
      set_continuation(from.continuation());
    }
    if (from.has_done()) {
      set_done(from.done());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbCSBucketResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbCSBucketResp::CopyFrom(const RpbCSBucketResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbCSBucketResp::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->objects())) return false;
  return true;
}

void RpbCSBucketResp::Swap(RpbCSBucketResp* other) {
  if (other != this) {
    objects_.Swap(&other->objects_);
    std::swap(continuation_, other->continuation_);
    std::swap(done_, other->done_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbCSBucketResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbCSBucketResp_descriptor_;
  metadata.reflection = RpbCSBucketResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbIndexObject::kKeyFieldNumber;
const int RpbIndexObject::kObjectFieldNumber;
#endif  // !_MSC_VER

RpbIndexObject::RpbIndexObject()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbIndexObject)
}

void RpbIndexObject::InitAsDefaultInstance() {
  object_ = const_cast< ::RpbGetResp*>(&::RpbGetResp::default_instance());
}

RpbIndexObject::RpbIndexObject(const RpbIndexObject& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbIndexObject)
}

void RpbIndexObject::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  object_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbIndexObject::~RpbIndexObject() {
  // @@protoc_insertion_point(destructor:RpbIndexObject)
  SharedDtor();
}

void RpbIndexObject::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (this != default_instance_) {
    delete object_;
  }
}

void RpbIndexObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbIndexObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbIndexObject_descriptor_;
}

const RpbIndexObject& RpbIndexObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_5fkv_2eproto();
  return *default_instance_;
}

RpbIndexObject* RpbIndexObject::default_instance_ = NULL;

RpbIndexObject* RpbIndexObject::New() const {
  return new RpbIndexObject;
}

void RpbIndexObject::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_object()) {
      if (object_ != NULL) object_->::RpbGetResp::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbIndexObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbIndexObject)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_object;
        break;
      }

      // required .RpbGetResp object = 2;
      case 2: {
        if (tag == 18) {
         parse_object:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_object()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbIndexObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbIndexObject)
  return false;
#undef DO_
}

void RpbIndexObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbIndexObject)
  // required bytes key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // required .RpbGetResp object = 2;
  if (has_object()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->object(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbIndexObject)
}

::google::protobuf::uint8* RpbIndexObject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbIndexObject)
  // required bytes key = 1;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // required .RpbGetResp object = 2;
  if (has_object()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->object(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbIndexObject)
  return target;
}

int RpbIndexObject::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // required .RpbGetResp object = 2;
    if (has_object()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->object());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbIndexObject::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbIndexObject* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbIndexObject*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbIndexObject::MergeFrom(const RpbIndexObject& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_object()) {
      mutable_object()->::RpbGetResp::MergeFrom(from.object());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbIndexObject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbIndexObject::CopyFrom(const RpbIndexObject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbIndexObject::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_object()) {
    if (!this->object().IsInitialized()) return false;
  }
  return true;
}

void RpbIndexObject::Swap(RpbIndexObject* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(object_, other->object_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbIndexObject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbIndexObject_descriptor_;
  metadata.reflection = RpbIndexObject_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbContent::kValueFieldNumber;
const int RpbContent::kContentTypeFieldNumber;
const int RpbContent::kCharsetFieldNumber;
const int RpbContent::kContentEncodingFieldNumber;
const int RpbContent::kVtagFieldNumber;
const int RpbContent::kLinksFieldNumber;
const int RpbContent::kLastModFieldNumber;
const int RpbContent::kLastModUsecsFieldNumber;
const int RpbContent::kUsermetaFieldNumber;
const int RpbContent::kIndexesFieldNumber;
const int RpbContent::kDeletedFieldNumber;
#endif  // !_MSC_VER

RpbContent::RpbContent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbContent)
}

void RpbContent::InitAsDefaultInstance() {
}

RpbContent::RpbContent(const RpbContent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbContent)
}

void RpbContent::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  charset_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_encoding_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vtag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_mod_ = 0u;
  last_mod_usecs_ = 0u;
  deleted_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbContent::~RpbContent() {
  // @@protoc_insertion_point(destructor:RpbContent)
  SharedDtor();
}

void RpbContent::SharedDtor() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (content_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_type_;
  }
  if (charset_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete charset_;
  }
  if (content_encoding_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_encoding_;
  }
  if (vtag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vtag_;
  }
  if (this != default_instance_) {
  }
}

void RpbContent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbContent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbContent_descriptor_;
}

const RpbContent& RpbContent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_5fkv_2eproto();
  return *default_instance_;
}

RpbContent* RpbContent::default_instance_ = NULL;

RpbContent* RpbContent::New() const {
  return new RpbContent;
}

void RpbContent::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RpbContent*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 223) {
    ZR_(last_mod_, last_mod_usecs_);
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
    if (has_content_type()) {
      if (content_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_type_->clear();
      }
    }
    if (has_charset()) {
      if (charset_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        charset_->clear();
      }
    }
    if (has_content_encoding()) {
      if (content_encoding_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_encoding_->clear();
      }
    }
    if (has_vtag()) {
      if (vtag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        vtag_->clear();
      }
    }
  }
  deleted_ = false;

#undef OFFSET_OF_FIELD_
#undef ZR_

  links_.Clear();
  usermeta_.Clear();
  indexes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbContent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbContent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes value = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_content_type;
        break;
      }

      // optional bytes content_type = 2;
      case 2: {
        if (tag == 18) {
         parse_content_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_charset;
        break;
      }

      // optional bytes charset = 3;
      case 3: {
        if (tag == 26) {
         parse_charset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_charset()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_content_encoding;
        break;
      }

      // optional bytes content_encoding = 4;
      case 4: {
        if (tag == 34) {
         parse_content_encoding:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content_encoding()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_vtag;
        break;
      }

      // optional bytes vtag = 5;
      case 5: {
        if (tag == 42) {
         parse_vtag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_vtag()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_links;
        break;
      }

      // repeated .RpbLink links = 6;
      case 6: {
        if (tag == 50) {
         parse_links:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_links()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_links;
        if (input->ExpectTag(56)) goto parse_last_mod;
        break;
      }

      // optional uint32 last_mod = 7;
      case 7: {
        if (tag == 56) {
         parse_last_mod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_mod_)));
          set_has_last_mod();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_last_mod_usecs;
        break;
      }

      // optional uint32 last_mod_usecs = 8;
      case 8: {
        if (tag == 64) {
         parse_last_mod_usecs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_mod_usecs_)));
          set_has_last_mod_usecs();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_usermeta;
        break;
      }

      // repeated .RpbPair usermeta = 9;
      case 9: {
        if (tag == 74) {
         parse_usermeta:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_usermeta()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_usermeta;
        if (input->ExpectTag(82)) goto parse_indexes;
        break;
      }

      // repeated .RpbPair indexes = 10;
      case 10: {
        if (tag == 82) {
         parse_indexes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_indexes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_indexes;
        if (input->ExpectTag(88)) goto parse_deleted;
        break;
      }

      // optional bool deleted = 11;
      case 11: {
        if (tag == 88) {
         parse_deleted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &deleted_)));
          set_has_deleted();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbContent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbContent)
  return false;
#undef DO_
}

void RpbContent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbContent)
  // required bytes value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->value(), output);
  }

  // optional bytes content_type = 2;
  if (has_content_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->content_type(), output);
  }

  // optional bytes charset = 3;
  if (has_charset()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->charset(), output);
  }

  // optional bytes content_encoding = 4;
  if (has_content_encoding()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->content_encoding(), output);
  }

  // optional bytes vtag = 5;
  if (has_vtag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->vtag(), output);
  }

  // repeated .RpbLink links = 6;
  for (int i = 0; i < this->links_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->links(i), output);
  }

  // optional uint32 last_mod = 7;
  if (has_last_mod()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->last_mod(), output);
  }

  // optional uint32 last_mod_usecs = 8;
  if (has_last_mod_usecs()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->last_mod_usecs(), output);
  }

  // repeated .RpbPair usermeta = 9;
  for (int i = 0; i < this->usermeta_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->usermeta(i), output);
  }

  // repeated .RpbPair indexes = 10;
  for (int i = 0; i < this->indexes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->indexes(i), output);
  }

  // optional bool deleted = 11;
  if (has_deleted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->deleted(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbContent)
}

::google::protobuf::uint8* RpbContent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbContent)
  // required bytes value = 1;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->value(), target);
  }

  // optional bytes content_type = 2;
  if (has_content_type()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->content_type(), target);
  }

  // optional bytes charset = 3;
  if (has_charset()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->charset(), target);
  }

  // optional bytes content_encoding = 4;
  if (has_content_encoding()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->content_encoding(), target);
  }

  // optional bytes vtag = 5;
  if (has_vtag()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->vtag(), target);
  }

  // repeated .RpbLink links = 6;
  for (int i = 0; i < this->links_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->links(i), target);
  }

  // optional uint32 last_mod = 7;
  if (has_last_mod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->last_mod(), target);
  }

  // optional uint32 last_mod_usecs = 8;
  if (has_last_mod_usecs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->last_mod_usecs(), target);
  }

  // repeated .RpbPair usermeta = 9;
  for (int i = 0; i < this->usermeta_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->usermeta(i), target);
  }

  // repeated .RpbPair indexes = 10;
  for (int i = 0; i < this->indexes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->indexes(i), target);
  }

  // optional bool deleted = 11;
  if (has_deleted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->deleted(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbContent)
  return target;
}

int RpbContent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

    // optional bytes content_type = 2;
    if (has_content_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content_type());
    }

    // optional bytes charset = 3;
    if (has_charset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->charset());
    }

    // optional bytes content_encoding = 4;
    if (has_content_encoding()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content_encoding());
    }

    // optional bytes vtag = 5;
    if (has_vtag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->vtag());
    }

    // optional uint32 last_mod = 7;
    if (has_last_mod()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_mod());
    }

    // optional uint32 last_mod_usecs = 8;
    if (has_last_mod_usecs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_mod_usecs());
    }

  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    // optional bool deleted = 11;
    if (has_deleted()) {
      total_size += 1 + 1;
    }

  }
  // repeated .RpbLink links = 6;
  total_size += 1 * this->links_size();
  for (int i = 0; i < this->links_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->links(i));
  }

  // repeated .RpbPair usermeta = 9;
  total_size += 1 * this->usermeta_size();
  for (int i = 0; i < this->usermeta_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->usermeta(i));
  }

  // repeated .RpbPair indexes = 10;
  total_size += 1 * this->indexes_size();
  for (int i = 0; i < this->indexes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->indexes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbContent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbContent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbContent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbContent::MergeFrom(const RpbContent& from) {
  GOOGLE_CHECK_NE(&from, this);
  links_.MergeFrom(from.links_);
  usermeta_.MergeFrom(from.usermeta_);
  indexes_.MergeFrom(from.indexes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_content_type()) {
      set_content_type(from.content_type());
    }
    if (from.has_charset()) {
      set_charset(from.charset());
    }
    if (from.has_content_encoding()) {
      set_content_encoding(from.content_encoding());
    }
    if (from.has_vtag()) {
      set_vtag(from.vtag());
    }
    if (from.has_last_mod()) {
      set_last_mod(from.last_mod());
    }
    if (from.has_last_mod_usecs()) {
      set_last_mod_usecs(from.last_mod_usecs());
    }
  }
  if (from._has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (from.has_deleted()) {
      set_deleted(from.deleted());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbContent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbContent::CopyFrom(const RpbContent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbContent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->usermeta())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->indexes())) return false;
  return true;
}

void RpbContent::Swap(RpbContent* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(content_type_, other->content_type_);
    std::swap(charset_, other->charset_);
    std::swap(content_encoding_, other->content_encoding_);
    std::swap(vtag_, other->vtag_);
    links_.Swap(&other->links_);
    std::swap(last_mod_, other->last_mod_);
    std::swap(last_mod_usecs_, other->last_mod_usecs_);
    usermeta_.Swap(&other->usermeta_);
    indexes_.Swap(&other->indexes_);
    std::swap(deleted_, other->deleted_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbContent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbContent_descriptor_;
  metadata.reflection = RpbContent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbLink::kBucketFieldNumber;
const int RpbLink::kKeyFieldNumber;
const int RpbLink::kTagFieldNumber;
#endif  // !_MSC_VER

RpbLink::RpbLink()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbLink)
}

void RpbLink::InitAsDefaultInstance() {
}

RpbLink::RpbLink(const RpbLink& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbLink)
}

void RpbLink::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  bucket_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbLink::~RpbLink() {
  // @@protoc_insertion_point(destructor:RpbLink)
  SharedDtor();
}

void RpbLink::SharedDtor() {
  if (bucket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bucket_;
  }
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tag_;
  }
  if (this != default_instance_) {
  }
}

void RpbLink::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbLink::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbLink_descriptor_;
}

const RpbLink& RpbLink::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_5fkv_2eproto();
  return *default_instance_;
}

RpbLink* RpbLink::default_instance_ = NULL;

RpbLink* RpbLink::New() const {
  return new RpbLink;
}

void RpbLink::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_bucket()) {
      if (bucket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bucket_->clear();
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_tag()) {
      if (tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tag_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbLink::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbLink)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes bucket = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bucket()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional bytes key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_tag;
        break;
      }

      // optional bytes tag = 3;
      case 3: {
        if (tag == 26) {
         parse_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tag()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbLink)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbLink)
  return false;
#undef DO_
}

void RpbLink::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbLink)
  // optional bytes bucket = 1;
  if (has_bucket()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->bucket(), output);
  }

  // optional bytes key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->key(), output);
  }

  // optional bytes tag = 3;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->tag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbLink)
}

::google::protobuf::uint8* RpbLink::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbLink)
  // optional bytes bucket = 1;
  if (has_bucket()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->bucket(), target);
  }

  // optional bytes key = 2;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->key(), target);
  }

  // optional bytes tag = 3;
  if (has_tag()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->tag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbLink)
  return target;
}

int RpbLink::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes bucket = 1;
    if (has_bucket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bucket());
    }

    // optional bytes key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // optional bytes tag = 3;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->tag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbLink::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbLink* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbLink*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbLink::MergeFrom(const RpbLink& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bucket()) {
      set_bucket(from.bucket());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_tag()) {
      set_tag(from.tag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbLink::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbLink::CopyFrom(const RpbLink& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbLink::IsInitialized() const {

  return true;
}

void RpbLink::Swap(RpbLink* other) {
  if (other != this) {
    std::swap(bucket_, other->bucket_);
    std::swap(key_, other->key_);
    std::swap(tag_, other->tag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbLink::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbLink_descriptor_;
  metadata.reflection = RpbLink_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbCounterUpdateReq::kBucketFieldNumber;
const int RpbCounterUpdateReq::kKeyFieldNumber;
const int RpbCounterUpdateReq::kAmountFieldNumber;
const int RpbCounterUpdateReq::kWFieldNumber;
const int RpbCounterUpdateReq::kDwFieldNumber;
const int RpbCounterUpdateReq::kPwFieldNumber;
const int RpbCounterUpdateReq::kReturnvalueFieldNumber;
#endif  // !_MSC_VER

RpbCounterUpdateReq::RpbCounterUpdateReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbCounterUpdateReq)
}

void RpbCounterUpdateReq::InitAsDefaultInstance() {
}

RpbCounterUpdateReq::RpbCounterUpdateReq(const RpbCounterUpdateReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbCounterUpdateReq)
}

void RpbCounterUpdateReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  bucket_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amount_ = GOOGLE_LONGLONG(0);
  w_ = 0u;
  dw_ = 0u;
  pw_ = 0u;
  returnvalue_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbCounterUpdateReq::~RpbCounterUpdateReq() {
  // @@protoc_insertion_point(destructor:RpbCounterUpdateReq)
  SharedDtor();
}

void RpbCounterUpdateReq::SharedDtor() {
  if (bucket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bucket_;
  }
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void RpbCounterUpdateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbCounterUpdateReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbCounterUpdateReq_descriptor_;
}

const RpbCounterUpdateReq& RpbCounterUpdateReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_5fkv_2eproto();
  return *default_instance_;
}

RpbCounterUpdateReq* RpbCounterUpdateReq::default_instance_ = NULL;

RpbCounterUpdateReq* RpbCounterUpdateReq::New() const {
  return new RpbCounterUpdateReq;
}

void RpbCounterUpdateReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RpbCounterUpdateReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(amount_, returnvalue_);
    if (has_bucket()) {
      if (bucket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bucket_->clear();
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbCounterUpdateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbCounterUpdateReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes bucket = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bucket()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // required bytes key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_amount;
        break;
      }

      // required sint64 amount = 3;
      case 3: {
        if (tag == 24) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_w;
        break;
      }

      // optional uint32 w = 4;
      case 4: {
        if (tag == 32) {
         parse_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &w_)));
          set_has_w();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_dw;
        break;
      }

      // optional uint32 dw = 5;
      case 5: {
        if (tag == 40) {
         parse_dw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_)));
          set_has_dw();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_pw;
        break;
      }

      // optional uint32 pw = 6;
      case 6: {
        if (tag == 48) {
         parse_pw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pw_)));
          set_has_pw();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_returnvalue;
        break;
      }

      // optional bool returnvalue = 7;
      case 7: {
        if (tag == 56) {
         parse_returnvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &returnvalue_)));
          set_has_returnvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbCounterUpdateReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbCounterUpdateReq)
  return false;
#undef DO_
}

void RpbCounterUpdateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbCounterUpdateReq)
  // required bytes bucket = 1;
  if (has_bucket()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->bucket(), output);
  }

  // required bytes key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->key(), output);
  }

  // required sint64 amount = 3;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(3, this->amount(), output);
  }

  // optional uint32 w = 4;
  if (has_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->w(), output);
  }

  // optional uint32 dw = 5;
  if (has_dw()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->dw(), output);
  }

  // optional uint32 pw = 6;
  if (has_pw()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->pw(), output);
  }

  // optional bool returnvalue = 7;
  if (has_returnvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->returnvalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbCounterUpdateReq)
}

::google::protobuf::uint8* RpbCounterUpdateReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbCounterUpdateReq)
  // required bytes bucket = 1;
  if (has_bucket()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->bucket(), target);
  }

  // required bytes key = 2;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->key(), target);
  }

  // required sint64 amount = 3;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(3, this->amount(), target);
  }

  // optional uint32 w = 4;
  if (has_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->w(), target);
  }

  // optional uint32 dw = 5;
  if (has_dw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->dw(), target);
  }

  // optional uint32 pw = 6;
  if (has_pw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->pw(), target);
  }

  // optional bool returnvalue = 7;
  if (has_returnvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->returnvalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbCounterUpdateReq)
  return target;
}

int RpbCounterUpdateReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes bucket = 1;
    if (has_bucket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bucket());
    }

    // required bytes key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // required sint64 amount = 3;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->amount());
    }

    // optional uint32 w = 4;
    if (has_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->w());
    }

    // optional uint32 dw = 5;
    if (has_dw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dw());
    }

    // optional uint32 pw = 6;
    if (has_pw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pw());
    }

    // optional bool returnvalue = 7;
    if (has_returnvalue()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbCounterUpdateReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbCounterUpdateReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbCounterUpdateReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbCounterUpdateReq::MergeFrom(const RpbCounterUpdateReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bucket()) {
      set_bucket(from.bucket());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_w()) {
      set_w(from.w());
    }
    if (from.has_dw()) {
      set_dw(from.dw());
    }
    if (from.has_pw()) {
      set_pw(from.pw());
    }
    if (from.has_returnvalue()) {
      set_returnvalue(from.returnvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbCounterUpdateReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbCounterUpdateReq::CopyFrom(const RpbCounterUpdateReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbCounterUpdateReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RpbCounterUpdateReq::Swap(RpbCounterUpdateReq* other) {
  if (other != this) {
    std::swap(bucket_, other->bucket_);
    std::swap(key_, other->key_);
    std::swap(amount_, other->amount_);
    std::swap(w_, other->w_);
    std::swap(dw_, other->dw_);
    std::swap(pw_, other->pw_);
    std::swap(returnvalue_, other->returnvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbCounterUpdateReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbCounterUpdateReq_descriptor_;
  metadata.reflection = RpbCounterUpdateReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbCounterUpdateResp::kValueFieldNumber;
#endif  // !_MSC_VER

RpbCounterUpdateResp::RpbCounterUpdateResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbCounterUpdateResp)
}

void RpbCounterUpdateResp::InitAsDefaultInstance() {
}

RpbCounterUpdateResp::RpbCounterUpdateResp(const RpbCounterUpdateResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbCounterUpdateResp)
}

void RpbCounterUpdateResp::SharedCtor() {
  _cached_size_ = 0;
  value_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbCounterUpdateResp::~RpbCounterUpdateResp() {
  // @@protoc_insertion_point(destructor:RpbCounterUpdateResp)
  SharedDtor();
}

void RpbCounterUpdateResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RpbCounterUpdateResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbCounterUpdateResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbCounterUpdateResp_descriptor_;
}

const RpbCounterUpdateResp& RpbCounterUpdateResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_5fkv_2eproto();
  return *default_instance_;
}

RpbCounterUpdateResp* RpbCounterUpdateResp::default_instance_ = NULL;

RpbCounterUpdateResp* RpbCounterUpdateResp::New() const {
  return new RpbCounterUpdateResp;
}

void RpbCounterUpdateResp::Clear() {
  value_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbCounterUpdateResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbCounterUpdateResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint64 value = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbCounterUpdateResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbCounterUpdateResp)
  return false;
#undef DO_
}

void RpbCounterUpdateResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbCounterUpdateResp)
  // optional sint64 value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbCounterUpdateResp)
}

::google::protobuf::uint8* RpbCounterUpdateResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbCounterUpdateResp)
  // optional sint64 value = 1;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbCounterUpdateResp)
  return target;
}

int RpbCounterUpdateResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint64 value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbCounterUpdateResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbCounterUpdateResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbCounterUpdateResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbCounterUpdateResp::MergeFrom(const RpbCounterUpdateResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbCounterUpdateResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbCounterUpdateResp::CopyFrom(const RpbCounterUpdateResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbCounterUpdateResp::IsInitialized() const {

  return true;
}

void RpbCounterUpdateResp::Swap(RpbCounterUpdateResp* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbCounterUpdateResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbCounterUpdateResp_descriptor_;
  metadata.reflection = RpbCounterUpdateResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbCounterGetReq::kBucketFieldNumber;
const int RpbCounterGetReq::kKeyFieldNumber;
const int RpbCounterGetReq::kRFieldNumber;
const int RpbCounterGetReq::kPrFieldNumber;
const int RpbCounterGetReq::kBasicQuorumFieldNumber;
const int RpbCounterGetReq::kNotfoundOkFieldNumber;
#endif  // !_MSC_VER

RpbCounterGetReq::RpbCounterGetReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbCounterGetReq)
}

void RpbCounterGetReq::InitAsDefaultInstance() {
}

RpbCounterGetReq::RpbCounterGetReq(const RpbCounterGetReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbCounterGetReq)
}

void RpbCounterGetReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  bucket_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  r_ = 0u;
  pr_ = 0u;
  basic_quorum_ = false;
  notfound_ok_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbCounterGetReq::~RpbCounterGetReq() {
  // @@protoc_insertion_point(destructor:RpbCounterGetReq)
  SharedDtor();
}

void RpbCounterGetReq::SharedDtor() {
  if (bucket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bucket_;
  }
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void RpbCounterGetReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbCounterGetReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbCounterGetReq_descriptor_;
}

const RpbCounterGetReq& RpbCounterGetReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_5fkv_2eproto();
  return *default_instance_;
}

RpbCounterGetReq* RpbCounterGetReq::default_instance_ = NULL;

RpbCounterGetReq* RpbCounterGetReq::New() const {
  return new RpbCounterGetReq;
}

void RpbCounterGetReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RpbCounterGetReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(r_, notfound_ok_);
    if (has_bucket()) {
      if (bucket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bucket_->clear();
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbCounterGetReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbCounterGetReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes bucket = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bucket()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // required bytes key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_r;
        break;
      }

      // optional uint32 r = 3;
      case 3: {
        if (tag == 24) {
         parse_r:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &r_)));
          set_has_r();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_pr;
        break;
      }

      // optional uint32 pr = 4;
      case 4: {
        if (tag == 32) {
         parse_pr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pr_)));
          set_has_pr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_basic_quorum;
        break;
      }

      // optional bool basic_quorum = 5;
      case 5: {
        if (tag == 40) {
         parse_basic_quorum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &basic_quorum_)));
          set_has_basic_quorum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_notfound_ok;
        break;
      }

      // optional bool notfound_ok = 6;
      case 6: {
        if (tag == 48) {
         parse_notfound_ok:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &notfound_ok_)));
          set_has_notfound_ok();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbCounterGetReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbCounterGetReq)
  return false;
#undef DO_
}

void RpbCounterGetReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbCounterGetReq)
  // required bytes bucket = 1;
  if (has_bucket()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->bucket(), output);
  }

  // required bytes key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->key(), output);
  }

  // optional uint32 r = 3;
  if (has_r()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->r(), output);
  }

  // optional uint32 pr = 4;
  if (has_pr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->pr(), output);
  }

  // optional bool basic_quorum = 5;
  if (has_basic_quorum()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->basic_quorum(), output);
  }

  // optional bool notfound_ok = 6;
  if (has_notfound_ok()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->notfound_ok(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbCounterGetReq)
}

::google::protobuf::uint8* RpbCounterGetReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbCounterGetReq)
  // required bytes bucket = 1;
  if (has_bucket()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->bucket(), target);
  }

  // required bytes key = 2;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->key(), target);
  }

  // optional uint32 r = 3;
  if (has_r()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->r(), target);
  }

  // optional uint32 pr = 4;
  if (has_pr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->pr(), target);
  }

  // optional bool basic_quorum = 5;
  if (has_basic_quorum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->basic_quorum(), target);
  }

  // optional bool notfound_ok = 6;
  if (has_notfound_ok()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->notfound_ok(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbCounterGetReq)
  return target;
}

int RpbCounterGetReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes bucket = 1;
    if (has_bucket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bucket());
    }

    // required bytes key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // optional uint32 r = 3;
    if (has_r()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->r());
    }

    // optional uint32 pr = 4;
    if (has_pr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pr());
    }

    // optional bool basic_quorum = 5;
    if (has_basic_quorum()) {
      total_size += 1 + 1;
    }

    // optional bool notfound_ok = 6;
    if (has_notfound_ok()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbCounterGetReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbCounterGetReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbCounterGetReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbCounterGetReq::MergeFrom(const RpbCounterGetReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bucket()) {
      set_bucket(from.bucket());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_r()) {
      set_r(from.r());
    }
    if (from.has_pr()) {
      set_pr(from.pr());
    }
    if (from.has_basic_quorum()) {
      set_basic_quorum(from.basic_quorum());
    }
    if (from.has_notfound_ok()) {
      set_notfound_ok(from.notfound_ok());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbCounterGetReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbCounterGetReq::CopyFrom(const RpbCounterGetReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbCounterGetReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RpbCounterGetReq::Swap(RpbCounterGetReq* other) {
  if (other != this) {
    std::swap(bucket_, other->bucket_);
    std::swap(key_, other->key_);
    std::swap(r_, other->r_);
    std::swap(pr_, other->pr_);
    std::swap(basic_quorum_, other->basic_quorum_);
    std::swap(notfound_ok_, other->notfound_ok_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbCounterGetReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbCounterGetReq_descriptor_;
  metadata.reflection = RpbCounterGetReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbCounterGetResp::kValueFieldNumber;
#endif  // !_MSC_VER

RpbCounterGetResp::RpbCounterGetResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbCounterGetResp)
}

void RpbCounterGetResp::InitAsDefaultInstance() {
}

RpbCounterGetResp::RpbCounterGetResp(const RpbCounterGetResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbCounterGetResp)
}

void RpbCounterGetResp::SharedCtor() {
  _cached_size_ = 0;
  value_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbCounterGetResp::~RpbCounterGetResp() {
  // @@protoc_insertion_point(destructor:RpbCounterGetResp)
  SharedDtor();
}

void RpbCounterGetResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RpbCounterGetResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbCounterGetResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbCounterGetResp_descriptor_;
}

const RpbCounterGetResp& RpbCounterGetResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_5fkv_2eproto();
  return *default_instance_;
}

RpbCounterGetResp* RpbCounterGetResp::default_instance_ = NULL;

RpbCounterGetResp* RpbCounterGetResp::New() const {
  return new RpbCounterGetResp;
}

void RpbCounterGetResp::Clear() {
  value_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbCounterGetResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbCounterGetResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint64 value = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbCounterGetResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbCounterGetResp)
  return false;
#undef DO_
}

void RpbCounterGetResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbCounterGetResp)
  // optional sint64 value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbCounterGetResp)
}

::google::protobuf::uint8* RpbCounterGetResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbCounterGetResp)
  // optional sint64 value = 1;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbCounterGetResp)
  return target;
}

int RpbCounterGetResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint64 value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbCounterGetResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbCounterGetResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbCounterGetResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbCounterGetResp::MergeFrom(const RpbCounterGetResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbCounterGetResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbCounterGetResp::CopyFrom(const RpbCounterGetResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbCounterGetResp::IsInitialized() const {

  return true;
}

void RpbCounterGetResp::Swap(RpbCounterGetResp* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbCounterGetResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbCounterGetResp_descriptor_;
  metadata.reflection = RpbCounterGetResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbGetBucketKeyPreflistReq::kBucketFieldNumber;
const int RpbGetBucketKeyPreflistReq::kKeyFieldNumber;
const int RpbGetBucketKeyPreflistReq::kTypeFieldNumber;
#endif  // !_MSC_VER

RpbGetBucketKeyPreflistReq::RpbGetBucketKeyPreflistReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbGetBucketKeyPreflistReq)
}

void RpbGetBucketKeyPreflistReq::InitAsDefaultInstance() {
}

RpbGetBucketKeyPreflistReq::RpbGetBucketKeyPreflistReq(const RpbGetBucketKeyPreflistReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbGetBucketKeyPreflistReq)
}

void RpbGetBucketKeyPreflistReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  bucket_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbGetBucketKeyPreflistReq::~RpbGetBucketKeyPreflistReq() {
  // @@protoc_insertion_point(destructor:RpbGetBucketKeyPreflistReq)
  SharedDtor();
}

void RpbGetBucketKeyPreflistReq::SharedDtor() {
  if (bucket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bucket_;
  }
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (this != default_instance_) {
  }
}

void RpbGetBucketKeyPreflistReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbGetBucketKeyPreflistReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbGetBucketKeyPreflistReq_descriptor_;
}

const RpbGetBucketKeyPreflistReq& RpbGetBucketKeyPreflistReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_5fkv_2eproto();
  return *default_instance_;
}

RpbGetBucketKeyPreflistReq* RpbGetBucketKeyPreflistReq::default_instance_ = NULL;

RpbGetBucketKeyPreflistReq* RpbGetBucketKeyPreflistReq::New() const {
  return new RpbGetBucketKeyPreflistReq;
}

void RpbGetBucketKeyPreflistReq::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_bucket()) {
      if (bucket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bucket_->clear();
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbGetBucketKeyPreflistReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbGetBucketKeyPreflistReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes bucket = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bucket()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // required bytes key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_type;
        break;
      }

      // optional bytes type = 3;
      case 3: {
        if (tag == 26) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbGetBucketKeyPreflistReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbGetBucketKeyPreflistReq)
  return false;
#undef DO_
}

void RpbGetBucketKeyPreflistReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbGetBucketKeyPreflistReq)
  // required bytes bucket = 1;
  if (has_bucket()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->bucket(), output);
  }

  // required bytes key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->key(), output);
  }

  // optional bytes type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbGetBucketKeyPreflistReq)
}

::google::protobuf::uint8* RpbGetBucketKeyPreflistReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbGetBucketKeyPreflistReq)
  // required bytes bucket = 1;
  if (has_bucket()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->bucket(), target);
  }

  // required bytes key = 2;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->key(), target);
  }

  // optional bytes type = 3;
  if (has_type()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbGetBucketKeyPreflistReq)
  return target;
}

int RpbGetBucketKeyPreflistReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes bucket = 1;
    if (has_bucket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bucket());
    }

    // required bytes key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // optional bytes type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbGetBucketKeyPreflistReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbGetBucketKeyPreflistReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbGetBucketKeyPreflistReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbGetBucketKeyPreflistReq::MergeFrom(const RpbGetBucketKeyPreflistReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bucket()) {
      set_bucket(from.bucket());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbGetBucketKeyPreflistReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbGetBucketKeyPreflistReq::CopyFrom(const RpbGetBucketKeyPreflistReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbGetBucketKeyPreflistReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RpbGetBucketKeyPreflistReq::Swap(RpbGetBucketKeyPreflistReq* other) {
  if (other != this) {
    std::swap(bucket_, other->bucket_);
    std::swap(key_, other->key_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbGetBucketKeyPreflistReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbGetBucketKeyPreflistReq_descriptor_;
  metadata.reflection = RpbGetBucketKeyPreflistReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbGetBucketKeyPreflistResp::kPreflistFieldNumber;
#endif  // !_MSC_VER

RpbGetBucketKeyPreflistResp::RpbGetBucketKeyPreflistResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbGetBucketKeyPreflistResp)
}

void RpbGetBucketKeyPreflistResp::InitAsDefaultInstance() {
}

RpbGetBucketKeyPreflistResp::RpbGetBucketKeyPreflistResp(const RpbGetBucketKeyPreflistResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbGetBucketKeyPreflistResp)
}

void RpbGetBucketKeyPreflistResp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbGetBucketKeyPreflistResp::~RpbGetBucketKeyPreflistResp() {
  // @@protoc_insertion_point(destructor:RpbGetBucketKeyPreflistResp)
  SharedDtor();
}

void RpbGetBucketKeyPreflistResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RpbGetBucketKeyPreflistResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbGetBucketKeyPreflistResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbGetBucketKeyPreflistResp_descriptor_;
}

const RpbGetBucketKeyPreflistResp& RpbGetBucketKeyPreflistResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_5fkv_2eproto();
  return *default_instance_;
}

RpbGetBucketKeyPreflistResp* RpbGetBucketKeyPreflistResp::default_instance_ = NULL;

RpbGetBucketKeyPreflistResp* RpbGetBucketKeyPreflistResp::New() const {
  return new RpbGetBucketKeyPreflistResp;
}

void RpbGetBucketKeyPreflistResp::Clear() {
  preflist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbGetBucketKeyPreflistResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbGetBucketKeyPreflistResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .RpbBucketKeyPreflistItem preflist = 1;
      case 1: {
        if (tag == 10) {
         parse_preflist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_preflist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_preflist;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbGetBucketKeyPreflistResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbGetBucketKeyPreflistResp)
  return false;
#undef DO_
}

void RpbGetBucketKeyPreflistResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbGetBucketKeyPreflistResp)
  // repeated .RpbBucketKeyPreflistItem preflist = 1;
  for (int i = 0; i < this->preflist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->preflist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbGetBucketKeyPreflistResp)
}

::google::protobuf::uint8* RpbGetBucketKeyPreflistResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbGetBucketKeyPreflistResp)
  // repeated .RpbBucketKeyPreflistItem preflist = 1;
  for (int i = 0; i < this->preflist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->preflist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbGetBucketKeyPreflistResp)
  return target;
}

int RpbGetBucketKeyPreflistResp::ByteSize() const {
  int total_size = 0;

  // repeated .RpbBucketKeyPreflistItem preflist = 1;
  total_size += 1 * this->preflist_size();
  for (int i = 0; i < this->preflist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->preflist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbGetBucketKeyPreflistResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbGetBucketKeyPreflistResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbGetBucketKeyPreflistResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbGetBucketKeyPreflistResp::MergeFrom(const RpbGetBucketKeyPreflistResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  preflist_.MergeFrom(from.preflist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbGetBucketKeyPreflistResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbGetBucketKeyPreflistResp::CopyFrom(const RpbGetBucketKeyPreflistResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbGetBucketKeyPreflistResp::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->preflist())) return false;
  return true;
}

void RpbGetBucketKeyPreflistResp::Swap(RpbGetBucketKeyPreflistResp* other) {
  if (other != this) {
    preflist_.Swap(&other->preflist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbGetBucketKeyPreflistResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbGetBucketKeyPreflistResp_descriptor_;
  metadata.reflection = RpbGetBucketKeyPreflistResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbBucketKeyPreflistItem::kPartitionFieldNumber;
const int RpbBucketKeyPreflistItem::kNodeFieldNumber;
const int RpbBucketKeyPreflistItem::kPrimaryFieldNumber;
#endif  // !_MSC_VER

RpbBucketKeyPreflistItem::RpbBucketKeyPreflistItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbBucketKeyPreflistItem)
}

void RpbBucketKeyPreflistItem::InitAsDefaultInstance() {
}

RpbBucketKeyPreflistItem::RpbBucketKeyPreflistItem(const RpbBucketKeyPreflistItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbBucketKeyPreflistItem)
}

void RpbBucketKeyPreflistItem::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  partition_ = GOOGLE_LONGLONG(0);
  node_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  primary_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbBucketKeyPreflistItem::~RpbBucketKeyPreflistItem() {
  // @@protoc_insertion_point(destructor:RpbBucketKeyPreflistItem)
  SharedDtor();
}

void RpbBucketKeyPreflistItem::SharedDtor() {
  if (node_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete node_;
  }
  if (this != default_instance_) {
  }
}

void RpbBucketKeyPreflistItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbBucketKeyPreflistItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbBucketKeyPreflistItem_descriptor_;
}

const RpbBucketKeyPreflistItem& RpbBucketKeyPreflistItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_5fkv_2eproto();
  return *default_instance_;
}

RpbBucketKeyPreflistItem* RpbBucketKeyPreflistItem::default_instance_ = NULL;

RpbBucketKeyPreflistItem* RpbBucketKeyPreflistItem::New() const {
  return new RpbBucketKeyPreflistItem;
}

void RpbBucketKeyPreflistItem::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    partition_ = GOOGLE_LONGLONG(0);
    if (has_node()) {
      if (node_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        node_->clear();
      }
    }
    primary_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbBucketKeyPreflistItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbBucketKeyPreflistItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 partition = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &partition_)));
          set_has_partition();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_node;
        break;
      }

      // required bytes node = 2;
      case 2: {
        if (tag == 18) {
         parse_node:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_node()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_primary;
        break;
      }

      // required bool primary = 3;
      case 3: {
        if (tag == 24) {
         parse_primary:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &primary_)));
          set_has_primary();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbBucketKeyPreflistItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbBucketKeyPreflistItem)
  return false;
#undef DO_
}

void RpbBucketKeyPreflistItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbBucketKeyPreflistItem)
  // required int64 partition = 1;
  if (has_partition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->partition(), output);
  }

  // required bytes node = 2;
  if (has_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->node(), output);
  }

  // required bool primary = 3;
  if (has_primary()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->primary(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbBucketKeyPreflistItem)
}

::google::protobuf::uint8* RpbBucketKeyPreflistItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbBucketKeyPreflistItem)
  // required int64 partition = 1;
  if (has_partition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->partition(), target);
  }

  // required bytes node = 2;
  if (has_node()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->node(), target);
  }

  // required bool primary = 3;
  if (has_primary()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->primary(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbBucketKeyPreflistItem)
  return target;
}

int RpbBucketKeyPreflistItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 partition = 1;
    if (has_partition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->partition());
    }

    // required bytes node = 2;
    if (has_node()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->node());
    }

    // required bool primary = 3;
    if (has_primary()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbBucketKeyPreflistItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbBucketKeyPreflistItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbBucketKeyPreflistItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbBucketKeyPreflistItem::MergeFrom(const RpbBucketKeyPreflistItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_partition()) {
      set_partition(from.partition());
    }
    if (from.has_node()) {
      set_node(from.node());
    }
    if (from.has_primary()) {
      set_primary(from.primary());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbBucketKeyPreflistItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbBucketKeyPreflistItem::CopyFrom(const RpbBucketKeyPreflistItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbBucketKeyPreflistItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RpbBucketKeyPreflistItem::Swap(RpbBucketKeyPreflistItem* other) {
  if (other != this) {
    std::swap(partition_, other->partition_);
    std::swap(node_, other->node_);
    std::swap(primary_, other->primary_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbBucketKeyPreflistItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbBucketKeyPreflistItem_descriptor_;
  metadata.reflection = RpbBucketKeyPreflistItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbCoverageReq::kTypeFieldNumber;
const int RpbCoverageReq::kBucketFieldNumber;
const int RpbCoverageReq::kMinPartitionsFieldNumber;
const int RpbCoverageReq::kReplaceCoverFieldNumber;
const int RpbCoverageReq::kUnavailableCoverFieldNumber;
#endif  // !_MSC_VER

RpbCoverageReq::RpbCoverageReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbCoverageReq)
}

void RpbCoverageReq::InitAsDefaultInstance() {
}

RpbCoverageReq::RpbCoverageReq(const RpbCoverageReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbCoverageReq)
}

void RpbCoverageReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bucket_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  min_partitions_ = 0u;
  replace_cover_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbCoverageReq::~RpbCoverageReq() {
  // @@protoc_insertion_point(destructor:RpbCoverageReq)
  SharedDtor();
}

void RpbCoverageReq::SharedDtor() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (bucket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bucket_;
  }
  if (replace_cover_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete replace_cover_;
  }
  if (this != default_instance_) {
  }
}

void RpbCoverageReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbCoverageReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbCoverageReq_descriptor_;
}

const RpbCoverageReq& RpbCoverageReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_5fkv_2eproto();
  return *default_instance_;
}

RpbCoverageReq* RpbCoverageReq::default_instance_ = NULL;

RpbCoverageReq* RpbCoverageReq::New() const {
  return new RpbCoverageReq;
}

void RpbCoverageReq::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
    if (has_bucket()) {
      if (bucket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bucket_->clear();
      }
    }
    min_partitions_ = 0u;
    if (has_replace_cover()) {
      if (replace_cover_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        replace_cover_->clear();
      }
    }
  }
  unavailable_cover_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbCoverageReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbCoverageReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_bucket;
        break;
      }

      // required bytes bucket = 2;
      case 2: {
        if (tag == 18) {
         parse_bucket:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bucket()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_min_partitions;
        break;
      }

      // optional uint32 min_partitions = 3;
      case 3: {
        if (tag == 24) {
         parse_min_partitions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_partitions_)));
          set_has_min_partitions();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_replace_cover;
        break;
      }

      // optional bytes replace_cover = 4;
      case 4: {
        if (tag == 34) {
         parse_replace_cover:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_replace_cover()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_unavailable_cover;
        break;
      }

      // repeated bytes unavailable_cover = 5;
      case 5: {
        if (tag == 42) {
         parse_unavailable_cover:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_unavailable_cover()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_unavailable_cover;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbCoverageReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbCoverageReq)
  return false;
#undef DO_
}

void RpbCoverageReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbCoverageReq)
  // optional bytes type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->type(), output);
  }

  // required bytes bucket = 2;
  if (has_bucket()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->bucket(), output);
  }

  // optional uint32 min_partitions = 3;
  if (has_min_partitions()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->min_partitions(), output);
  }

  // optional bytes replace_cover = 4;
  if (has_replace_cover()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->replace_cover(), output);
  }

  // repeated bytes unavailable_cover = 5;
  for (int i = 0; i < this->unavailable_cover_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->unavailable_cover(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbCoverageReq)
}

::google::protobuf::uint8* RpbCoverageReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbCoverageReq)
  // optional bytes type = 1;
  if (has_type()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->type(), target);
  }

  // required bytes bucket = 2;
  if (has_bucket()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->bucket(), target);
  }

  // optional uint32 min_partitions = 3;
  if (has_min_partitions()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->min_partitions(), target);
  }

  // optional bytes replace_cover = 4;
  if (has_replace_cover()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->replace_cover(), target);
  }

  // repeated bytes unavailable_cover = 5;
  for (int i = 0; i < this->unavailable_cover_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(5, this->unavailable_cover(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbCoverageReq)
  return target;
}

int RpbCoverageReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->type());
    }

    // required bytes bucket = 2;
    if (has_bucket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bucket());
    }

    // optional uint32 min_partitions = 3;
    if (has_min_partitions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_partitions());
    }

    // optional bytes replace_cover = 4;
    if (has_replace_cover()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->replace_cover());
    }

  }
  // repeated bytes unavailable_cover = 5;
  total_size += 1 * this->unavailable_cover_size();
  for (int i = 0; i < this->unavailable_cover_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->unavailable_cover(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbCoverageReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbCoverageReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbCoverageReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbCoverageReq::MergeFrom(const RpbCoverageReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  unavailable_cover_.MergeFrom(from.unavailable_cover_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_bucket()) {
      set_bucket(from.bucket());
    }
    if (from.has_min_partitions()) {
      set_min_partitions(from.min_partitions());
    }
    if (from.has_replace_cover()) {
      set_replace_cover(from.replace_cover());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbCoverageReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbCoverageReq::CopyFrom(const RpbCoverageReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbCoverageReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void RpbCoverageReq::Swap(RpbCoverageReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(bucket_, other->bucket_);
    std::swap(min_partitions_, other->min_partitions_);
    std::swap(replace_cover_, other->replace_cover_);
    unavailable_cover_.Swap(&other->unavailable_cover_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbCoverageReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbCoverageReq_descriptor_;
  metadata.reflection = RpbCoverageReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbCoverageResp::kEntriesFieldNumber;
#endif  // !_MSC_VER

RpbCoverageResp::RpbCoverageResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbCoverageResp)
}

void RpbCoverageResp::InitAsDefaultInstance() {
}

RpbCoverageResp::RpbCoverageResp(const RpbCoverageResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbCoverageResp)
}

void RpbCoverageResp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbCoverageResp::~RpbCoverageResp() {
  // @@protoc_insertion_point(destructor:RpbCoverageResp)
  SharedDtor();
}

void RpbCoverageResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RpbCoverageResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbCoverageResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbCoverageResp_descriptor_;
}

const RpbCoverageResp& RpbCoverageResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_5fkv_2eproto();
  return *default_instance_;
}

RpbCoverageResp* RpbCoverageResp::default_instance_ = NULL;

RpbCoverageResp* RpbCoverageResp::New() const {
  return new RpbCoverageResp;
}

void RpbCoverageResp::Clear() {
  entries_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbCoverageResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbCoverageResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .RpbCoverageEntry entries = 1;
      case 1: {
        if (tag == 10) {
         parse_entries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_entries;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbCoverageResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbCoverageResp)
  return false;
#undef DO_
}

void RpbCoverageResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbCoverageResp)
  // repeated .RpbCoverageEntry entries = 1;
  for (int i = 0; i < this->entries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->entries(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbCoverageResp)
}

::google::protobuf::uint8* RpbCoverageResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbCoverageResp)
  // repeated .RpbCoverageEntry entries = 1;
  for (int i = 0; i < this->entries_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->entries(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbCoverageResp)
  return target;
}

int RpbCoverageResp::ByteSize() const {
  int total_size = 0;

  // repeated .RpbCoverageEntry entries = 1;
  total_size += 1 * this->entries_size();
  for (int i = 0; i < this->entries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entries(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbCoverageResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbCoverageResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbCoverageResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbCoverageResp::MergeFrom(const RpbCoverageResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  entries_.MergeFrom(from.entries_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbCoverageResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbCoverageResp::CopyFrom(const RpbCoverageResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbCoverageResp::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->entries())) return false;
  return true;
}

void RpbCoverageResp::Swap(RpbCoverageResp* other) {
  if (other != this) {
    entries_.Swap(&other->entries_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbCoverageResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbCoverageResp_descriptor_;
  metadata.reflection = RpbCoverageResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbCoverageEntry::kIpFieldNumber;
const int RpbCoverageEntry::kPortFieldNumber;
const int RpbCoverageEntry::kKeyspaceDescFieldNumber;
const int RpbCoverageEntry::kCoverContextFieldNumber;
#endif  // !_MSC_VER

RpbCoverageEntry::RpbCoverageEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbCoverageEntry)
}

void RpbCoverageEntry::InitAsDefaultInstance() {
}

RpbCoverageEntry::RpbCoverageEntry(const RpbCoverageEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbCoverageEntry)
}

void RpbCoverageEntry::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
  keyspace_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cover_context_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbCoverageEntry::~RpbCoverageEntry() {
  // @@protoc_insertion_point(destructor:RpbCoverageEntry)
  SharedDtor();
}

void RpbCoverageEntry::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (keyspace_desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete keyspace_desc_;
  }
  if (cover_context_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cover_context_;
  }
  if (this != default_instance_) {
  }
}

void RpbCoverageEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbCoverageEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbCoverageEntry_descriptor_;
}

const RpbCoverageEntry& RpbCoverageEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_5fkv_2eproto();
  return *default_instance_;
}

RpbCoverageEntry* RpbCoverageEntry::default_instance_ = NULL;

RpbCoverageEntry* RpbCoverageEntry::New() const {
  return new RpbCoverageEntry;
}

void RpbCoverageEntry::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
    port_ = 0u;
    if (has_keyspace_desc()) {
      if (keyspace_desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        keyspace_desc_->clear();
      }
    }
    if (has_cover_context()) {
      if (cover_context_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cover_context_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbCoverageEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbCoverageEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes ip = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ip()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // required uint32 port = 2;
      case 2: {
        if (tag == 16) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_keyspace_desc;
        break;
      }

      // optional bytes keyspace_desc = 3;
      case 3: {
        if (tag == 26) {
         parse_keyspace_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_keyspace_desc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_cover_context;
        break;
      }

      // required bytes cover_context = 4;
      case 4: {
        if (tag == 34) {
         parse_cover_context:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cover_context()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbCoverageEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbCoverageEntry)
  return false;
#undef DO_
}

void RpbCoverageEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbCoverageEntry)
  // required bytes ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->ip(), output);
  }

  // required uint32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }

  // optional bytes keyspace_desc = 3;
  if (has_keyspace_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->keyspace_desc(), output);
  }

  // required bytes cover_context = 4;
  if (has_cover_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->cover_context(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbCoverageEntry)
}

::google::protobuf::uint8* RpbCoverageEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbCoverageEntry)
  // required bytes ip = 1;
  if (has_ip()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->ip(), target);
  }

  // required uint32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->port(), target);
  }

  // optional bytes keyspace_desc = 3;
  if (has_keyspace_desc()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->keyspace_desc(), target);
  }

  // required bytes cover_context = 4;
  if (has_cover_context()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->cover_context(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbCoverageEntry)
  return target;
}

int RpbCoverageEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ip());
    }

    // required uint32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

    // optional bytes keyspace_desc = 3;
    if (has_keyspace_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->keyspace_desc());
    }

    // required bytes cover_context = 4;
    if (has_cover_context()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cover_context());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbCoverageEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbCoverageEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbCoverageEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbCoverageEntry::MergeFrom(const RpbCoverageEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_keyspace_desc()) {
      set_keyspace_desc(from.keyspace_desc());
    }
    if (from.has_cover_context()) {
      set_cover_context(from.cover_context());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbCoverageEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbCoverageEntry::CopyFrom(const RpbCoverageEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbCoverageEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  return true;
}

void RpbCoverageEntry::Swap(RpbCoverageEntry* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(keyspace_desc_, other->keyspace_desc_);
    std::swap(cover_context_, other->cover_context_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbCoverageEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbCoverageEntry_descriptor_;
  metadata.reflection = RpbCoverageEntry_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
