// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: riak_search.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "riak_search.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* RpbSearchDoc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbSearchDoc_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbSearchQueryReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbSearchQueryReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbSearchQueryResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbSearchQueryResp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_riak_5fsearch_2eproto() {
  protobuf_AddDesc_riak_5fsearch_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "riak_search.proto");
  GOOGLE_CHECK(file != NULL);
  RpbSearchDoc_descriptor_ = file->message_type(0);
  static const int RpbSearchDoc_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbSearchDoc, fields_),
  };
  RpbSearchDoc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbSearchDoc_descriptor_,
      RpbSearchDoc::default_instance_,
      RpbSearchDoc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbSearchDoc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbSearchDoc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbSearchDoc));
  RpbSearchQueryReq_descriptor_ = file->message_type(1);
  static const int RpbSearchQueryReq_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbSearchQueryReq, q_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbSearchQueryReq, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbSearchQueryReq, rows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbSearchQueryReq, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbSearchQueryReq, sort_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbSearchQueryReq, filter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbSearchQueryReq, df_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbSearchQueryReq, op_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbSearchQueryReq, fl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbSearchQueryReq, presort_),
  };
  RpbSearchQueryReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbSearchQueryReq_descriptor_,
      RpbSearchQueryReq::default_instance_,
      RpbSearchQueryReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbSearchQueryReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbSearchQueryReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbSearchQueryReq));
  RpbSearchQueryResp_descriptor_ = file->message_type(2);
  static const int RpbSearchQueryResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbSearchQueryResp, docs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbSearchQueryResp, max_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbSearchQueryResp, num_found_),
  };
  RpbSearchQueryResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbSearchQueryResp_descriptor_,
      RpbSearchQueryResp::default_instance_,
      RpbSearchQueryResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbSearchQueryResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbSearchQueryResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbSearchQueryResp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_riak_5fsearch_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbSearchDoc_descriptor_, &RpbSearchDoc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbSearchQueryReq_descriptor_, &RpbSearchQueryReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbSearchQueryResp_descriptor_, &RpbSearchQueryResp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_riak_5fsearch_2eproto() {
  delete RpbSearchDoc::default_instance_;
  delete RpbSearchDoc_reflection_;
  delete RpbSearchQueryReq::default_instance_;
  delete RpbSearchQueryReq_reflection_;
  delete RpbSearchQueryResp::default_instance_;
  delete RpbSearchQueryResp_reflection_;
}

void protobuf_AddDesc_riak_5fsearch_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_riak_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021riak_search.proto\032\nriak.proto\"(\n\014RpbSe"
    "archDoc\022\030\n\006fields\030\001 \003(\0132\010.RpbPair\"\235\001\n\021Rp"
    "bSearchQueryReq\022\t\n\001q\030\001 \002(\014\022\r\n\005index\030\002 \002("
    "\014\022\014\n\004rows\030\003 \001(\r\022\r\n\005start\030\004 \001(\r\022\014\n\004sort\030\005"
    " \001(\014\022\016\n\006filter\030\006 \001(\014\022\n\n\002df\030\007 \001(\014\022\n\n\002op\030\010"
    " \001(\014\022\n\n\002fl\030\t \003(\014\022\017\n\007presort\030\n \001(\014\"W\n\022Rpb"
    "SearchQueryResp\022\033\n\004docs\030\001 \003(\0132\r.RpbSearc"
    "hDoc\022\021\n\tmax_score\030\002 \001(\002\022\021\n\tnum_found\030\003 \001"
    "(\rB\'\n\027com.basho.riak.protobufB\014RiakSearc"
    "hPB", 363);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "riak_search.proto", &protobuf_RegisterTypes);
  RpbSearchDoc::default_instance_ = new RpbSearchDoc();
  RpbSearchQueryReq::default_instance_ = new RpbSearchQueryReq();
  RpbSearchQueryResp::default_instance_ = new RpbSearchQueryResp();
  RpbSearchDoc::default_instance_->InitAsDefaultInstance();
  RpbSearchQueryReq::default_instance_->InitAsDefaultInstance();
  RpbSearchQueryResp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_riak_5fsearch_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_riak_5fsearch_2eproto {
  StaticDescriptorInitializer_riak_5fsearch_2eproto() {
    protobuf_AddDesc_riak_5fsearch_2eproto();
  }
} static_descriptor_initializer_riak_5fsearch_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int RpbSearchDoc::kFieldsFieldNumber;
#endif  // !_MSC_VER

RpbSearchDoc::RpbSearchDoc()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbSearchDoc)
}

void RpbSearchDoc::InitAsDefaultInstance() {
}

RpbSearchDoc::RpbSearchDoc(const RpbSearchDoc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbSearchDoc)
}

void RpbSearchDoc::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbSearchDoc::~RpbSearchDoc() {
  // @@protoc_insertion_point(destructor:RpbSearchDoc)
  SharedDtor();
}

void RpbSearchDoc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RpbSearchDoc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbSearchDoc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbSearchDoc_descriptor_;
}

const RpbSearchDoc& RpbSearchDoc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_5fsearch_2eproto();
  return *default_instance_;
}

RpbSearchDoc* RpbSearchDoc::default_instance_ = NULL;

RpbSearchDoc* RpbSearchDoc::New() const {
  return new RpbSearchDoc;
}

void RpbSearchDoc::Clear() {
  fields_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbSearchDoc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbSearchDoc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .RpbPair fields = 1;
      case 1: {
        if (tag == 10) {
         parse_fields:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fields()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_fields;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbSearchDoc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbSearchDoc)
  return false;
#undef DO_
}

void RpbSearchDoc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbSearchDoc)
  // repeated .RpbPair fields = 1;
  for (int i = 0; i < this->fields_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fields(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbSearchDoc)
}

::google::protobuf::uint8* RpbSearchDoc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbSearchDoc)
  // repeated .RpbPair fields = 1;
  for (int i = 0; i < this->fields_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fields(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbSearchDoc)
  return target;
}

int RpbSearchDoc::ByteSize() const {
  int total_size = 0;

  // repeated .RpbPair fields = 1;
  total_size += 1 * this->fields_size();
  for (int i = 0; i < this->fields_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fields(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbSearchDoc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbSearchDoc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbSearchDoc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbSearchDoc::MergeFrom(const RpbSearchDoc& from) {
  GOOGLE_CHECK_NE(&from, this);
  fields_.MergeFrom(from.fields_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbSearchDoc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbSearchDoc::CopyFrom(const RpbSearchDoc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbSearchDoc::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->fields())) return false;
  return true;
}

void RpbSearchDoc::Swap(RpbSearchDoc* other) {
  if (other != this) {
    fields_.Swap(&other->fields_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbSearchDoc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbSearchDoc_descriptor_;
  metadata.reflection = RpbSearchDoc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbSearchQueryReq::kQFieldNumber;
const int RpbSearchQueryReq::kIndexFieldNumber;
const int RpbSearchQueryReq::kRowsFieldNumber;
const int RpbSearchQueryReq::kStartFieldNumber;
const int RpbSearchQueryReq::kSortFieldNumber;
const int RpbSearchQueryReq::kFilterFieldNumber;
const int RpbSearchQueryReq::kDfFieldNumber;
const int RpbSearchQueryReq::kOpFieldNumber;
const int RpbSearchQueryReq::kFlFieldNumber;
const int RpbSearchQueryReq::kPresortFieldNumber;
#endif  // !_MSC_VER

RpbSearchQueryReq::RpbSearchQueryReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbSearchQueryReq)
}

void RpbSearchQueryReq::InitAsDefaultInstance() {
}

RpbSearchQueryReq::RpbSearchQueryReq(const RpbSearchQueryReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbSearchQueryReq)
}

void RpbSearchQueryReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  q_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  index_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rows_ = 0u;
  start_ = 0u;
  sort_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  df_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  op_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  presort_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbSearchQueryReq::~RpbSearchQueryReq() {
  // @@protoc_insertion_point(destructor:RpbSearchQueryReq)
  SharedDtor();
}

void RpbSearchQueryReq::SharedDtor() {
  if (q_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete q_;
  }
  if (index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete index_;
  }
  if (sort_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sort_;
  }
  if (filter_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filter_;
  }
  if (df_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete df_;
  }
  if (op_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete op_;
  }
  if (presort_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete presort_;
  }
  if (this != default_instance_) {
  }
}

void RpbSearchQueryReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbSearchQueryReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbSearchQueryReq_descriptor_;
}

const RpbSearchQueryReq& RpbSearchQueryReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_5fsearch_2eproto();
  return *default_instance_;
}

RpbSearchQueryReq* RpbSearchQueryReq::default_instance_ = NULL;

RpbSearchQueryReq* RpbSearchQueryReq::New() const {
  return new RpbSearchQueryReq;
}

void RpbSearchQueryReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RpbSearchQueryReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(rows_, start_);
    if (has_q()) {
      if (q_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        q_->clear();
      }
    }
    if (has_index()) {
      if (index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        index_->clear();
      }
    }
    if (has_sort()) {
      if (sort_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sort_->clear();
      }
    }
    if (has_filter()) {
      if (filter_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        filter_->clear();
      }
    }
    if (has_df()) {
      if (df_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        df_->clear();
      }
    }
    if (has_op()) {
      if (op_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        op_->clear();
      }
    }
  }
  if (has_presort()) {
    if (presort_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      presort_->clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  fl_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbSearchQueryReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbSearchQueryReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes q = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_q()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_index;
        break;
      }

      // required bytes index = 2;
      case 2: {
        if (tag == 18) {
         parse_index:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_index()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_rows;
        break;
      }

      // optional uint32 rows = 3;
      case 3: {
        if (tag == 24) {
         parse_rows:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rows_)));
          set_has_rows();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_start;
        break;
      }

      // optional uint32 start = 4;
      case 4: {
        if (tag == 32) {
         parse_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_)));
          set_has_start();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_sort;
        break;
      }

      // optional bytes sort = 5;
      case 5: {
        if (tag == 42) {
         parse_sort:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sort()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_filter;
        break;
      }

      // optional bytes filter = 6;
      case 6: {
        if (tag == 50) {
         parse_filter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_filter()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_df;
        break;
      }

      // optional bytes df = 7;
      case 7: {
        if (tag == 58) {
         parse_df:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_df()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_op;
        break;
      }

      // optional bytes op = 8;
      case 8: {
        if (tag == 66) {
         parse_op:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_op()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_fl;
        break;
      }

      // repeated bytes fl = 9;
      case 9: {
        if (tag == 74) {
         parse_fl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_fl()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_fl;
        if (input->ExpectTag(82)) goto parse_presort;
        break;
      }

      // optional bytes presort = 10;
      case 10: {
        if (tag == 82) {
         parse_presort:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_presort()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbSearchQueryReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbSearchQueryReq)
  return false;
#undef DO_
}

void RpbSearchQueryReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbSearchQueryReq)
  // required bytes q = 1;
  if (has_q()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->q(), output);
  }

  // required bytes index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->index(), output);
  }

  // optional uint32 rows = 3;
  if (has_rows()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rows(), output);
  }

  // optional uint32 start = 4;
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->start(), output);
  }

  // optional bytes sort = 5;
  if (has_sort()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->sort(), output);
  }

  // optional bytes filter = 6;
  if (has_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->filter(), output);
  }

  // optional bytes df = 7;
  if (has_df()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->df(), output);
  }

  // optional bytes op = 8;
  if (has_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->op(), output);
  }

  // repeated bytes fl = 9;
  for (int i = 0; i < this->fl_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      9, this->fl(i), output);
  }

  // optional bytes presort = 10;
  if (has_presort()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->presort(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbSearchQueryReq)
}

::google::protobuf::uint8* RpbSearchQueryReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbSearchQueryReq)
  // required bytes q = 1;
  if (has_q()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->q(), target);
  }

  // required bytes index = 2;
  if (has_index()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->index(), target);
  }

  // optional uint32 rows = 3;
  if (has_rows()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rows(), target);
  }

  // optional uint32 start = 4;
  if (has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->start(), target);
  }

  // optional bytes sort = 5;
  if (has_sort()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->sort(), target);
  }

  // optional bytes filter = 6;
  if (has_filter()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->filter(), target);
  }

  // optional bytes df = 7;
  if (has_df()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->df(), target);
  }

  // optional bytes op = 8;
  if (has_op()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->op(), target);
  }

  // repeated bytes fl = 9;
  for (int i = 0; i < this->fl_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(9, this->fl(i), target);
  }

  // optional bytes presort = 10;
  if (has_presort()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->presort(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbSearchQueryReq)
  return target;
}

int RpbSearchQueryReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes q = 1;
    if (has_q()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->q());
    }

    // required bytes index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->index());
    }

    // optional uint32 rows = 3;
    if (has_rows()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rows());
    }

    // optional uint32 start = 4;
    if (has_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start());
    }

    // optional bytes sort = 5;
    if (has_sort()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sort());
    }

    // optional bytes filter = 6;
    if (has_filter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->filter());
    }

    // optional bytes df = 7;
    if (has_df()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->df());
    }

    // optional bytes op = 8;
    if (has_op()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->op());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional bytes presort = 10;
    if (has_presort()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->presort());
    }

  }
  // repeated bytes fl = 9;
  total_size += 1 * this->fl_size();
  for (int i = 0; i < this->fl_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->fl(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbSearchQueryReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbSearchQueryReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbSearchQueryReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbSearchQueryReq::MergeFrom(const RpbSearchQueryReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  fl_.MergeFrom(from.fl_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_q()) {
      set_q(from.q());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_rows()) {
      set_rows(from.rows());
    }
    if (from.has_start()) {
      set_start(from.start());
    }
    if (from.has_sort()) {
      set_sort(from.sort());
    }
    if (from.has_filter()) {
      set_filter(from.filter());
    }
    if (from.has_df()) {
      set_df(from.df());
    }
    if (from.has_op()) {
      set_op(from.op());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_presort()) {
      set_presort(from.presort());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbSearchQueryReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbSearchQueryReq::CopyFrom(const RpbSearchQueryReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbSearchQueryReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RpbSearchQueryReq::Swap(RpbSearchQueryReq* other) {
  if (other != this) {
    std::swap(q_, other->q_);
    std::swap(index_, other->index_);
    std::swap(rows_, other->rows_);
    std::swap(start_, other->start_);
    std::swap(sort_, other->sort_);
    std::swap(filter_, other->filter_);
    std::swap(df_, other->df_);
    std::swap(op_, other->op_);
    fl_.Swap(&other->fl_);
    std::swap(presort_, other->presort_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbSearchQueryReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbSearchQueryReq_descriptor_;
  metadata.reflection = RpbSearchQueryReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbSearchQueryResp::kDocsFieldNumber;
const int RpbSearchQueryResp::kMaxScoreFieldNumber;
const int RpbSearchQueryResp::kNumFoundFieldNumber;
#endif  // !_MSC_VER

RpbSearchQueryResp::RpbSearchQueryResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbSearchQueryResp)
}

void RpbSearchQueryResp::InitAsDefaultInstance() {
}

RpbSearchQueryResp::RpbSearchQueryResp(const RpbSearchQueryResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbSearchQueryResp)
}

void RpbSearchQueryResp::SharedCtor() {
  _cached_size_ = 0;
  max_score_ = 0;
  num_found_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbSearchQueryResp::~RpbSearchQueryResp() {
  // @@protoc_insertion_point(destructor:RpbSearchQueryResp)
  SharedDtor();
}

void RpbSearchQueryResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RpbSearchQueryResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbSearchQueryResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbSearchQueryResp_descriptor_;
}

const RpbSearchQueryResp& RpbSearchQueryResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_5fsearch_2eproto();
  return *default_instance_;
}

RpbSearchQueryResp* RpbSearchQueryResp::default_instance_ = NULL;

RpbSearchQueryResp* RpbSearchQueryResp::New() const {
  return new RpbSearchQueryResp;
}

void RpbSearchQueryResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RpbSearchQueryResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(max_score_, num_found_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  docs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbSearchQueryResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbSearchQueryResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .RpbSearchDoc docs = 1;
      case 1: {
        if (tag == 10) {
         parse_docs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_docs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_docs;
        if (input->ExpectTag(21)) goto parse_max_score;
        break;
      }

      // optional float max_score = 2;
      case 2: {
        if (tag == 21) {
         parse_max_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_score_)));
          set_has_max_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_num_found;
        break;
      }

      // optional uint32 num_found = 3;
      case 3: {
        if (tag == 24) {
         parse_num_found:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_found_)));
          set_has_num_found();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbSearchQueryResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbSearchQueryResp)
  return false;
#undef DO_
}

void RpbSearchQueryResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbSearchQueryResp)
  // repeated .RpbSearchDoc docs = 1;
  for (int i = 0; i < this->docs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->docs(i), output);
  }

  // optional float max_score = 2;
  if (has_max_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->max_score(), output);
  }

  // optional uint32 num_found = 3;
  if (has_num_found()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num_found(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbSearchQueryResp)
}

::google::protobuf::uint8* RpbSearchQueryResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbSearchQueryResp)
  // repeated .RpbSearchDoc docs = 1;
  for (int i = 0; i < this->docs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->docs(i), target);
  }

  // optional float max_score = 2;
  if (has_max_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->max_score(), target);
  }

  // optional uint32 num_found = 3;
  if (has_num_found()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num_found(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbSearchQueryResp)
  return target;
}

int RpbSearchQueryResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional float max_score = 2;
    if (has_max_score()) {
      total_size += 1 + 4;
    }

    // optional uint32 num_found = 3;
    if (has_num_found()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_found());
    }

  }
  // repeated .RpbSearchDoc docs = 1;
  total_size += 1 * this->docs_size();
  for (int i = 0; i < this->docs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->docs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbSearchQueryResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbSearchQueryResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbSearchQueryResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbSearchQueryResp::MergeFrom(const RpbSearchQueryResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  docs_.MergeFrom(from.docs_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_max_score()) {
      set_max_score(from.max_score());
    }
    if (from.has_num_found()) {
      set_num_found(from.num_found());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbSearchQueryResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbSearchQueryResp::CopyFrom(const RpbSearchQueryResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbSearchQueryResp::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->docs())) return false;
  return true;
}

void RpbSearchQueryResp::Swap(RpbSearchQueryResp* other) {
  if (other != this) {
    docs_.Swap(&other->docs_);
    std::swap(max_score_, other->max_score_);
    std::swap(num_found_, other->num_found_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbSearchQueryResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbSearchQueryResp_descriptor_;
  metadata.reflection = RpbSearchQueryResp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
